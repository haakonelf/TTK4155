
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  00000ff6  0000108a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800290  00800290  0000111a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000111a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001796  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abb  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d84  00000000  00000000  0000358f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  00004314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a2c  00000000  00000000  00004b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0000557e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ef       	ldi	r30, 0xF6	; 246
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 39       	cpi	r26, 0x90	; 144
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e9       	ldi	r26, 0x90	; 144
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 39       	cpi	r26, 0x9A	; 154
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	18 d2       	rcall	.+1072   	; 0x550 <main>
 120:	68 c7       	rjmp	.+3792   	; 0xff2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:
#include <avr/io.h>
#include <stdint.h>
void adc_init(void){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	87 68       	ori	r24, 0x87	; 135
 12c:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1);
 138:	80 81       	ld	r24, Z
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	|= ((1<<channel) & 0x03);
 140:	ec e7       	ldi	r30, 0x7C	; 124
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <adc_read+0x10>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <adc_read+0xc>
 154:	23 70       	andi	r18, 0x03	; 3
 156:	92 2b       	or	r25, r18
 158:	90 83       	st	Z, r25
	ADCSRA	|= (1 << ADSC);
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
 164:	80 81       	ld	r24, Z
 166:	86 fd       	sbrc	r24, 6
 168:	fd cf       	rjmp	.-6      	; 0x164 <adc_read+0x24>

	return ADC;
 16a:	80 91 78 00 	lds	r24, 0x0078
 16e:	90 91 79 00 	lds	r25, 0x0079
 172:	08 95       	ret

00000174 <can_init>:
#include "mcp_defines.h"

#include <stdlib.h>
#include <avr/io.h>
void can_init(){
	mcp_init();
 174:	ea d1       	rcall	.+980    	; 0x54a <mcp_init>
	mcp_bitModify(MCP_RXB0CTRL, MCP_RXBCTRL_MASK, 0xff);
 176:	4f ef       	ldi	r20, 0xFF	; 255
 178:	60 e6       	ldi	r22, 0x60	; 96
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	ce d1       	rcall	.+924    	; 0x51a <mcp_bitModify>
	mcp_bitModify(MCP_RXB1CTRL, MCP_RXBCTRL_MASK, 0xff);
 17e:	4f ef       	ldi	r20, 0xFF	; 255
 180:	60 e6       	ldi	r22, 0x60	; 96
 182:	80 e7       	ldi	r24, 0x70	; 112
 184:	ca d1       	rcall	.+916    	; 0x51a <mcp_bitModify>
	mcp_bitModify(MCP_CANINTE, 0x3, 0x3);
 186:	43 e0       	ldi	r20, 0x03	; 3
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	8e e2       	ldi	r24, 0x2E	; 46
 18c:	c6 d1       	rcall	.+908    	; 0x51a <mcp_bitModify>
	
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	60 ee       	ldi	r22, 0xE0	; 224
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	c2 c1       	rjmp	.+900    	; 0x51a <mcp_bitModify>
 196:	08 95       	ret

00000198 <new_can_message>:
	
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
	return msg;
}

can_message new_can_message(uint16_t id, uint8_t length, uint8_t* data){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	2b 97       	sbiw	r28, 0x0b	; 11
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
	can_message m;
	m.id = id;
	m.length = length;
	for(int i = 0; i < length; i++){
 1ac:	44 23       	and	r20, r20
 1ae:	61 f0       	breq	.+24     	; 0x1c8 <new_can_message+0x30>
 1b0:	a2 2f       	mov	r26, r18
 1b2:	b3 2f       	mov	r27, r19
 1b4:	fe 01       	movw	r30, r28
 1b6:	34 96       	adiw	r30, 0x04	; 4
 1b8:	9f 01       	movw	r18, r30
 1ba:	24 0f       	add	r18, r20
 1bc:	31 1d       	adc	r19, r1
		m.data[i] = data[i];
 1be:	5d 91       	ld	r21, X+
 1c0:	51 93       	st	Z+, r21

can_message new_can_message(uint16_t id, uint8_t length, uint8_t* data){
	can_message m;
	m.id = id;
	m.length = length;
	for(int i = 0; i < length; i++){
 1c2:	e2 17       	cp	r30, r18
 1c4:	f3 07       	cpc	r31, r19
 1c6:	d9 f7       	brne	.-10     	; 0x1be <new_can_message+0x26>
		m.data[i] = data[i];
	}
	
	
	return m;
 1c8:	7a 83       	std	Y+2, r23	; 0x02
 1ca:	69 83       	std	Y+1, r22	; 0x01
 1cc:	4b 83       	std	Y+3, r20	; 0x03
 1ce:	2b e0       	ldi	r18, 0x0B	; 11
 1d0:	fe 01       	movw	r30, r28
 1d2:	31 96       	adiw	r30, 0x01	; 1
 1d4:	dc 01       	movw	r26, r24
 1d6:	01 90       	ld	r0, Z+
 1d8:	0d 92       	st	X+, r0
 1da:	2a 95       	dec	r18
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <new_can_message+0x3e>
}
 1de:	2b 96       	adiw	r28, 0x0b	; 11
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <can_write>:

//tx_buffer is the address of the control register
void can_write(can_message *msg, uint8_t tx_buffer){
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	7c 01       	movw	r14, r24
 202:	c6 2e       	mov	r12, r22
	while(mcp_read(tx_buffer) & (1 << MCP_TEXREQ));	//wait for previous message to send
 204:	8c 2d       	mov	r24, r12
 206:	69 d1       	rcall	.+722    	; 0x4da <mcp_read>
 208:	83 fd       	sbrc	r24, 3
 20a:	fc cf       	rjmp	.-8      	; 0x204 <can_write+0x14>
	
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
 20c:	f7 01       	movw	r30, r14
 20e:	20 81       	ld	r18, Z
 210:	31 81       	ldd	r19, Z+1	; 0x01
 212:	b9 01       	movw	r22, r18
 214:	76 95       	lsr	r23
 216:	67 95       	ror	r22
 218:	76 95       	lsr	r23
 21a:	67 95       	ror	r22
 21c:	76 95       	lsr	r23
 21e:	67 95       	ror	r22
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	8c 0d       	add	r24, r12
 224:	66 d1       	rcall	.+716    	; 0x4f2 <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
 226:	f7 01       	movw	r30, r14
 228:	60 81       	ld	r22, Z
 22a:	62 95       	swap	r22
 22c:	66 0f       	add	r22, r22
 22e:	60 7e       	andi	r22, 0xE0	; 224
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	8c 0d       	add	r24, r12
 234:	5e d1       	rcall	.+700    	; 0x4f2 <mcp_write>
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
 236:	f7 01       	movw	r30, r14
 238:	62 81       	ldd	r22, Z+2	; 0x02
 23a:	6f 70       	andi	r22, 0x0F	; 15
 23c:	85 e0       	ldi	r24, 0x05	; 5
 23e:	8c 0d       	add	r24, r12
 240:	58 d1       	rcall	.+688    	; 0x4f2 <mcp_write>
	
	for(int i = 0; i < msg->length; i++){
 242:	f7 01       	movw	r30, r14
 244:	82 81       	ldd	r24, Z+2	; 0x02
 246:	88 23       	and	r24, r24
 248:	b9 f0       	breq	.+46     	; 0x278 <can_write+0x88>
 24a:	87 01       	movw	r16, r14
 24c:	0d 5f       	subi	r16, 0xFD	; 253
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
 250:	0f 2e       	mov	r0, r31
 252:	f6 e0       	ldi	r31, 0x06	; 6
 254:	df 2e       	mov	r13, r31
 256:	f0 2d       	mov	r31, r0
 258:	dc 0c       	add	r13, r12
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
 25e:	f8 01       	movw	r30, r16
 260:	61 91       	ld	r22, Z+
 262:	8f 01       	movw	r16, r30
 264:	8d 2d       	mov	r24, r13
 266:	45 d1       	rcall	.+650    	; 0x4f2 <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	d3 94       	inc	r13
 26c:	f7 01       	movw	r30, r14
 26e:	22 81       	ldd	r18, Z+2	; 0x02
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	c2 17       	cp	r28, r18
 274:	d3 07       	cpc	r29, r19
 276:	9c f3       	brlt	.-26     	; 0x25e <can_write+0x6e>
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
 278:	8c 2d       	mov	r24, r12
 27a:	82 95       	swap	r24
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	82 58       	subi	r24, 0x82	; 130
 280:	60 d1       	rcall	.+704    	; 0x542 <mcp_requestToSend>
	
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	df 90       	pop	r13
 290:	cf 90       	pop	r12
 292:	08 95       	ret

00000294 <can_pollInterrupt>:
uint8_t can_pollInterrupt(void){
 294:	cf 93       	push	r28
	if(PINA | (1 << PA0)){ //Check for interrupts
 296:	80 b1       	in	r24, 0x00	; 0
		uint8_t interrupt_register = mcp_read(MCP_CANINTF);
 298:	8c e2       	ldi	r24, 0x2C	; 44
 29a:	1f d1       	rcall	.+574    	; 0x4da <mcp_read>
		//Finds the register that sent an interrupt signal
		if(interrupt_register & MCP_RX0IF){
 29c:	80 ff       	sbrs	r24, 0
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <can_pollInterrupt+0x18>
			mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0xFF);
 2a0:	4f ef       	ldi	r20, 0xFF	; 255
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	8c e2       	ldi	r24, 0x2C	; 44
 2a6:	39 d1       	rcall	.+626    	; 0x51a <mcp_bitModify>
			return MCP_RXB0CTRL;
 2a8:	c0 e6       	ldi	r28, 0x60	; 96
 2aa:	11 c0       	rjmp	.+34     	; 0x2ce <can_pollInterrupt+0x3a>
		}
		
		else if(interrupt_register & MCP_RX1IF){
 2ac:	c8 2f       	mov	r28, r24
 2ae:	c2 70       	andi	r28, 0x02	; 2
 2b0:	81 ff       	sbrs	r24, 1
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <can_pollInterrupt+0x2c>
			mcp_bitModify(MCP_CANINTF, MCP_RX1IF, 0xFF);
 2b4:	4f ef       	ldi	r20, 0xFF	; 255
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	8c e2       	ldi	r24, 0x2C	; 44
 2ba:	2f d1       	rcall	.+606    	; 0x51a <mcp_bitModify>
			return MCP_RXB1CTRL;
 2bc:	c0 e7       	ldi	r28, 0x70	; 112
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <can_pollInterrupt+0x3a>
		}	
	}
	
	printf("No interrupt detected!");
 2c0:	26 e0       	ldi	r18, 0x06	; 6
 2c2:	32 e0       	ldi	r19, 0x02	; 2
 2c4:	3f 93       	push	r19
 2c6:	2f 93       	push	r18
 2c8:	7a d2       	rcall	.+1268   	; 0x7be <printf>
	return 0x00;
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
}
 2ce:	8c 2f       	mov	r24, r28
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <can_read>:
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
	
	
}

can_message can_read(void){
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	2b 97       	sbiw	r28, 0x0b	; 11
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	6c 01       	movw	r12, r24
	can_message msg;
	uint8_t bufferSelect = can_pollInterrupt();
 2fe:	ca df       	rcall	.-108    	; 0x294 <can_pollInterrupt>
 300:	18 2f       	mov	r17, r24
	/*
	if(!bufferSelect){
		printf("No interrupt detected!");
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	81 0f       	add	r24, r17
 306:	e9 d0       	rcall	.+466    	; 0x4da <mcp_read>
 308:	a8 2e       	mov	r10, r24
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	81 0f       	add	r24, r17
 30e:	e5 d0       	rcall	.+458    	; 0x4da <mcp_read>
 310:	82 95       	swap	r24
 312:	86 95       	lsr	r24
 314:	87 70       	andi	r24, 0x07	; 7
 316:	b1 2c       	mov	r11, r1
 318:	aa 0c       	add	r10, r10
 31a:	bb 1c       	adc	r11, r11
 31c:	aa 0c       	add	r10, r10
 31e:	bb 1c       	adc	r11, r11
 320:	aa 0c       	add	r10, r10
 322:	bb 1c       	adc	r11, r11
 324:	a8 2a       	or	r10, r24
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	81 0f       	add	r24, r17
 32a:	d7 d0       	rcall	.+430    	; 0x4da <mcp_read>
 32c:	8f 70       	andi	r24, 0x0F	; 15
 32e:	88 2e       	mov	r8, r24
	
	for(int i = 0; i < msg.length; i++){
 330:	a1 f0       	breq	.+40     	; 0x35a <can_read+0x86>
 332:	0f 2e       	mov	r0, r31
 334:	f6 e0       	ldi	r31, 0x06	; 6
 336:	9f 2e       	mov	r9, r31
 338:	f0 2d       	mov	r31, r0
 33a:	91 0e       	add	r9, r17
 33c:	8e 01       	movw	r16, r28
 33e:	0c 5f       	subi	r16, 0xFC	; 252
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	78 01       	movw	r14, r16
 344:	e8 0e       	add	r14, r24
 346:	f1 1c       	adc	r15, r1
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
 348:	89 2d       	mov	r24, r9
 34a:	c7 d0       	rcall	.+398    	; 0x4da <mcp_read>
 34c:	f8 01       	movw	r30, r16
 34e:	81 93       	st	Z+, r24
 350:	8f 01       	movw	r16, r30
 352:	93 94       	inc	r9
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
 354:	ee 15       	cp	r30, r14
 356:	ff 05       	cpc	r31, r15
 358:	b9 f7       	brne	.-18     	; 0x348 <can_read+0x74>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
	}
	
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	8c e2       	ldi	r24, 0x2C	; 44
 360:	dc d0       	rcall	.+440    	; 0x51a <mcp_bitModify>
	return msg;
 362:	ba 82       	std	Y+2, r11	; 0x02
 364:	a9 82       	std	Y+1, r10	; 0x01
 366:	8b 82       	std	Y+3, r8	; 0x03
 368:	8b e0       	ldi	r24, 0x0B	; 11
 36a:	fe 01       	movw	r30, r28
 36c:	31 96       	adiw	r30, 0x01	; 1
 36e:	d6 01       	movw	r26, r12
 370:	01 90       	ld	r0, Z+
 372:	0d 92       	st	X+, r0
 374:	8a 95       	dec	r24
 376:	e1 f7       	brne	.-8      	; 0x370 <can_read+0x9c>
}
 378:	c6 01       	movw	r24, r12
 37a:	2b 96       	adiw	r28, 0x0b	; 11
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	df 90       	pop	r13
 394:	cf 90       	pop	r12
 396:	bf 90       	pop	r11
 398:	af 90       	pop	r10
 39a:	9f 90       	pop	r9
 39c:	8f 90       	pop	r8
 39e:	08 95       	ret

000003a0 <update_game_score>:
#include "mcp_defines.h"
#include "can.h"
#include "game.h"
#include "adc.h"

void update_game_score(game_score *score){
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	66 97       	sbiw	r28, 0x16	; 22
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	8c 01       	movw	r16, r24
	uint8_t newState = 0;
	score->sum += adc_read(0);
 3be:	fc 01       	movw	r30, r24
 3c0:	e1 80       	ldd	r14, Z+1	; 0x01
 3c2:	f2 80       	ldd	r15, Z+2	; 0x02
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	bc de       	rcall	.-648    	; 0x140 <adc_read>
 3c8:	8e 0d       	add	r24, r14
 3ca:	9f 1d       	adc	r25, r15
 3cc:	f8 01       	movw	r30, r16
 3ce:	92 83       	std	Z+2, r25	; 0x02
 3d0:	81 83       	std	Z+1, r24	; 0x01
	(score->antallMaalinger)++;
 3d2:	20 81       	ld	r18, Z
 3d4:	2f 5f       	subi	r18, 0xFF	; 255
 3d6:	20 83       	st	Z, r18
	
	if(score->antallMaalinger == 20){
 3d8:	24 31       	cpi	r18, 0x14	; 20
 3da:	c9 f4       	brne	.+50     	; 0x40e <update_game_score+0x6e>
		score->sum = score->sum/score->antallMaalinger;
 3dc:	9c 01       	movw	r18, r24
 3de:	ad ec       	ldi	r26, 0xCD	; 205
 3e0:	bc ec       	ldi	r27, 0xCC	; 204
 3e2:	94 d1       	rcall	.+808    	; 0x70c <__umulhisi3>
 3e4:	92 95       	swap	r25
 3e6:	82 95       	swap	r24
 3e8:	8f 70       	andi	r24, 0x0F	; 15
 3ea:	89 27       	eor	r24, r25
 3ec:	9f 70       	andi	r25, 0x0F	; 15
 3ee:	89 27       	eor	r24, r25
 3f0:	92 83       	std	Z+2, r25	; 0x02
 3f2:	81 83       	std	Z+1, r24	; 0x01
		score->antallMaalinger = 1;
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	20 83       	st	Z, r18
		if(score->sum < 100){
 3f8:	84 36       	cpi	r24, 0x64	; 100
 3fa:	91 05       	cpc	r25, r1
 3fc:	60 f1       	brcs	.+88     	; 0x456 <update_game_score+0xb6>
			newState = 1;
		}
		else{
			score->boolState = 0;
 3fe:	13 82       	std	Z+3, r1	; 0x03
 400:	06 c0       	rjmp	.+12     	; 0x40e <update_game_score+0x6e>
		}
	}
	
	//Registering point
	if(!score->boolState && newState){
		score->boolState = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	f8 01       	movw	r30, r16
 406:	83 83       	std	Z+3, r24	; 0x03
		(score->score)++;
 408:	84 81       	ldd	r24, Z+4	; 0x04
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	84 83       	std	Z+4, r24	; 0x04
	}
	
	printf("Score: %d\n", score->score);
 40e:	f8 01       	movw	r30, r16
 410:	84 81       	ldd	r24, Z+4	; 0x04
 412:	1f 92       	push	r1
 414:	8f 93       	push	r24
 416:	8d e1       	ldi	r24, 0x1D	; 29
 418:	92 e0       	ldi	r25, 0x02	; 2
 41a:	9f 93       	push	r25
 41c:	8f 93       	push	r24
 41e:	cf d1       	rcall	.+926    	; 0x7be <printf>
	
	can_message msg;
	msg = new_can_message(MCP_GAME_SCORE_MESSAGE, 1, &score->score);
 420:	98 01       	movw	r18, r16
 422:	2c 5f       	subi	r18, 0xFC	; 252
 424:	3f 4f       	sbci	r19, 0xFF	; 255
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	66 e6       	ldi	r22, 0x66	; 102
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	ce 01       	movw	r24, r28
 42e:	0c 96       	adiw	r24, 0x0c	; 12
 430:	b3 de       	rcall	.-666    	; 0x198 <new_can_message>
 432:	8b e0       	ldi	r24, 0x0B	; 11
 434:	fe 01       	movw	r30, r28
 436:	3c 96       	adiw	r30, 0x0c	; 12
 438:	de 01       	movw	r26, r28
 43a:	11 96       	adiw	r26, 0x01	; 1
 43c:	01 90       	ld	r0, Z+
 43e:	0d 92       	st	X+, r0
 440:	8a 95       	dec	r24
 442:	e1 f7       	brne	.-8      	; 0x43c <update_game_score+0x9c>
	can_write(&msg, MCP_TXB0CTRL);
 444:	60 e3       	ldi	r22, 0x30	; 48
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	d2 de       	rcall	.-604    	; 0x1f0 <can_write>
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	05 c0       	rjmp	.+10     	; 0x460 <update_game_score+0xc0>
			newState = 0;
		}
	}
	
	//Registering point
	if(!score->boolState && newState){
 456:	f8 01       	movw	r30, r16
 458:	83 81       	ldd	r24, Z+3	; 0x03
 45a:	88 23       	and	r24, r24
 45c:	91 f2       	breq	.-92     	; 0x402 <update_game_score+0x62>
 45e:	d7 cf       	rjmp	.-82     	; 0x40e <update_game_score+0x6e>
	printf("Score: %d\n", score->score);
	
	can_message msg;
	msg = new_can_message(MCP_GAME_SCORE_MESSAGE, 1, &score->score);
	can_write(&msg, MCP_TXB0CTRL);
 460:	66 96       	adiw	r28, 0x16	; 22
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	ff 90       	pop	r15
 476:	ef 90       	pop	r14
 478:	08 95       	ret

0000047a <JOY_new_joystick>:
		}else{
		return NEUTRAL;
	}
}

Joystick JOY_new_joystick(uint8_t x, uint8_t y, uint8_t offset_x, uint8_t offset_y){
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	60 97       	sbiw	r28, 0x10	; 16
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
	Joystick j;
	j.x = x;
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	9a 87       	std	Y+10, r25	; 0x0a
 492:	89 87       	std	Y+9, r24	; 0x09
	j.y = y;
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	7c 87       	std	Y+12, r23	; 0x0c
 498:	6b 87       	std	Y+11, r22	; 0x0b
	j.offset_x = offset_x;
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	5e 87       	std	Y+14, r21	; 0x0e
 49e:	4d 87       	std	Y+13, r20	; 0x0d
	j.offset_y = offset_y;
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	38 8b       	std	Y+16, r19	; 0x10
 4a4:	2f 87       	std	Y+15, r18	; 0x0f
	
	return j;
 4a6:	88 e0       	ldi	r24, 0x08	; 8
 4a8:	fe 01       	movw	r30, r28
 4aa:	39 96       	adiw	r30, 0x09	; 9
 4ac:	de 01       	movw	r26, r28
 4ae:	11 96       	adiw	r26, 0x01	; 1
 4b0:	01 90       	ld	r0, Z+
 4b2:	0d 92       	st	X+, r0
 4b4:	8a 95       	dec	r24
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <JOY_new_joystick+0x36>
 4b8:	29 81       	ldd	r18, Y+1	; 0x01
 4ba:	3a 81       	ldd	r19, Y+2	; 0x02
 4bc:	4b 81       	ldd	r20, Y+3	; 0x03
 4be:	5c 81       	ldd	r21, Y+4	; 0x04
 4c0:	6d 81       	ldd	r22, Y+5	; 0x05
 4c2:	7e 81       	ldd	r23, Y+6	; 0x06
 4c4:	8f 81       	ldd	r24, Y+7	; 0x07
 4c6:	98 85       	ldd	r25, Y+8	; 0x08
 4c8:	60 96       	adiw	r28, 0x10	; 16
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <mcp_read>:
	SPI_transmit(MCP_READ_STATUS);
	uint8_t status = SPI_transmit(0x00);
	PORTB |= (1<< MCP_CS);
	
	return status;
}
 4da:	cf 93       	push	r28
 4dc:	c8 2f       	mov	r28, r24
 4de:	28 98       	cbi	0x05, 0	; 5
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	ef d0       	rcall	.+478    	; 0x6c2 <SPI_transmit>
 4e4:	8c 2f       	mov	r24, r28
 4e6:	ed d0       	rcall	.+474    	; 0x6c2 <SPI_transmit>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	eb d0       	rcall	.+470    	; 0x6c2 <SPI_transmit>
 4ec:	28 9a       	sbi	0x05, 0	; 5
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <mcp_write>:
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	d8 2f       	mov	r29, r24
 4f8:	c6 2f       	mov	r28, r22
 4fa:	28 98       	cbi	0x05, 0	; 5
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	e1 d0       	rcall	.+450    	; 0x6c2 <SPI_transmit>
 500:	8d 2f       	mov	r24, r29
 502:	df d0       	rcall	.+446    	; 0x6c2 <SPI_transmit>
 504:	8c 2f       	mov	r24, r28
 506:	dd d0       	rcall	.+442    	; 0x6c2 <SPI_transmit>
 508:	28 9a       	sbi	0x05, 0	; 5
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <mcp_reset>:
 510:	28 98       	cbi	0x05, 0	; 5
 512:	80 ec       	ldi	r24, 0xC0	; 192
 514:	d6 d0       	rcall	.+428    	; 0x6c2 <SPI_transmit>
 516:	28 9a       	sbi	0x05, 0	; 5
 518:	08 95       	ret

0000051a <mcp_bitModify>:
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	18 2f       	mov	r17, r24
 522:	d6 2f       	mov	r29, r22
 524:	c4 2f       	mov	r28, r20
 526:	28 98       	cbi	0x05, 0	; 5
 528:	85 e0       	ldi	r24, 0x05	; 5
 52a:	cb d0       	rcall	.+406    	; 0x6c2 <SPI_transmit>
 52c:	81 2f       	mov	r24, r17
 52e:	c9 d0       	rcall	.+402    	; 0x6c2 <SPI_transmit>
 530:	8d 2f       	mov	r24, r29
 532:	c7 d0       	rcall	.+398    	; 0x6c2 <SPI_transmit>
 534:	8c 2f       	mov	r24, r28
 536:	c5 d0       	rcall	.+394    	; 0x6c2 <SPI_transmit>
 538:	28 9a       	sbi	0x05, 0	; 5
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	08 95       	ret

00000542 <mcp_requestToSend>:
 542:	28 98       	cbi	0x05, 0	; 5
 544:	be d0       	rcall	.+380    	; 0x6c2 <SPI_transmit>
 546:	28 9a       	sbi	0x05, 0	; 5
 548:	08 95       	ret

0000054a <mcp_init>:

void mcp_init(void){
	SPI_masterInit();
 54a:	b5 d0       	rcall	.+362    	; 0x6b6 <SPI_masterInit>
	mcp_reset();
 54c:	e1 cf       	rjmp	.-62     	; 0x510 <mcp_reset>
 54e:	08 95       	ret

00000550 <main>:
#include "can.h"
#include "game.h"
#include "adc.h"

int main(void)
{
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
 558:	68 97       	sbiw	r28, 0x18	; 24
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
	sei();
 564:	78 94       	sei
	USART_Init(MYUBRR);
 566:	87 e6       	ldi	r24, 0x67	; 103
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	b1 d0       	rcall	.+354    	; 0x6ce <USART_Init>
	fdevopen((int (*)(char,  struct __file *))USART_Transmit, (int (*)(struct __file *))USART_Receive);
 56c:	6e e7       	ldi	r22, 0x7E	; 126
 56e:	73 e0       	ldi	r23, 0x03	; 3
 570:	86 e7       	ldi	r24, 0x76	; 118
 572:	93 e0       	ldi	r25, 0x03	; 3
 574:	da d0       	rcall	.+436    	; 0x72a <fdevopen>
	printf("UART setup done\n");
 576:	88 e2       	ldi	r24, 0x28	; 40
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	32 d1       	rcall	.+612    	; 0x7e0 <puts>
	can_init();
 57c:	fb dd       	rcall	.-1034   	; 0x174 <can_init>
	printf("CAN setup done\n");
 57e:	88 e3       	ldi	r24, 0x38	; 56
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	2e d1       	rcall	.+604    	; 0x7e0 <puts>
	pwm_init();
 584:	55 d0       	rcall	.+170    	; 0x630 <pwm_init>
	printf("PWM setup done\n");
 586:	87 e4       	ldi	r24, 0x47	; 71
 588:	92 e0       	ldi	r25, 0x02	; 2
 58a:	2a d1       	rcall	.+596    	; 0x7e0 <puts>
	adc_init();
 58c:	cb dd       	rcall	.-1130   	; 0x124 <adc_init>
	printf("ADC setup done\n");
 58e:	86 e5       	ldi	r24, 0x56	; 86
 590:	92 e0       	ldi	r25, 0x02	; 2
 592:	26 d1       	rcall	.+588    	; 0x7e0 <puts>
	printf("Initialization done\n");
 594:	85 e6       	ldi	r24, 0x65	; 101
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	23 d1       	rcall	.+582    	; 0x7e0 <puts>
	
	DDRA |=(1<<PA2); //for solenoid
 59a:	0a 9a       	sbi	0x01, 2	; 1
	Joystick joy;
	can_message msg;
	game_score score;
	score.antallMaalinger = 0;
 59c:	1c 8a       	std	Y+20, r1	; 0x14
	score.boolState = 0;
 59e:	1f 8a       	std	Y+23, r1	; 0x17
	score.score = 0;
 5a0:	18 8e       	std	Y+24, r1	; 0x18
	score.sum = 0;
 5a2:	1e 8a       	std	Y+22, r1	; 0x16
 5a4:	1d 8a       	std	Y+21, r1	; 0x15
	
	while(1)
	{
		printf("IR: %d\n", adc_read(0));
 5a6:	0f 2e       	mov	r0, r31
 5a8:	f9 e7       	ldi	r31, 0x79	; 121
 5aa:	ef 2e       	mov	r14, r31
 5ac:	f2 e0       	ldi	r31, 0x02	; 2
 5ae:	ff 2e       	mov	r15, r31
 5b0:	f0 2d       	mov	r31, r0
			joy = JOY_new_joystick(msg.data[0], msg.data[1], msg.data[2], msg.data[3]);
			pwm_set_servo(joy.x);
		}
		
		if(msg.id == MCP_BUTTON_PRESS){
			printf("Button pressed");
 5b2:	0f 2e       	mov	r0, r31
 5b4:	f1 e8       	ldi	r31, 0x81	; 129
 5b6:	cf 2e       	mov	r12, r31
 5b8:	f2 e0       	ldi	r31, 0x02	; 2
 5ba:	df 2e       	mov	r13, r31
 5bc:	f0 2d       	mov	r31, r0
	score.score = 0;
	score.sum = 0;
	
	while(1)
	{
		printf("IR: %d\n", adc_read(0));
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	bf dd       	rcall	.-1154   	; 0x140 <adc_read>
 5c2:	9f 93       	push	r25
 5c4:	8f 93       	push	r24
 5c6:	ff 92       	push	r15
 5c8:	ef 92       	push	r14
 5ca:	f9 d0       	rcall	.+498    	; 0x7be <printf>
		if(can_pollInterrupt()){
 5cc:	63 de       	rcall	.-826    	; 0x294 <can_pollInterrupt>
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	88 23       	and	r24, r24
 5d8:	31 f0       	breq	.+12     	; 0x5e6 <main+0x96>
			msg = can_read();
 5da:	ce 01       	movw	r24, r28
 5dc:	09 96       	adiw	r24, 0x09	; 9
 5de:	7a de       	rcall	.-780    	; 0x2d4 <can_read>
 5e0:	09 85       	ldd	r16, Y+9	; 0x09
 5e2:	1a 85       	ldd	r17, Y+10	; 0x0a
 5e4:	bc 84       	ldd	r11, Y+12	; 0x0c
			
		}
		if(msg.id == MCP_JOYSTICK_MESSAGE){
 5e6:	05 35       	cpi	r16, 0x55	; 85
 5e8:	11 05       	cpc	r17, r1
 5ea:	89 f4       	brne	.+34     	; 0x60e <main+0xbe>
			joy = JOY_new_joystick(msg.data[0], msg.data[1], msg.data[2], msg.data[3]);
 5ec:	2f 85       	ldd	r18, Y+15	; 0x0f
 5ee:	4e 85       	ldd	r20, Y+14	; 0x0e
 5f0:	6d 85       	ldd	r22, Y+13	; 0x0d
 5f2:	8b 2d       	mov	r24, r11
 5f4:	42 df       	rcall	.-380    	; 0x47a <JOY_new_joystick>
 5f6:	29 83       	std	Y+1, r18	; 0x01
 5f8:	3a 83       	std	Y+2, r19	; 0x02
 5fa:	4b 83       	std	Y+3, r20	; 0x03
 5fc:	5c 83       	std	Y+4, r21	; 0x04
 5fe:	6d 83       	std	Y+5, r22	; 0x05
 600:	7e 83       	std	Y+6, r23	; 0x06
 602:	8f 83       	std	Y+7, r24	; 0x07
 604:	98 87       	std	Y+8, r25	; 0x08
			pwm_set_servo(joy.x);
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	9a 81       	ldd	r25, Y+2	; 0x02
 60a:	2a d0       	rcall	.+84     	; 0x660 <pwm_set_servo>
 60c:	0d c0       	rjmp	.+26     	; 0x628 <main+0xd8>
		}
		
		if(msg.id == MCP_BUTTON_PRESS){
 60e:	07 37       	cpi	r16, 0x77	; 119
 610:	11 05       	cpc	r17, r1
 612:	51 f4       	brne	.+20     	; 0x628 <main+0xd8>
			printf("Button pressed");
 614:	df 92       	push	r13
 616:	cf 92       	push	r12
 618:	d2 d0       	rcall	.+420    	; 0x7be <printf>
			if(msg.data[0]){
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	bb 20       	and	r11, r11
 620:	11 f0       	breq	.+4      	; 0x626 <main+0xd6>
				PORTA |= (1<<PA2); //stop relay
 622:	12 9a       	sbi	0x02, 2	; 2
 624:	01 c0       	rjmp	.+2      	; 0x628 <main+0xd8>
			}
			else{
				PORTA &= ~(1<<PA2); //activate relay
 626:	12 98       	cbi	0x02, 2	; 2
			}
		}
		
		update_game_score(&score);
 628:	ce 01       	movw	r24, r28
 62a:	44 96       	adiw	r24, 0x14	; 20
 62c:	b9 de       	rcall	.-654    	; 0x3a0 <update_game_score>
	}
 62e:	c7 cf       	rjmp	.-114    	; 0x5be <main+0x6e>

00000630 <pwm_init>:
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
 630:	6b 9a       	sbi	0x0d, 3	; 13
 632:	e0 e9       	ldi	r30, 0x90	; 144
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	8e 7b       	andi	r24, 0xBE	; 190
 63a:	80 83       	st	Z, r24
 63c:	80 81       	ld	r24, Z
 63e:	82 68       	ori	r24, 0x82	; 130
 640:	80 83       	st	Z, r24
 642:	e1 e9       	ldi	r30, 0x91	; 145
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	8d 61       	ori	r24, 0x1D	; 29
 64a:	80 83       	st	Z, r24
 64c:	80 81       	ld	r24, Z
 64e:	8d 7f       	andi	r24, 0xFD	; 253
 650:	80 83       	st	Z, r24
 652:	88 e3       	ldi	r24, 0x38	; 56
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	90 93 97 00 	sts	0x0097, r25
 65a:	80 93 96 00 	sts	0x0096, r24
 65e:	08 95       	ret

00000660 <pwm_set_servo>:
}

void pwm_set_servo(unsigned int val){
	val = (val*19)/255 + servo_min;
 660:	43 e1       	ldi	r20, 0x13	; 19
 662:	48 9f       	mul	r20, r24
 664:	90 01       	movw	r18, r0
 666:	49 9f       	mul	r20, r25
 668:	30 0d       	add	r19, r0
 66a:	11 24       	eor	r1, r1
 66c:	a1 e8       	ldi	r26, 0x81	; 129
 66e:	b0 e8       	ldi	r27, 0x80	; 128
 670:	4d d0       	rcall	.+154    	; 0x70c <__umulhisi3>
 672:	88 0f       	add	r24, r24
 674:	89 2f       	mov	r24, r25
 676:	88 1f       	adc	r24, r24
 678:	99 0b       	sbc	r25, r25
 67a:	91 95       	neg	r25
	if((val <= (servo_mid + 1)) && (val >= (servo_mid - 1))){
 67c:	9c 01       	movw	r18, r24
 67e:	2b 50       	subi	r18, 0x0B	; 11
 680:	31 09       	sbc	r19, r1
 682:	23 30       	cpi	r18, 0x03	; 3
 684:	31 05       	cpc	r19, r1
 686:	38 f4       	brcc	.+14     	; 0x696 <pwm_set_servo+0x36>
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
 688:	89 e1       	ldi	r24, 0x19	; 25
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	90 93 99 00 	sts	0x0099, r25
 690:	80 93 98 00 	sts	0x0098, r24
 694:	08 95       	ret
	val = (val*19)/255 + servo_min;
	if((val <= (servo_mid + 1)) && (val >= (servo_mid - 1))){
		pwm_set_value(servo_mid);
	}
	
	else if((val >= servo_min) && (val <= servo_max)){
 696:	89 31       	cpi	r24, 0x19	; 25
 698:	91 05       	cpc	r25, r1
 69a:	30 f4       	brcc	.+12     	; 0x6a8 <pwm_set_servo+0x48>
void pwm_set_value(unsigned int val){
	OCR3A = val;
}

void pwm_set_servo(unsigned int val){
	val = (val*19)/255 + servo_min;
 69c:	0d 96       	adiw	r24, 0x0d	; 13
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
 69e:	90 93 99 00 	sts	0x0099, r25
 6a2:	80 93 98 00 	sts	0x0098, r24
 6a6:	08 95       	ret
 6a8:	89 e1       	ldi	r24, 0x19	; 25
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	90 93 99 00 	sts	0x0099, r25
 6b0:	80 93 98 00 	sts	0x0098, r24
 6b4:	08 95       	ret

000006b6 <SPI_masterInit>:
#include <stdio.h>
#include <stdlib.h>

void SPI_masterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB2)|(1 << PB1)|(1 << PB0); //0 = SS, 3 = SI, 2 = SCK
 6b6:	87 e0       	ldi	r24, 0x07	; 7
 6b8:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PB3); //SO
 6ba:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 6bc:	81 e5       	ldi	r24, 0x51	; 81
 6be:	8c bd       	out	0x2c, r24	; 44
 6c0:	08 95       	ret

000006c2 <SPI_transmit>:
}
uint8_t SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
 6c2:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 6c4:	0d b4       	in	r0, 0x2d	; 45
 6c6:	07 fe       	sbrs	r0, 7
 6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <SPI_transmit+0x2>
	return SPDR;
 6ca:	8e b5       	in	r24, 0x2e	; 46
 6cc:	08 95       	ret

000006ce <USART_Init>:
	_delay_ms(100);
}
void USART_Init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 6ce:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 6d2:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 6d6:	e1 ec       	ldi	r30, 0xC1	; 193
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	88 61       	ori	r24, 0x18	; 24
 6de:	80 83       	st	Z, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C |= (3<<UCSZ00);
 6e0:	e2 ec       	ldi	r30, 0xC2	; 194
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	86 60       	ori	r24, 0x06	; 6
 6e8:	80 83       	st	Z, r24
 6ea:	08 95       	ret

000006ec <USART_Transmit>:
}
void USART_Transmit(unsigned char data){
	/*Wait for empty transmit buffer*/
	while( !(UCSR0A & (1<<UDRE0)) );
 6ec:	e0 ec       	ldi	r30, 0xC0	; 192
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	90 81       	ld	r25, Z
 6f2:	95 ff       	sbrs	r25, 5
 6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <USART_Transmit+0x4>
	
	/*Put data into buffer, sends the data*/
	UDR0 = data;
 6f6:	80 93 c6 00 	sts	0x00C6, r24
 6fa:	08 95       	ret

000006fc <USART_Receive>:
}
unsigned char USART_Receive(void){
	/*Wait for data to be received*/
	while( !(UCSR0A & (1<<RXC0)) );
 6fc:	e0 ec       	ldi	r30, 0xC0	; 192
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	88 23       	and	r24, r24
 704:	ec f7       	brge	.-6      	; 0x700 <USART_Receive+0x4>
	
	
	/*Get and return received data from buffer*/
	return UDR0;
 706:	80 91 c6 00 	lds	r24, 0x00C6
 70a:	08 95       	ret

0000070c <__umulhisi3>:
 70c:	a2 9f       	mul	r26, r18
 70e:	b0 01       	movw	r22, r0
 710:	b3 9f       	mul	r27, r19
 712:	c0 01       	movw	r24, r0
 714:	a3 9f       	mul	r26, r19
 716:	70 0d       	add	r23, r0
 718:	81 1d       	adc	r24, r1
 71a:	11 24       	eor	r1, r1
 71c:	91 1d       	adc	r25, r1
 71e:	b2 9f       	mul	r27, r18
 720:	70 0d       	add	r23, r0
 722:	81 1d       	adc	r24, r1
 724:	11 24       	eor	r1, r1
 726:	91 1d       	adc	r25, r1
 728:	08 95       	ret

0000072a <fdevopen>:
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	ec 01       	movw	r28, r24
 734:	8b 01       	movw	r16, r22
 736:	00 97       	sbiw	r24, 0x00	; 0
 738:	31 f4       	brne	.+12     	; 0x746 <fdevopen+0x1c>
 73a:	61 15       	cp	r22, r1
 73c:	71 05       	cpc	r23, r1
 73e:	19 f4       	brne	.+6      	; 0x746 <fdevopen+0x1c>
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	37 c0       	rjmp	.+110    	; 0x7b4 <fdevopen+0x8a>
 746:	6e e0       	ldi	r22, 0x0E	; 14
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	63 d2       	rcall	.+1222   	; 0xc16 <calloc>
 750:	fc 01       	movw	r30, r24
 752:	00 97       	sbiw	r24, 0x00	; 0
 754:	a9 f3       	breq	.-22     	; 0x740 <fdevopen+0x16>
 756:	80 e8       	ldi	r24, 0x80	; 128
 758:	83 83       	std	Z+3, r24	; 0x03
 75a:	01 15       	cp	r16, r1
 75c:	11 05       	cpc	r17, r1
 75e:	71 f0       	breq	.+28     	; 0x77c <fdevopen+0x52>
 760:	13 87       	std	Z+11, r17	; 0x0b
 762:	02 87       	std	Z+10, r16	; 0x0a
 764:	81 e8       	ldi	r24, 0x81	; 129
 766:	83 83       	std	Z+3, r24	; 0x03
 768:	80 91 90 02 	lds	r24, 0x0290
 76c:	90 91 91 02 	lds	r25, 0x0291
 770:	89 2b       	or	r24, r25
 772:	21 f4       	brne	.+8      	; 0x77c <fdevopen+0x52>
 774:	f0 93 91 02 	sts	0x0291, r31
 778:	e0 93 90 02 	sts	0x0290, r30
 77c:	20 97       	sbiw	r28, 0x00	; 0
 77e:	c9 f0       	breq	.+50     	; 0x7b2 <fdevopen+0x88>
 780:	d1 87       	std	Z+9, r29	; 0x09
 782:	c0 87       	std	Z+8, r28	; 0x08
 784:	83 81       	ldd	r24, Z+3	; 0x03
 786:	82 60       	ori	r24, 0x02	; 2
 788:	83 83       	std	Z+3, r24	; 0x03
 78a:	80 91 92 02 	lds	r24, 0x0292
 78e:	90 91 93 02 	lds	r25, 0x0293
 792:	89 2b       	or	r24, r25
 794:	71 f4       	brne	.+28     	; 0x7b2 <fdevopen+0x88>
 796:	f0 93 93 02 	sts	0x0293, r31
 79a:	e0 93 92 02 	sts	0x0292, r30
 79e:	80 91 94 02 	lds	r24, 0x0294
 7a2:	90 91 95 02 	lds	r25, 0x0295
 7a6:	89 2b       	or	r24, r25
 7a8:	21 f4       	brne	.+8      	; 0x7b2 <fdevopen+0x88>
 7aa:	f0 93 95 02 	sts	0x0295, r31
 7ae:	e0 93 94 02 	sts	0x0294, r30
 7b2:	cf 01       	movw	r24, r30
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	08 95       	ret

000007be <printf>:
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	cd b7       	in	r28, 0x3d	; 61
 7c4:	de b7       	in	r29, 0x3e	; 62
 7c6:	fe 01       	movw	r30, r28
 7c8:	36 96       	adiw	r30, 0x06	; 6
 7ca:	61 91       	ld	r22, Z+
 7cc:	71 91       	ld	r23, Z+
 7ce:	af 01       	movw	r20, r30
 7d0:	80 91 92 02 	lds	r24, 0x0292
 7d4:	90 91 93 02 	lds	r25, 0x0293
 7d8:	30 d0       	rcall	.+96     	; 0x83a <vfprintf>
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	08 95       	ret

000007e0 <puts>:
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	e0 91 92 02 	lds	r30, 0x0292
 7ec:	f0 91 93 02 	lds	r31, 0x0293
 7f0:	23 81       	ldd	r18, Z+3	; 0x03
 7f2:	21 ff       	sbrs	r18, 1
 7f4:	1b c0       	rjmp	.+54     	; 0x82c <puts+0x4c>
 7f6:	ec 01       	movw	r28, r24
 7f8:	00 e0       	ldi	r16, 0x00	; 0
 7fa:	10 e0       	ldi	r17, 0x00	; 0
 7fc:	89 91       	ld	r24, Y+
 7fe:	60 91 92 02 	lds	r22, 0x0292
 802:	70 91 93 02 	lds	r23, 0x0293
 806:	db 01       	movw	r26, r22
 808:	18 96       	adiw	r26, 0x08	; 8
 80a:	ed 91       	ld	r30, X+
 80c:	fc 91       	ld	r31, X
 80e:	19 97       	sbiw	r26, 0x09	; 9
 810:	88 23       	and	r24, r24
 812:	31 f0       	breq	.+12     	; 0x820 <puts+0x40>
 814:	19 95       	eicall
 816:	89 2b       	or	r24, r25
 818:	89 f3       	breq	.-30     	; 0x7fc <puts+0x1c>
 81a:	0f ef       	ldi	r16, 0xFF	; 255
 81c:	1f ef       	ldi	r17, 0xFF	; 255
 81e:	ee cf       	rjmp	.-36     	; 0x7fc <puts+0x1c>
 820:	8a e0       	ldi	r24, 0x0A	; 10
 822:	19 95       	eicall
 824:	89 2b       	or	r24, r25
 826:	11 f4       	brne	.+4      	; 0x82c <puts+0x4c>
 828:	c8 01       	movw	r24, r16
 82a:	02 c0       	rjmp	.+4      	; 0x830 <puts+0x50>
 82c:	8f ef       	ldi	r24, 0xFF	; 255
 82e:	9f ef       	ldi	r25, 0xFF	; 255
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	08 95       	ret

0000083a <vfprintf>:
 83a:	2f 92       	push	r2
 83c:	3f 92       	push	r3
 83e:	4f 92       	push	r4
 840:	5f 92       	push	r5
 842:	6f 92       	push	r6
 844:	7f 92       	push	r7
 846:	8f 92       	push	r8
 848:	9f 92       	push	r9
 84a:	af 92       	push	r10
 84c:	bf 92       	push	r11
 84e:	cf 92       	push	r12
 850:	df 92       	push	r13
 852:	ef 92       	push	r14
 854:	ff 92       	push	r15
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
 862:	2c 97       	sbiw	r28, 0x0c	; 12
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	f8 94       	cli
 868:	de bf       	out	0x3e, r29	; 62
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	cd bf       	out	0x3d, r28	; 61
 86e:	7c 01       	movw	r14, r24
 870:	6b 01       	movw	r12, r22
 872:	8a 01       	movw	r16, r20
 874:	fc 01       	movw	r30, r24
 876:	17 82       	std	Z+7, r1	; 0x07
 878:	16 82       	std	Z+6, r1	; 0x06
 87a:	83 81       	ldd	r24, Z+3	; 0x03
 87c:	81 ff       	sbrs	r24, 1
 87e:	b0 c1       	rjmp	.+864    	; 0xbe0 <vfprintf+0x3a6>
 880:	ce 01       	movw	r24, r28
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	4c 01       	movw	r8, r24
 886:	f7 01       	movw	r30, r14
 888:	93 81       	ldd	r25, Z+3	; 0x03
 88a:	f6 01       	movw	r30, r12
 88c:	93 fd       	sbrc	r25, 3
 88e:	85 91       	lpm	r24, Z+
 890:	93 ff       	sbrs	r25, 3
 892:	81 91       	ld	r24, Z+
 894:	6f 01       	movw	r12, r30
 896:	88 23       	and	r24, r24
 898:	09 f4       	brne	.+2      	; 0x89c <vfprintf+0x62>
 89a:	9e c1       	rjmp	.+828    	; 0xbd8 <vfprintf+0x39e>
 89c:	85 32       	cpi	r24, 0x25	; 37
 89e:	39 f4       	brne	.+14     	; 0x8ae <vfprintf+0x74>
 8a0:	93 fd       	sbrc	r25, 3
 8a2:	85 91       	lpm	r24, Z+
 8a4:	93 ff       	sbrs	r25, 3
 8a6:	81 91       	ld	r24, Z+
 8a8:	6f 01       	movw	r12, r30
 8aa:	85 32       	cpi	r24, 0x25	; 37
 8ac:	21 f4       	brne	.+8      	; 0x8b6 <vfprintf+0x7c>
 8ae:	b7 01       	movw	r22, r14
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0f d3       	rcall	.+1566   	; 0xed2 <fputc>
 8b4:	e8 cf       	rjmp	.-48     	; 0x886 <vfprintf+0x4c>
 8b6:	51 2c       	mov	r5, r1
 8b8:	31 2c       	mov	r3, r1
 8ba:	20 e0       	ldi	r18, 0x00	; 0
 8bc:	20 32       	cpi	r18, 0x20	; 32
 8be:	a0 f4       	brcc	.+40     	; 0x8e8 <vfprintf+0xae>
 8c0:	8b 32       	cpi	r24, 0x2B	; 43
 8c2:	69 f0       	breq	.+26     	; 0x8de <vfprintf+0xa4>
 8c4:	30 f4       	brcc	.+12     	; 0x8d2 <vfprintf+0x98>
 8c6:	80 32       	cpi	r24, 0x20	; 32
 8c8:	59 f0       	breq	.+22     	; 0x8e0 <vfprintf+0xa6>
 8ca:	83 32       	cpi	r24, 0x23	; 35
 8cc:	69 f4       	brne	.+26     	; 0x8e8 <vfprintf+0xae>
 8ce:	20 61       	ori	r18, 0x10	; 16
 8d0:	2c c0       	rjmp	.+88     	; 0x92a <vfprintf+0xf0>
 8d2:	8d 32       	cpi	r24, 0x2D	; 45
 8d4:	39 f0       	breq	.+14     	; 0x8e4 <vfprintf+0xaa>
 8d6:	80 33       	cpi	r24, 0x30	; 48
 8d8:	39 f4       	brne	.+14     	; 0x8e8 <vfprintf+0xae>
 8da:	21 60       	ori	r18, 0x01	; 1
 8dc:	26 c0       	rjmp	.+76     	; 0x92a <vfprintf+0xf0>
 8de:	22 60       	ori	r18, 0x02	; 2
 8e0:	24 60       	ori	r18, 0x04	; 4
 8e2:	23 c0       	rjmp	.+70     	; 0x92a <vfprintf+0xf0>
 8e4:	28 60       	ori	r18, 0x08	; 8
 8e6:	21 c0       	rjmp	.+66     	; 0x92a <vfprintf+0xf0>
 8e8:	27 fd       	sbrc	r18, 7
 8ea:	27 c0       	rjmp	.+78     	; 0x93a <vfprintf+0x100>
 8ec:	30 ed       	ldi	r19, 0xD0	; 208
 8ee:	38 0f       	add	r19, r24
 8f0:	3a 30       	cpi	r19, 0x0A	; 10
 8f2:	78 f4       	brcc	.+30     	; 0x912 <vfprintf+0xd8>
 8f4:	26 ff       	sbrs	r18, 6
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <vfprintf+0xca>
 8f8:	fa e0       	ldi	r31, 0x0A	; 10
 8fa:	5f 9e       	mul	r5, r31
 8fc:	30 0d       	add	r19, r0
 8fe:	11 24       	eor	r1, r1
 900:	53 2e       	mov	r5, r19
 902:	13 c0       	rjmp	.+38     	; 0x92a <vfprintf+0xf0>
 904:	8a e0       	ldi	r24, 0x0A	; 10
 906:	38 9e       	mul	r3, r24
 908:	30 0d       	add	r19, r0
 90a:	11 24       	eor	r1, r1
 90c:	33 2e       	mov	r3, r19
 90e:	20 62       	ori	r18, 0x20	; 32
 910:	0c c0       	rjmp	.+24     	; 0x92a <vfprintf+0xf0>
 912:	8e 32       	cpi	r24, 0x2E	; 46
 914:	21 f4       	brne	.+8      	; 0x91e <vfprintf+0xe4>
 916:	26 fd       	sbrc	r18, 6
 918:	5f c1       	rjmp	.+702    	; 0xbd8 <vfprintf+0x39e>
 91a:	20 64       	ori	r18, 0x40	; 64
 91c:	06 c0       	rjmp	.+12     	; 0x92a <vfprintf+0xf0>
 91e:	8c 36       	cpi	r24, 0x6C	; 108
 920:	11 f4       	brne	.+4      	; 0x926 <vfprintf+0xec>
 922:	20 68       	ori	r18, 0x80	; 128
 924:	02 c0       	rjmp	.+4      	; 0x92a <vfprintf+0xf0>
 926:	88 36       	cpi	r24, 0x68	; 104
 928:	41 f4       	brne	.+16     	; 0x93a <vfprintf+0x100>
 92a:	f6 01       	movw	r30, r12
 92c:	93 fd       	sbrc	r25, 3
 92e:	85 91       	lpm	r24, Z+
 930:	93 ff       	sbrs	r25, 3
 932:	81 91       	ld	r24, Z+
 934:	6f 01       	movw	r12, r30
 936:	81 11       	cpse	r24, r1
 938:	c1 cf       	rjmp	.-126    	; 0x8bc <vfprintf+0x82>
 93a:	98 2f       	mov	r25, r24
 93c:	9f 7d       	andi	r25, 0xDF	; 223
 93e:	95 54       	subi	r25, 0x45	; 69
 940:	93 30       	cpi	r25, 0x03	; 3
 942:	28 f4       	brcc	.+10     	; 0x94e <vfprintf+0x114>
 944:	0c 5f       	subi	r16, 0xFC	; 252
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	ff e3       	ldi	r31, 0x3F	; 63
 94a:	f9 83       	std	Y+1, r31	; 0x01
 94c:	0d c0       	rjmp	.+26     	; 0x968 <vfprintf+0x12e>
 94e:	83 36       	cpi	r24, 0x63	; 99
 950:	31 f0       	breq	.+12     	; 0x95e <vfprintf+0x124>
 952:	83 37       	cpi	r24, 0x73	; 115
 954:	71 f0       	breq	.+28     	; 0x972 <vfprintf+0x138>
 956:	83 35       	cpi	r24, 0x53	; 83
 958:	09 f0       	breq	.+2      	; 0x95c <vfprintf+0x122>
 95a:	57 c0       	rjmp	.+174    	; 0xa0a <vfprintf+0x1d0>
 95c:	21 c0       	rjmp	.+66     	; 0x9a0 <vfprintf+0x166>
 95e:	f8 01       	movw	r30, r16
 960:	80 81       	ld	r24, Z
 962:	89 83       	std	Y+1, r24	; 0x01
 964:	0e 5f       	subi	r16, 0xFE	; 254
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	44 24       	eor	r4, r4
 96a:	43 94       	inc	r4
 96c:	51 2c       	mov	r5, r1
 96e:	54 01       	movw	r10, r8
 970:	14 c0       	rjmp	.+40     	; 0x99a <vfprintf+0x160>
 972:	38 01       	movw	r6, r16
 974:	f2 e0       	ldi	r31, 0x02	; 2
 976:	6f 0e       	add	r6, r31
 978:	71 1c       	adc	r7, r1
 97a:	f8 01       	movw	r30, r16
 97c:	a0 80       	ld	r10, Z
 97e:	b1 80       	ldd	r11, Z+1	; 0x01
 980:	26 ff       	sbrs	r18, 6
 982:	03 c0       	rjmp	.+6      	; 0x98a <vfprintf+0x150>
 984:	65 2d       	mov	r22, r5
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0x154>
 98a:	6f ef       	ldi	r22, 0xFF	; 255
 98c:	7f ef       	ldi	r23, 0xFF	; 255
 98e:	c5 01       	movw	r24, r10
 990:	2c 87       	std	Y+12, r18	; 0x0c
 992:	94 d2       	rcall	.+1320   	; 0xebc <strnlen>
 994:	2c 01       	movw	r4, r24
 996:	83 01       	movw	r16, r6
 998:	2c 85       	ldd	r18, Y+12	; 0x0c
 99a:	2f 77       	andi	r18, 0x7F	; 127
 99c:	22 2e       	mov	r2, r18
 99e:	16 c0       	rjmp	.+44     	; 0x9cc <vfprintf+0x192>
 9a0:	38 01       	movw	r6, r16
 9a2:	f2 e0       	ldi	r31, 0x02	; 2
 9a4:	6f 0e       	add	r6, r31
 9a6:	71 1c       	adc	r7, r1
 9a8:	f8 01       	movw	r30, r16
 9aa:	a0 80       	ld	r10, Z
 9ac:	b1 80       	ldd	r11, Z+1	; 0x01
 9ae:	26 ff       	sbrs	r18, 6
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <vfprintf+0x17e>
 9b2:	65 2d       	mov	r22, r5
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0x182>
 9b8:	6f ef       	ldi	r22, 0xFF	; 255
 9ba:	7f ef       	ldi	r23, 0xFF	; 255
 9bc:	c5 01       	movw	r24, r10
 9be:	2c 87       	std	Y+12, r18	; 0x0c
 9c0:	6b d2       	rcall	.+1238   	; 0xe98 <strnlen_P>
 9c2:	2c 01       	movw	r4, r24
 9c4:	2c 85       	ldd	r18, Y+12	; 0x0c
 9c6:	20 68       	ori	r18, 0x80	; 128
 9c8:	22 2e       	mov	r2, r18
 9ca:	83 01       	movw	r16, r6
 9cc:	23 fc       	sbrc	r2, 3
 9ce:	19 c0       	rjmp	.+50     	; 0xa02 <vfprintf+0x1c8>
 9d0:	83 2d       	mov	r24, r3
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	48 16       	cp	r4, r24
 9d6:	59 06       	cpc	r5, r25
 9d8:	a0 f4       	brcc	.+40     	; 0xa02 <vfprintf+0x1c8>
 9da:	b7 01       	movw	r22, r14
 9dc:	80 e2       	ldi	r24, 0x20	; 32
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	78 d2       	rcall	.+1264   	; 0xed2 <fputc>
 9e2:	3a 94       	dec	r3
 9e4:	f5 cf       	rjmp	.-22     	; 0x9d0 <vfprintf+0x196>
 9e6:	f5 01       	movw	r30, r10
 9e8:	27 fc       	sbrc	r2, 7
 9ea:	85 91       	lpm	r24, Z+
 9ec:	27 fe       	sbrs	r2, 7
 9ee:	81 91       	ld	r24, Z+
 9f0:	5f 01       	movw	r10, r30
 9f2:	b7 01       	movw	r22, r14
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	6d d2       	rcall	.+1242   	; 0xed2 <fputc>
 9f8:	31 10       	cpse	r3, r1
 9fa:	3a 94       	dec	r3
 9fc:	f1 e0       	ldi	r31, 0x01	; 1
 9fe:	4f 1a       	sub	r4, r31
 a00:	51 08       	sbc	r5, r1
 a02:	41 14       	cp	r4, r1
 a04:	51 04       	cpc	r5, r1
 a06:	79 f7       	brne	.-34     	; 0x9e6 <vfprintf+0x1ac>
 a08:	de c0       	rjmp	.+444    	; 0xbc6 <vfprintf+0x38c>
 a0a:	84 36       	cpi	r24, 0x64	; 100
 a0c:	11 f0       	breq	.+4      	; 0xa12 <vfprintf+0x1d8>
 a0e:	89 36       	cpi	r24, 0x69	; 105
 a10:	31 f5       	brne	.+76     	; 0xa5e <vfprintf+0x224>
 a12:	f8 01       	movw	r30, r16
 a14:	27 ff       	sbrs	r18, 7
 a16:	07 c0       	rjmp	.+14     	; 0xa26 <vfprintf+0x1ec>
 a18:	60 81       	ld	r22, Z
 a1a:	71 81       	ldd	r23, Z+1	; 0x01
 a1c:	82 81       	ldd	r24, Z+2	; 0x02
 a1e:	93 81       	ldd	r25, Z+3	; 0x03
 a20:	0c 5f       	subi	r16, 0xFC	; 252
 a22:	1f 4f       	sbci	r17, 0xFF	; 255
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <vfprintf+0x1fc>
 a26:	60 81       	ld	r22, Z
 a28:	71 81       	ldd	r23, Z+1	; 0x01
 a2a:	88 27       	eor	r24, r24
 a2c:	77 fd       	sbrc	r23, 7
 a2e:	80 95       	com	r24
 a30:	98 2f       	mov	r25, r24
 a32:	0e 5f       	subi	r16, 0xFE	; 254
 a34:	1f 4f       	sbci	r17, 0xFF	; 255
 a36:	2f 76       	andi	r18, 0x6F	; 111
 a38:	b2 2e       	mov	r11, r18
 a3a:	97 ff       	sbrs	r25, 7
 a3c:	09 c0       	rjmp	.+18     	; 0xa50 <vfprintf+0x216>
 a3e:	90 95       	com	r25
 a40:	80 95       	com	r24
 a42:	70 95       	com	r23
 a44:	61 95       	neg	r22
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	20 68       	ori	r18, 0x80	; 128
 a4e:	b2 2e       	mov	r11, r18
 a50:	2a e0       	ldi	r18, 0x0A	; 10
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	a4 01       	movw	r20, r8
 a56:	6f d2       	rcall	.+1246   	; 0xf36 <__ultoa_invert>
 a58:	a8 2e       	mov	r10, r24
 a5a:	a8 18       	sub	r10, r8
 a5c:	43 c0       	rjmp	.+134    	; 0xae4 <vfprintf+0x2aa>
 a5e:	85 37       	cpi	r24, 0x75	; 117
 a60:	29 f4       	brne	.+10     	; 0xa6c <vfprintf+0x232>
 a62:	2f 7e       	andi	r18, 0xEF	; 239
 a64:	b2 2e       	mov	r11, r18
 a66:	2a e0       	ldi	r18, 0x0A	; 10
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	25 c0       	rjmp	.+74     	; 0xab6 <vfprintf+0x27c>
 a6c:	f2 2f       	mov	r31, r18
 a6e:	f9 7f       	andi	r31, 0xF9	; 249
 a70:	bf 2e       	mov	r11, r31
 a72:	8f 36       	cpi	r24, 0x6F	; 111
 a74:	c1 f0       	breq	.+48     	; 0xaa6 <vfprintf+0x26c>
 a76:	18 f4       	brcc	.+6      	; 0xa7e <vfprintf+0x244>
 a78:	88 35       	cpi	r24, 0x58	; 88
 a7a:	79 f0       	breq	.+30     	; 0xa9a <vfprintf+0x260>
 a7c:	ad c0       	rjmp	.+346    	; 0xbd8 <vfprintf+0x39e>
 a7e:	80 37       	cpi	r24, 0x70	; 112
 a80:	19 f0       	breq	.+6      	; 0xa88 <vfprintf+0x24e>
 a82:	88 37       	cpi	r24, 0x78	; 120
 a84:	21 f0       	breq	.+8      	; 0xa8e <vfprintf+0x254>
 a86:	a8 c0       	rjmp	.+336    	; 0xbd8 <vfprintf+0x39e>
 a88:	2f 2f       	mov	r18, r31
 a8a:	20 61       	ori	r18, 0x10	; 16
 a8c:	b2 2e       	mov	r11, r18
 a8e:	b4 fe       	sbrs	r11, 4
 a90:	0d c0       	rjmp	.+26     	; 0xaac <vfprintf+0x272>
 a92:	8b 2d       	mov	r24, r11
 a94:	84 60       	ori	r24, 0x04	; 4
 a96:	b8 2e       	mov	r11, r24
 a98:	09 c0       	rjmp	.+18     	; 0xaac <vfprintf+0x272>
 a9a:	24 ff       	sbrs	r18, 4
 a9c:	0a c0       	rjmp	.+20     	; 0xab2 <vfprintf+0x278>
 a9e:	9f 2f       	mov	r25, r31
 aa0:	96 60       	ori	r25, 0x06	; 6
 aa2:	b9 2e       	mov	r11, r25
 aa4:	06 c0       	rjmp	.+12     	; 0xab2 <vfprintf+0x278>
 aa6:	28 e0       	ldi	r18, 0x08	; 8
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	05 c0       	rjmp	.+10     	; 0xab6 <vfprintf+0x27c>
 aac:	20 e1       	ldi	r18, 0x10	; 16
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <vfprintf+0x27c>
 ab2:	20 e1       	ldi	r18, 0x10	; 16
 ab4:	32 e0       	ldi	r19, 0x02	; 2
 ab6:	f8 01       	movw	r30, r16
 ab8:	b7 fe       	sbrs	r11, 7
 aba:	07 c0       	rjmp	.+14     	; 0xaca <vfprintf+0x290>
 abc:	60 81       	ld	r22, Z
 abe:	71 81       	ldd	r23, Z+1	; 0x01
 ac0:	82 81       	ldd	r24, Z+2	; 0x02
 ac2:	93 81       	ldd	r25, Z+3	; 0x03
 ac4:	0c 5f       	subi	r16, 0xFC	; 252
 ac6:	1f 4f       	sbci	r17, 0xFF	; 255
 ac8:	06 c0       	rjmp	.+12     	; 0xad6 <vfprintf+0x29c>
 aca:	60 81       	ld	r22, Z
 acc:	71 81       	ldd	r23, Z+1	; 0x01
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 5f       	subi	r16, 0xFE	; 254
 ad4:	1f 4f       	sbci	r17, 0xFF	; 255
 ad6:	a4 01       	movw	r20, r8
 ad8:	2e d2       	rcall	.+1116   	; 0xf36 <__ultoa_invert>
 ada:	a8 2e       	mov	r10, r24
 adc:	a8 18       	sub	r10, r8
 ade:	fb 2d       	mov	r31, r11
 ae0:	ff 77       	andi	r31, 0x7F	; 127
 ae2:	bf 2e       	mov	r11, r31
 ae4:	b6 fe       	sbrs	r11, 6
 ae6:	0b c0       	rjmp	.+22     	; 0xafe <vfprintf+0x2c4>
 ae8:	2b 2d       	mov	r18, r11
 aea:	2e 7f       	andi	r18, 0xFE	; 254
 aec:	a5 14       	cp	r10, r5
 aee:	50 f4       	brcc	.+20     	; 0xb04 <vfprintf+0x2ca>
 af0:	b4 fe       	sbrs	r11, 4
 af2:	0a c0       	rjmp	.+20     	; 0xb08 <vfprintf+0x2ce>
 af4:	b2 fc       	sbrc	r11, 2
 af6:	08 c0       	rjmp	.+16     	; 0xb08 <vfprintf+0x2ce>
 af8:	2b 2d       	mov	r18, r11
 afa:	2e 7e       	andi	r18, 0xEE	; 238
 afc:	05 c0       	rjmp	.+10     	; 0xb08 <vfprintf+0x2ce>
 afe:	7a 2c       	mov	r7, r10
 b00:	2b 2d       	mov	r18, r11
 b02:	03 c0       	rjmp	.+6      	; 0xb0a <vfprintf+0x2d0>
 b04:	7a 2c       	mov	r7, r10
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <vfprintf+0x2d0>
 b08:	75 2c       	mov	r7, r5
 b0a:	24 ff       	sbrs	r18, 4
 b0c:	0d c0       	rjmp	.+26     	; 0xb28 <vfprintf+0x2ee>
 b0e:	fe 01       	movw	r30, r28
 b10:	ea 0d       	add	r30, r10
 b12:	f1 1d       	adc	r31, r1
 b14:	80 81       	ld	r24, Z
 b16:	80 33       	cpi	r24, 0x30	; 48
 b18:	11 f4       	brne	.+4      	; 0xb1e <vfprintf+0x2e4>
 b1a:	29 7e       	andi	r18, 0xE9	; 233
 b1c:	09 c0       	rjmp	.+18     	; 0xb30 <vfprintf+0x2f6>
 b1e:	22 ff       	sbrs	r18, 2
 b20:	06 c0       	rjmp	.+12     	; 0xb2e <vfprintf+0x2f4>
 b22:	73 94       	inc	r7
 b24:	73 94       	inc	r7
 b26:	04 c0       	rjmp	.+8      	; 0xb30 <vfprintf+0x2f6>
 b28:	82 2f       	mov	r24, r18
 b2a:	86 78       	andi	r24, 0x86	; 134
 b2c:	09 f0       	breq	.+2      	; 0xb30 <vfprintf+0x2f6>
 b2e:	73 94       	inc	r7
 b30:	23 fd       	sbrc	r18, 3
 b32:	12 c0       	rjmp	.+36     	; 0xb58 <vfprintf+0x31e>
 b34:	20 ff       	sbrs	r18, 0
 b36:	06 c0       	rjmp	.+12     	; 0xb44 <vfprintf+0x30a>
 b38:	5a 2c       	mov	r5, r10
 b3a:	73 14       	cp	r7, r3
 b3c:	18 f4       	brcc	.+6      	; 0xb44 <vfprintf+0x30a>
 b3e:	53 0c       	add	r5, r3
 b40:	57 18       	sub	r5, r7
 b42:	73 2c       	mov	r7, r3
 b44:	73 14       	cp	r7, r3
 b46:	60 f4       	brcc	.+24     	; 0xb60 <vfprintf+0x326>
 b48:	b7 01       	movw	r22, r14
 b4a:	80 e2       	ldi	r24, 0x20	; 32
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	2c 87       	std	Y+12, r18	; 0x0c
 b50:	c0 d1       	rcall	.+896    	; 0xed2 <fputc>
 b52:	73 94       	inc	r7
 b54:	2c 85       	ldd	r18, Y+12	; 0x0c
 b56:	f6 cf       	rjmp	.-20     	; 0xb44 <vfprintf+0x30a>
 b58:	73 14       	cp	r7, r3
 b5a:	10 f4       	brcc	.+4      	; 0xb60 <vfprintf+0x326>
 b5c:	37 18       	sub	r3, r7
 b5e:	01 c0       	rjmp	.+2      	; 0xb62 <vfprintf+0x328>
 b60:	31 2c       	mov	r3, r1
 b62:	24 ff       	sbrs	r18, 4
 b64:	11 c0       	rjmp	.+34     	; 0xb88 <vfprintf+0x34e>
 b66:	b7 01       	movw	r22, r14
 b68:	80 e3       	ldi	r24, 0x30	; 48
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	2c 87       	std	Y+12, r18	; 0x0c
 b6e:	b1 d1       	rcall	.+866    	; 0xed2 <fputc>
 b70:	2c 85       	ldd	r18, Y+12	; 0x0c
 b72:	22 ff       	sbrs	r18, 2
 b74:	16 c0       	rjmp	.+44     	; 0xba2 <vfprintf+0x368>
 b76:	21 ff       	sbrs	r18, 1
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x346>
 b7a:	88 e5       	ldi	r24, 0x58	; 88
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x34a>
 b80:	88 e7       	ldi	r24, 0x78	; 120
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	b7 01       	movw	r22, r14
 b86:	0c c0       	rjmp	.+24     	; 0xba0 <vfprintf+0x366>
 b88:	82 2f       	mov	r24, r18
 b8a:	86 78       	andi	r24, 0x86	; 134
 b8c:	51 f0       	breq	.+20     	; 0xba2 <vfprintf+0x368>
 b8e:	21 fd       	sbrc	r18, 1
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <vfprintf+0x35c>
 b92:	80 e2       	ldi	r24, 0x20	; 32
 b94:	01 c0       	rjmp	.+2      	; 0xb98 <vfprintf+0x35e>
 b96:	8b e2       	ldi	r24, 0x2B	; 43
 b98:	27 fd       	sbrc	r18, 7
 b9a:	8d e2       	ldi	r24, 0x2D	; 45
 b9c:	b7 01       	movw	r22, r14
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	98 d1       	rcall	.+816    	; 0xed2 <fputc>
 ba2:	a5 14       	cp	r10, r5
 ba4:	30 f4       	brcc	.+12     	; 0xbb2 <vfprintf+0x378>
 ba6:	b7 01       	movw	r22, r14
 ba8:	80 e3       	ldi	r24, 0x30	; 48
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	92 d1       	rcall	.+804    	; 0xed2 <fputc>
 bae:	5a 94       	dec	r5
 bb0:	f8 cf       	rjmp	.-16     	; 0xba2 <vfprintf+0x368>
 bb2:	aa 94       	dec	r10
 bb4:	f4 01       	movw	r30, r8
 bb6:	ea 0d       	add	r30, r10
 bb8:	f1 1d       	adc	r31, r1
 bba:	80 81       	ld	r24, Z
 bbc:	b7 01       	movw	r22, r14
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	88 d1       	rcall	.+784    	; 0xed2 <fputc>
 bc2:	a1 10       	cpse	r10, r1
 bc4:	f6 cf       	rjmp	.-20     	; 0xbb2 <vfprintf+0x378>
 bc6:	33 20       	and	r3, r3
 bc8:	09 f4       	brne	.+2      	; 0xbcc <vfprintf+0x392>
 bca:	5d ce       	rjmp	.-838    	; 0x886 <vfprintf+0x4c>
 bcc:	b7 01       	movw	r22, r14
 bce:	80 e2       	ldi	r24, 0x20	; 32
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	7f d1       	rcall	.+766    	; 0xed2 <fputc>
 bd4:	3a 94       	dec	r3
 bd6:	f7 cf       	rjmp	.-18     	; 0xbc6 <vfprintf+0x38c>
 bd8:	f7 01       	movw	r30, r14
 bda:	86 81       	ldd	r24, Z+6	; 0x06
 bdc:	97 81       	ldd	r25, Z+7	; 0x07
 bde:	02 c0       	rjmp	.+4      	; 0xbe4 <vfprintf+0x3aa>
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	9f ef       	ldi	r25, 0xFF	; 255
 be4:	2c 96       	adiw	r28, 0x0c	; 12
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	df 91       	pop	r29
 bf2:	cf 91       	pop	r28
 bf4:	1f 91       	pop	r17
 bf6:	0f 91       	pop	r16
 bf8:	ff 90       	pop	r15
 bfa:	ef 90       	pop	r14
 bfc:	df 90       	pop	r13
 bfe:	cf 90       	pop	r12
 c00:	bf 90       	pop	r11
 c02:	af 90       	pop	r10
 c04:	9f 90       	pop	r9
 c06:	8f 90       	pop	r8
 c08:	7f 90       	pop	r7
 c0a:	6f 90       	pop	r6
 c0c:	5f 90       	pop	r5
 c0e:	4f 90       	pop	r4
 c10:	3f 90       	pop	r3
 c12:	2f 90       	pop	r2
 c14:	08 95       	ret

00000c16 <calloc>:
 c16:	0f 93       	push	r16
 c18:	1f 93       	push	r17
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	86 9f       	mul	r24, r22
 c20:	80 01       	movw	r16, r0
 c22:	87 9f       	mul	r24, r23
 c24:	10 0d       	add	r17, r0
 c26:	96 9f       	mul	r25, r22
 c28:	10 0d       	add	r17, r0
 c2a:	11 24       	eor	r1, r1
 c2c:	c8 01       	movw	r24, r16
 c2e:	0d d0       	rcall	.+26     	; 0xc4a <malloc>
 c30:	ec 01       	movw	r28, r24
 c32:	00 97       	sbiw	r24, 0x00	; 0
 c34:	21 f0       	breq	.+8      	; 0xc3e <calloc+0x28>
 c36:	a8 01       	movw	r20, r16
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	70 e0       	ldi	r23, 0x00	; 0
 c3c:	38 d1       	rcall	.+624    	; 0xeae <memset>
 c3e:	ce 01       	movw	r24, r28
 c40:	df 91       	pop	r29
 c42:	cf 91       	pop	r28
 c44:	1f 91       	pop	r17
 c46:	0f 91       	pop	r16
 c48:	08 95       	ret

00000c4a <malloc>:
 c4a:	cf 93       	push	r28
 c4c:	df 93       	push	r29
 c4e:	82 30       	cpi	r24, 0x02	; 2
 c50:	91 05       	cpc	r25, r1
 c52:	10 f4       	brcc	.+4      	; 0xc58 <malloc+0xe>
 c54:	82 e0       	ldi	r24, 0x02	; 2
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	e0 91 98 02 	lds	r30, 0x0298
 c5c:	f0 91 99 02 	lds	r31, 0x0299
 c60:	20 e0       	ldi	r18, 0x00	; 0
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	a0 e0       	ldi	r26, 0x00	; 0
 c66:	b0 e0       	ldi	r27, 0x00	; 0
 c68:	30 97       	sbiw	r30, 0x00	; 0
 c6a:	39 f1       	breq	.+78     	; 0xcba <malloc+0x70>
 c6c:	40 81       	ld	r20, Z
 c6e:	51 81       	ldd	r21, Z+1	; 0x01
 c70:	48 17       	cp	r20, r24
 c72:	59 07       	cpc	r21, r25
 c74:	b8 f0       	brcs	.+46     	; 0xca4 <malloc+0x5a>
 c76:	48 17       	cp	r20, r24
 c78:	59 07       	cpc	r21, r25
 c7a:	71 f4       	brne	.+28     	; 0xc98 <malloc+0x4e>
 c7c:	82 81       	ldd	r24, Z+2	; 0x02
 c7e:	93 81       	ldd	r25, Z+3	; 0x03
 c80:	10 97       	sbiw	r26, 0x00	; 0
 c82:	29 f0       	breq	.+10     	; 0xc8e <malloc+0x44>
 c84:	13 96       	adiw	r26, 0x03	; 3
 c86:	9c 93       	st	X, r25
 c88:	8e 93       	st	-X, r24
 c8a:	12 97       	sbiw	r26, 0x02	; 2
 c8c:	2c c0       	rjmp	.+88     	; 0xce6 <malloc+0x9c>
 c8e:	90 93 99 02 	sts	0x0299, r25
 c92:	80 93 98 02 	sts	0x0298, r24
 c96:	27 c0       	rjmp	.+78     	; 0xce6 <malloc+0x9c>
 c98:	21 15       	cp	r18, r1
 c9a:	31 05       	cpc	r19, r1
 c9c:	31 f0       	breq	.+12     	; 0xcaa <malloc+0x60>
 c9e:	42 17       	cp	r20, r18
 ca0:	53 07       	cpc	r21, r19
 ca2:	18 f0       	brcs	.+6      	; 0xcaa <malloc+0x60>
 ca4:	a9 01       	movw	r20, r18
 ca6:	db 01       	movw	r26, r22
 ca8:	01 c0       	rjmp	.+2      	; 0xcac <malloc+0x62>
 caa:	ef 01       	movw	r28, r30
 cac:	9a 01       	movw	r18, r20
 cae:	bd 01       	movw	r22, r26
 cb0:	df 01       	movw	r26, r30
 cb2:	02 80       	ldd	r0, Z+2	; 0x02
 cb4:	f3 81       	ldd	r31, Z+3	; 0x03
 cb6:	e0 2d       	mov	r30, r0
 cb8:	d7 cf       	rjmp	.-82     	; 0xc68 <malloc+0x1e>
 cba:	21 15       	cp	r18, r1
 cbc:	31 05       	cpc	r19, r1
 cbe:	f9 f0       	breq	.+62     	; 0xcfe <malloc+0xb4>
 cc0:	28 1b       	sub	r18, r24
 cc2:	39 0b       	sbc	r19, r25
 cc4:	24 30       	cpi	r18, 0x04	; 4
 cc6:	31 05       	cpc	r19, r1
 cc8:	80 f4       	brcc	.+32     	; 0xcea <malloc+0xa0>
 cca:	8a 81       	ldd	r24, Y+2	; 0x02
 ccc:	9b 81       	ldd	r25, Y+3	; 0x03
 cce:	61 15       	cp	r22, r1
 cd0:	71 05       	cpc	r23, r1
 cd2:	21 f0       	breq	.+8      	; 0xcdc <malloc+0x92>
 cd4:	fb 01       	movw	r30, r22
 cd6:	93 83       	std	Z+3, r25	; 0x03
 cd8:	82 83       	std	Z+2, r24	; 0x02
 cda:	04 c0       	rjmp	.+8      	; 0xce4 <malloc+0x9a>
 cdc:	90 93 99 02 	sts	0x0299, r25
 ce0:	80 93 98 02 	sts	0x0298, r24
 ce4:	fe 01       	movw	r30, r28
 ce6:	32 96       	adiw	r30, 0x02	; 2
 ce8:	44 c0       	rjmp	.+136    	; 0xd72 <malloc+0x128>
 cea:	fe 01       	movw	r30, r28
 cec:	e2 0f       	add	r30, r18
 cee:	f3 1f       	adc	r31, r19
 cf0:	81 93       	st	Z+, r24
 cf2:	91 93       	st	Z+, r25
 cf4:	22 50       	subi	r18, 0x02	; 2
 cf6:	31 09       	sbc	r19, r1
 cf8:	39 83       	std	Y+1, r19	; 0x01
 cfa:	28 83       	st	Y, r18
 cfc:	3a c0       	rjmp	.+116    	; 0xd72 <malloc+0x128>
 cfe:	20 91 96 02 	lds	r18, 0x0296
 d02:	30 91 97 02 	lds	r19, 0x0297
 d06:	23 2b       	or	r18, r19
 d08:	41 f4       	brne	.+16     	; 0xd1a <malloc+0xd0>
 d0a:	20 91 02 02 	lds	r18, 0x0202
 d0e:	30 91 03 02 	lds	r19, 0x0203
 d12:	30 93 97 02 	sts	0x0297, r19
 d16:	20 93 96 02 	sts	0x0296, r18
 d1a:	20 91 00 02 	lds	r18, 0x0200
 d1e:	30 91 01 02 	lds	r19, 0x0201
 d22:	21 15       	cp	r18, r1
 d24:	31 05       	cpc	r19, r1
 d26:	41 f4       	brne	.+16     	; 0xd38 <malloc+0xee>
 d28:	2d b7       	in	r18, 0x3d	; 61
 d2a:	3e b7       	in	r19, 0x3e	; 62
 d2c:	40 91 04 02 	lds	r20, 0x0204
 d30:	50 91 05 02 	lds	r21, 0x0205
 d34:	24 1b       	sub	r18, r20
 d36:	35 0b       	sbc	r19, r21
 d38:	e0 91 96 02 	lds	r30, 0x0296
 d3c:	f0 91 97 02 	lds	r31, 0x0297
 d40:	e2 17       	cp	r30, r18
 d42:	f3 07       	cpc	r31, r19
 d44:	a0 f4       	brcc	.+40     	; 0xd6e <malloc+0x124>
 d46:	2e 1b       	sub	r18, r30
 d48:	3f 0b       	sbc	r19, r31
 d4a:	28 17       	cp	r18, r24
 d4c:	39 07       	cpc	r19, r25
 d4e:	78 f0       	brcs	.+30     	; 0xd6e <malloc+0x124>
 d50:	ac 01       	movw	r20, r24
 d52:	4e 5f       	subi	r20, 0xFE	; 254
 d54:	5f 4f       	sbci	r21, 0xFF	; 255
 d56:	24 17       	cp	r18, r20
 d58:	35 07       	cpc	r19, r21
 d5a:	48 f0       	brcs	.+18     	; 0xd6e <malloc+0x124>
 d5c:	4e 0f       	add	r20, r30
 d5e:	5f 1f       	adc	r21, r31
 d60:	50 93 97 02 	sts	0x0297, r21
 d64:	40 93 96 02 	sts	0x0296, r20
 d68:	81 93       	st	Z+, r24
 d6a:	91 93       	st	Z+, r25
 d6c:	02 c0       	rjmp	.+4      	; 0xd72 <malloc+0x128>
 d6e:	e0 e0       	ldi	r30, 0x00	; 0
 d70:	f0 e0       	ldi	r31, 0x00	; 0
 d72:	cf 01       	movw	r24, r30
 d74:	df 91       	pop	r29
 d76:	cf 91       	pop	r28
 d78:	08 95       	ret

00000d7a <free>:
 d7a:	cf 93       	push	r28
 d7c:	df 93       	push	r29
 d7e:	00 97       	sbiw	r24, 0x00	; 0
 d80:	09 f4       	brne	.+2      	; 0xd84 <free+0xa>
 d82:	87 c0       	rjmp	.+270    	; 0xe92 <free+0x118>
 d84:	fc 01       	movw	r30, r24
 d86:	32 97       	sbiw	r30, 0x02	; 2
 d88:	13 82       	std	Z+3, r1	; 0x03
 d8a:	12 82       	std	Z+2, r1	; 0x02
 d8c:	c0 91 98 02 	lds	r28, 0x0298
 d90:	d0 91 99 02 	lds	r29, 0x0299
 d94:	20 97       	sbiw	r28, 0x00	; 0
 d96:	81 f4       	brne	.+32     	; 0xdb8 <free+0x3e>
 d98:	20 81       	ld	r18, Z
 d9a:	31 81       	ldd	r19, Z+1	; 0x01
 d9c:	28 0f       	add	r18, r24
 d9e:	39 1f       	adc	r19, r25
 da0:	80 91 96 02 	lds	r24, 0x0296
 da4:	90 91 97 02 	lds	r25, 0x0297
 da8:	82 17       	cp	r24, r18
 daa:	93 07       	cpc	r25, r19
 dac:	79 f5       	brne	.+94     	; 0xe0c <free+0x92>
 dae:	f0 93 97 02 	sts	0x0297, r31
 db2:	e0 93 96 02 	sts	0x0296, r30
 db6:	6d c0       	rjmp	.+218    	; 0xe92 <free+0x118>
 db8:	de 01       	movw	r26, r28
 dba:	20 e0       	ldi	r18, 0x00	; 0
 dbc:	30 e0       	ldi	r19, 0x00	; 0
 dbe:	ae 17       	cp	r26, r30
 dc0:	bf 07       	cpc	r27, r31
 dc2:	50 f4       	brcc	.+20     	; 0xdd8 <free+0x5e>
 dc4:	12 96       	adiw	r26, 0x02	; 2
 dc6:	4d 91       	ld	r20, X+
 dc8:	5c 91       	ld	r21, X
 dca:	13 97       	sbiw	r26, 0x03	; 3
 dcc:	9d 01       	movw	r18, r26
 dce:	41 15       	cp	r20, r1
 dd0:	51 05       	cpc	r21, r1
 dd2:	09 f1       	breq	.+66     	; 0xe16 <free+0x9c>
 dd4:	da 01       	movw	r26, r20
 dd6:	f3 cf       	rjmp	.-26     	; 0xdbe <free+0x44>
 dd8:	b3 83       	std	Z+3, r27	; 0x03
 dda:	a2 83       	std	Z+2, r26	; 0x02
 ddc:	40 81       	ld	r20, Z
 dde:	51 81       	ldd	r21, Z+1	; 0x01
 de0:	84 0f       	add	r24, r20
 de2:	95 1f       	adc	r25, r21
 de4:	8a 17       	cp	r24, r26
 de6:	9b 07       	cpc	r25, r27
 de8:	71 f4       	brne	.+28     	; 0xe06 <free+0x8c>
 dea:	8d 91       	ld	r24, X+
 dec:	9c 91       	ld	r25, X
 dee:	11 97       	sbiw	r26, 0x01	; 1
 df0:	84 0f       	add	r24, r20
 df2:	95 1f       	adc	r25, r21
 df4:	02 96       	adiw	r24, 0x02	; 2
 df6:	91 83       	std	Z+1, r25	; 0x01
 df8:	80 83       	st	Z, r24
 dfa:	12 96       	adiw	r26, 0x02	; 2
 dfc:	8d 91       	ld	r24, X+
 dfe:	9c 91       	ld	r25, X
 e00:	13 97       	sbiw	r26, 0x03	; 3
 e02:	93 83       	std	Z+3, r25	; 0x03
 e04:	82 83       	std	Z+2, r24	; 0x02
 e06:	21 15       	cp	r18, r1
 e08:	31 05       	cpc	r19, r1
 e0a:	29 f4       	brne	.+10     	; 0xe16 <free+0x9c>
 e0c:	f0 93 99 02 	sts	0x0299, r31
 e10:	e0 93 98 02 	sts	0x0298, r30
 e14:	3e c0       	rjmp	.+124    	; 0xe92 <free+0x118>
 e16:	d9 01       	movw	r26, r18
 e18:	13 96       	adiw	r26, 0x03	; 3
 e1a:	fc 93       	st	X, r31
 e1c:	ee 93       	st	-X, r30
 e1e:	12 97       	sbiw	r26, 0x02	; 2
 e20:	4d 91       	ld	r20, X+
 e22:	5d 91       	ld	r21, X+
 e24:	a4 0f       	add	r26, r20
 e26:	b5 1f       	adc	r27, r21
 e28:	ea 17       	cp	r30, r26
 e2a:	fb 07       	cpc	r31, r27
 e2c:	79 f4       	brne	.+30     	; 0xe4c <free+0xd2>
 e2e:	80 81       	ld	r24, Z
 e30:	91 81       	ldd	r25, Z+1	; 0x01
 e32:	84 0f       	add	r24, r20
 e34:	95 1f       	adc	r25, r21
 e36:	02 96       	adiw	r24, 0x02	; 2
 e38:	d9 01       	movw	r26, r18
 e3a:	11 96       	adiw	r26, 0x01	; 1
 e3c:	9c 93       	st	X, r25
 e3e:	8e 93       	st	-X, r24
 e40:	82 81       	ldd	r24, Z+2	; 0x02
 e42:	93 81       	ldd	r25, Z+3	; 0x03
 e44:	13 96       	adiw	r26, 0x03	; 3
 e46:	9c 93       	st	X, r25
 e48:	8e 93       	st	-X, r24
 e4a:	12 97       	sbiw	r26, 0x02	; 2
 e4c:	e0 e0       	ldi	r30, 0x00	; 0
 e4e:	f0 e0       	ldi	r31, 0x00	; 0
 e50:	8a 81       	ldd	r24, Y+2	; 0x02
 e52:	9b 81       	ldd	r25, Y+3	; 0x03
 e54:	00 97       	sbiw	r24, 0x00	; 0
 e56:	19 f0       	breq	.+6      	; 0xe5e <free+0xe4>
 e58:	fe 01       	movw	r30, r28
 e5a:	ec 01       	movw	r28, r24
 e5c:	f9 cf       	rjmp	.-14     	; 0xe50 <free+0xd6>
 e5e:	ce 01       	movw	r24, r28
 e60:	02 96       	adiw	r24, 0x02	; 2
 e62:	28 81       	ld	r18, Y
 e64:	39 81       	ldd	r19, Y+1	; 0x01
 e66:	82 0f       	add	r24, r18
 e68:	93 1f       	adc	r25, r19
 e6a:	20 91 96 02 	lds	r18, 0x0296
 e6e:	30 91 97 02 	lds	r19, 0x0297
 e72:	28 17       	cp	r18, r24
 e74:	39 07       	cpc	r19, r25
 e76:	69 f4       	brne	.+26     	; 0xe92 <free+0x118>
 e78:	30 97       	sbiw	r30, 0x00	; 0
 e7a:	29 f4       	brne	.+10     	; 0xe86 <free+0x10c>
 e7c:	10 92 99 02 	sts	0x0299, r1
 e80:	10 92 98 02 	sts	0x0298, r1
 e84:	02 c0       	rjmp	.+4      	; 0xe8a <free+0x110>
 e86:	13 82       	std	Z+3, r1	; 0x03
 e88:	12 82       	std	Z+2, r1	; 0x02
 e8a:	d0 93 97 02 	sts	0x0297, r29
 e8e:	c0 93 96 02 	sts	0x0296, r28
 e92:	df 91       	pop	r29
 e94:	cf 91       	pop	r28
 e96:	08 95       	ret

00000e98 <strnlen_P>:
 e98:	fc 01       	movw	r30, r24
 e9a:	05 90       	lpm	r0, Z+
 e9c:	61 50       	subi	r22, 0x01	; 1
 e9e:	70 40       	sbci	r23, 0x00	; 0
 ea0:	01 10       	cpse	r0, r1
 ea2:	d8 f7       	brcc	.-10     	; 0xe9a <strnlen_P+0x2>
 ea4:	80 95       	com	r24
 ea6:	90 95       	com	r25
 ea8:	8e 0f       	add	r24, r30
 eaa:	9f 1f       	adc	r25, r31
 eac:	08 95       	ret

00000eae <memset>:
 eae:	dc 01       	movw	r26, r24
 eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <memset+0x6>
 eb2:	6d 93       	st	X+, r22
 eb4:	41 50       	subi	r20, 0x01	; 1
 eb6:	50 40       	sbci	r21, 0x00	; 0
 eb8:	e0 f7       	brcc	.-8      	; 0xeb2 <memset+0x4>
 eba:	08 95       	ret

00000ebc <strnlen>:
 ebc:	fc 01       	movw	r30, r24
 ebe:	61 50       	subi	r22, 0x01	; 1
 ec0:	70 40       	sbci	r23, 0x00	; 0
 ec2:	01 90       	ld	r0, Z+
 ec4:	01 10       	cpse	r0, r1
 ec6:	d8 f7       	brcc	.-10     	; 0xebe <strnlen+0x2>
 ec8:	80 95       	com	r24
 eca:	90 95       	com	r25
 ecc:	8e 0f       	add	r24, r30
 ece:	9f 1f       	adc	r25, r31
 ed0:	08 95       	ret

00000ed2 <fputc>:
 ed2:	0f 93       	push	r16
 ed4:	1f 93       	push	r17
 ed6:	cf 93       	push	r28
 ed8:	df 93       	push	r29
 eda:	18 2f       	mov	r17, r24
 edc:	09 2f       	mov	r16, r25
 ede:	eb 01       	movw	r28, r22
 ee0:	8b 81       	ldd	r24, Y+3	; 0x03
 ee2:	81 fd       	sbrc	r24, 1
 ee4:	03 c0       	rjmp	.+6      	; 0xeec <fputc+0x1a>
 ee6:	8f ef       	ldi	r24, 0xFF	; 255
 ee8:	9f ef       	ldi	r25, 0xFF	; 255
 eea:	20 c0       	rjmp	.+64     	; 0xf2c <fputc+0x5a>
 eec:	82 ff       	sbrs	r24, 2
 eee:	10 c0       	rjmp	.+32     	; 0xf10 <fputc+0x3e>
 ef0:	4e 81       	ldd	r20, Y+6	; 0x06
 ef2:	5f 81       	ldd	r21, Y+7	; 0x07
 ef4:	2c 81       	ldd	r18, Y+4	; 0x04
 ef6:	3d 81       	ldd	r19, Y+5	; 0x05
 ef8:	42 17       	cp	r20, r18
 efa:	53 07       	cpc	r21, r19
 efc:	7c f4       	brge	.+30     	; 0xf1c <fputc+0x4a>
 efe:	e8 81       	ld	r30, Y
 f00:	f9 81       	ldd	r31, Y+1	; 0x01
 f02:	9f 01       	movw	r18, r30
 f04:	2f 5f       	subi	r18, 0xFF	; 255
 f06:	3f 4f       	sbci	r19, 0xFF	; 255
 f08:	39 83       	std	Y+1, r19	; 0x01
 f0a:	28 83       	st	Y, r18
 f0c:	10 83       	st	Z, r17
 f0e:	06 c0       	rjmp	.+12     	; 0xf1c <fputc+0x4a>
 f10:	e8 85       	ldd	r30, Y+8	; 0x08
 f12:	f9 85       	ldd	r31, Y+9	; 0x09
 f14:	81 2f       	mov	r24, r17
 f16:	19 95       	eicall
 f18:	89 2b       	or	r24, r25
 f1a:	29 f7       	brne	.-54     	; 0xee6 <fputc+0x14>
 f1c:	2e 81       	ldd	r18, Y+6	; 0x06
 f1e:	3f 81       	ldd	r19, Y+7	; 0x07
 f20:	2f 5f       	subi	r18, 0xFF	; 255
 f22:	3f 4f       	sbci	r19, 0xFF	; 255
 f24:	3f 83       	std	Y+7, r19	; 0x07
 f26:	2e 83       	std	Y+6, r18	; 0x06
 f28:	81 2f       	mov	r24, r17
 f2a:	90 2f       	mov	r25, r16
 f2c:	df 91       	pop	r29
 f2e:	cf 91       	pop	r28
 f30:	1f 91       	pop	r17
 f32:	0f 91       	pop	r16
 f34:	08 95       	ret

00000f36 <__ultoa_invert>:
 f36:	fa 01       	movw	r30, r20
 f38:	aa 27       	eor	r26, r26
 f3a:	28 30       	cpi	r18, 0x08	; 8
 f3c:	51 f1       	breq	.+84     	; 0xf92 <__ultoa_invert+0x5c>
 f3e:	20 31       	cpi	r18, 0x10	; 16
 f40:	81 f1       	breq	.+96     	; 0xfa2 <__ultoa_invert+0x6c>
 f42:	e8 94       	clt
 f44:	6f 93       	push	r22
 f46:	6e 7f       	andi	r22, 0xFE	; 254
 f48:	6e 5f       	subi	r22, 0xFE	; 254
 f4a:	7f 4f       	sbci	r23, 0xFF	; 255
 f4c:	8f 4f       	sbci	r24, 0xFF	; 255
 f4e:	9f 4f       	sbci	r25, 0xFF	; 255
 f50:	af 4f       	sbci	r26, 0xFF	; 255
 f52:	b1 e0       	ldi	r27, 0x01	; 1
 f54:	3e d0       	rcall	.+124    	; 0xfd2 <__ultoa_invert+0x9c>
 f56:	b4 e0       	ldi	r27, 0x04	; 4
 f58:	3c d0       	rcall	.+120    	; 0xfd2 <__ultoa_invert+0x9c>
 f5a:	67 0f       	add	r22, r23
 f5c:	78 1f       	adc	r23, r24
 f5e:	89 1f       	adc	r24, r25
 f60:	9a 1f       	adc	r25, r26
 f62:	a1 1d       	adc	r26, r1
 f64:	68 0f       	add	r22, r24
 f66:	79 1f       	adc	r23, r25
 f68:	8a 1f       	adc	r24, r26
 f6a:	91 1d       	adc	r25, r1
 f6c:	a1 1d       	adc	r26, r1
 f6e:	6a 0f       	add	r22, r26
 f70:	71 1d       	adc	r23, r1
 f72:	81 1d       	adc	r24, r1
 f74:	91 1d       	adc	r25, r1
 f76:	a1 1d       	adc	r26, r1
 f78:	20 d0       	rcall	.+64     	; 0xfba <__ultoa_invert+0x84>
 f7a:	09 f4       	brne	.+2      	; 0xf7e <__ultoa_invert+0x48>
 f7c:	68 94       	set
 f7e:	3f 91       	pop	r19
 f80:	2a e0       	ldi	r18, 0x0A	; 10
 f82:	26 9f       	mul	r18, r22
 f84:	11 24       	eor	r1, r1
 f86:	30 19       	sub	r19, r0
 f88:	30 5d       	subi	r19, 0xD0	; 208
 f8a:	31 93       	st	Z+, r19
 f8c:	de f6       	brtc	.-74     	; 0xf44 <__ultoa_invert+0xe>
 f8e:	cf 01       	movw	r24, r30
 f90:	08 95       	ret
 f92:	46 2f       	mov	r20, r22
 f94:	47 70       	andi	r20, 0x07	; 7
 f96:	40 5d       	subi	r20, 0xD0	; 208
 f98:	41 93       	st	Z+, r20
 f9a:	b3 e0       	ldi	r27, 0x03	; 3
 f9c:	0f d0       	rcall	.+30     	; 0xfbc <__ultoa_invert+0x86>
 f9e:	c9 f7       	brne	.-14     	; 0xf92 <__ultoa_invert+0x5c>
 fa0:	f6 cf       	rjmp	.-20     	; 0xf8e <__ultoa_invert+0x58>
 fa2:	46 2f       	mov	r20, r22
 fa4:	4f 70       	andi	r20, 0x0F	; 15
 fa6:	40 5d       	subi	r20, 0xD0	; 208
 fa8:	4a 33       	cpi	r20, 0x3A	; 58
 faa:	18 f0       	brcs	.+6      	; 0xfb2 <__ultoa_invert+0x7c>
 fac:	49 5d       	subi	r20, 0xD9	; 217
 fae:	31 fd       	sbrc	r19, 1
 fb0:	40 52       	subi	r20, 0x20	; 32
 fb2:	41 93       	st	Z+, r20
 fb4:	02 d0       	rcall	.+4      	; 0xfba <__ultoa_invert+0x84>
 fb6:	a9 f7       	brne	.-22     	; 0xfa2 <__ultoa_invert+0x6c>
 fb8:	ea cf       	rjmp	.-44     	; 0xf8e <__ultoa_invert+0x58>
 fba:	b4 e0       	ldi	r27, 0x04	; 4
 fbc:	a6 95       	lsr	r26
 fbe:	97 95       	ror	r25
 fc0:	87 95       	ror	r24
 fc2:	77 95       	ror	r23
 fc4:	67 95       	ror	r22
 fc6:	ba 95       	dec	r27
 fc8:	c9 f7       	brne	.-14     	; 0xfbc <__ultoa_invert+0x86>
 fca:	00 97       	sbiw	r24, 0x00	; 0
 fcc:	61 05       	cpc	r22, r1
 fce:	71 05       	cpc	r23, r1
 fd0:	08 95       	ret
 fd2:	9b 01       	movw	r18, r22
 fd4:	ac 01       	movw	r20, r24
 fd6:	0a 2e       	mov	r0, r26
 fd8:	06 94       	lsr	r0
 fda:	57 95       	ror	r21
 fdc:	47 95       	ror	r20
 fde:	37 95       	ror	r19
 fe0:	27 95       	ror	r18
 fe2:	ba 95       	dec	r27
 fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__ultoa_invert+0xa2>
 fe6:	62 0f       	add	r22, r18
 fe8:	73 1f       	adc	r23, r19
 fea:	84 1f       	adc	r24, r20
 fec:	95 1f       	adc	r25, r21
 fee:	a0 1d       	adc	r26, r0
 ff0:	08 95       	ret

00000ff2 <_exit>:
 ff2:	f8 94       	cli

00000ff4 <__stop_program>:
 ff4:	ff cf       	rjmp	.-2      	; 0xff4 <__stop_program>
