
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  0000113c  000011d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000113c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800290  00800290  00001260  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d51  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000df1  00000000  00000000  00003285  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012a0  00000000  00000000  00004076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000564  00000000  00000000  00005318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e9  00000000  00000000  0000587c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d1c  00000000  00000000  00005e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00006b81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
       6:	00 00       	nop
       8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
       a:	00 00       	nop
       c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
      12:	00 00       	nop
      14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
      16:	00 00       	nop
      18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
      22:	00 00       	nop
      24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
      26:	00 00       	nop
      28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
      32:	00 00       	nop
      34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
      36:	00 00       	nop
      38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
      42:	00 00       	nop
      44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
      46:	00 00       	nop
      48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
      52:	00 00       	nop
      54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
      56:	00 00       	nop
      58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
      62:	00 00       	nop
      64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
      66:	00 00       	nop
      68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
      72:	00 00       	nop
      74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
      76:	00 00       	nop
      78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
      82:	00 00       	nop
      84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
      86:	00 00       	nop
      88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
      92:	00 00       	nop
      94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
      96:	00 00       	nop
      98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	32 c3       	rjmp	.+1636   	; 0x702 <__vector_39>
      9e:	00 00       	nop
      a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9c 03       	fmulsu	r17, r20
      e6:	ee 03       	fmulsu	r22, r22
      e8:	ee 03       	fmulsu	r22, r22
      ea:	ee 03       	fmulsu	r22, r22
      ec:	ee 03       	fmulsu	r22, r22
      ee:	ee 03       	fmulsu	r22, r22
      f0:	ee 03       	fmulsu	r22, r22
      f2:	ee 03       	fmulsu	r22, r22
      f4:	9c 03       	fmulsu	r17, r20
      f6:	ee 03       	fmulsu	r22, r22
      f8:	ee 03       	fmulsu	r22, r22
      fa:	ee 03       	fmulsu	r22, r22
      fc:	ee 03       	fmulsu	r22, r22
      fe:	ee 03       	fmulsu	r22, r22
     100:	ee 03       	fmulsu	r22, r22
     102:	ee 03       	fmulsu	r22, r22
     104:	9e 03       	fmulsu	r17, r22
     106:	ee 03       	fmulsu	r22, r22
     108:	ee 03       	fmulsu	r22, r22
     10a:	ee 03       	fmulsu	r22, r22
     10c:	ee 03       	fmulsu	r22, r22
     10e:	ee 03       	fmulsu	r22, r22
     110:	ee 03       	fmulsu	r22, r22
     112:	ee 03       	fmulsu	r22, r22
     114:	ee 03       	fmulsu	r22, r22
     116:	ee 03       	fmulsu	r22, r22
     118:	ee 03       	fmulsu	r22, r22
     11a:	ee 03       	fmulsu	r22, r22
     11c:	ee 03       	fmulsu	r22, r22
     11e:	ee 03       	fmulsu	r22, r22
     120:	ee 03       	fmulsu	r22, r22
     122:	ee 03       	fmulsu	r22, r22
     124:	9e 03       	fmulsu	r17, r22
     126:	ee 03       	fmulsu	r22, r22
     128:	ee 03       	fmulsu	r22, r22
     12a:	ee 03       	fmulsu	r22, r22
     12c:	ee 03       	fmulsu	r22, r22
     12e:	ee 03       	fmulsu	r22, r22
     130:	ee 03       	fmulsu	r22, r22
     132:	ee 03       	fmulsu	r22, r22
     134:	ee 03       	fmulsu	r22, r22
     136:	ee 03       	fmulsu	r22, r22
     138:	ee 03       	fmulsu	r22, r22
     13a:	ee 03       	fmulsu	r22, r22
     13c:	ee 03       	fmulsu	r22, r22
     13e:	ee 03       	fmulsu	r22, r22
     140:	ee 03       	fmulsu	r22, r22
     142:	ee 03       	fmulsu	r22, r22
     144:	ea 03       	fmulsu	r22, r18
     146:	ee 03       	fmulsu	r22, r22
     148:	ee 03       	fmulsu	r22, r22
     14a:	ee 03       	fmulsu	r22, r22
     14c:	ee 03       	fmulsu	r22, r22
     14e:	ee 03       	fmulsu	r22, r22
     150:	ee 03       	fmulsu	r22, r22
     152:	ee 03       	fmulsu	r22, r22
     154:	c7 03       	fmuls	r20, r23
     156:	ee 03       	fmulsu	r22, r22
     158:	ee 03       	fmulsu	r22, r22
     15a:	ee 03       	fmulsu	r22, r22
     15c:	ee 03       	fmulsu	r22, r22
     15e:	ee 03       	fmulsu	r22, r22
     160:	ee 03       	fmulsu	r22, r22
     162:	ee 03       	fmulsu	r22, r22
     164:	ee 03       	fmulsu	r22, r22
     166:	ee 03       	fmulsu	r22, r22
     168:	ee 03       	fmulsu	r22, r22
     16a:	ee 03       	fmulsu	r22, r22
     16c:	ee 03       	fmulsu	r22, r22
     16e:	ee 03       	fmulsu	r22, r22
     170:	ee 03       	fmulsu	r22, r22
     172:	ee 03       	fmulsu	r22, r22
     174:	bb 03       	fmulsu	r19, r19
     176:	ee 03       	fmulsu	r22, r22
     178:	ee 03       	fmulsu	r22, r22
     17a:	ee 03       	fmulsu	r22, r22
     17c:	ee 03       	fmulsu	r22, r22
     17e:	ee 03       	fmulsu	r22, r22
     180:	ee 03       	fmulsu	r22, r22
     182:	ee 03       	fmulsu	r22, r22
     184:	d9 03       	fmulsu	r21, r17

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ec e3       	ldi	r30, 0x3C	; 60
     19e:	f1 e1       	ldi	r31, 0x11	; 17
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a0 39       	cpi	r26, 0x90	; 144
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	a0 e9       	ldi	r26, 0x90	; 144
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a2 3a       	cpi	r26, 0xA2	; 162
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	be d1       	rcall	.+892    	; 0x53e <main>
     1c2:	ba c7       	rjmp	.+3956   	; 0x1138 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <adc_init>:
#include <avr/io.h>
#include <stdint.h>
void adc_init(void){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     1c6:	ea e7       	ldi	r30, 0x7A	; 122
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	87 68       	ori	r24, 0x87	; 135
     1ce:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
     1d0:	ec e7       	ldi	r30, 0x7C	; 124
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	80 64       	ori	r24, 0x40	; 64
     1d8:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1);
     1da:	80 81       	ld	r24, Z
     1dc:	8f 77       	andi	r24, 0x7F	; 127
     1de:	80 83       	st	Z, r24
     1e0:	08 95       	ret

000001e2 <can_init>:
void can_print(can_message msg){
	for(int i = 0; i < msg.length; i++){
		printf("%c", msg.data[i]);
	}
	printf("\n");
}
     1e2:	46 d1       	rcall	.+652    	; 0x470 <mcp_init>
     1e4:	4f ef       	ldi	r20, 0xFF	; 255
     1e6:	60 e6       	ldi	r22, 0x60	; 96
     1e8:	80 e6       	ldi	r24, 0x60	; 96
     1ea:	2e d1       	rcall	.+604    	; 0x448 <mcp_bitModify>
     1ec:	4f ef       	ldi	r20, 0xFF	; 255
     1ee:	60 e6       	ldi	r22, 0x60	; 96
     1f0:	80 e7       	ldi	r24, 0x70	; 112
     1f2:	2a d1       	rcall	.+596    	; 0x448 <mcp_bitModify>
     1f4:	43 e0       	ldi	r20, 0x03	; 3
     1f6:	63 e0       	ldi	r22, 0x03	; 3
     1f8:	8e e2       	ldi	r24, 0x2E	; 46
     1fa:	26 d1       	rcall	.+588    	; 0x448 <mcp_bitModify>
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	60 ee       	ldi	r22, 0xE0	; 224
     200:	8f e0       	ldi	r24, 0x0F	; 15
     202:	22 c1       	rjmp	.+580    	; 0x448 <mcp_bitModify>
     204:	08 95       	ret

00000206 <can_pollInterrupt>:
     206:	80 b1       	in	r24, 0x00	; 0
     208:	8c e2       	ldi	r24, 0x2C	; 44
     20a:	0d d1       	rcall	.+538    	; 0x426 <mcp_read>
     20c:	80 ff       	sbrs	r24, 0
     20e:	06 c0       	rjmp	.+12     	; 0x21c <can_pollInterrupt+0x16>
     210:	4f ef       	ldi	r20, 0xFF	; 255
     212:	61 e0       	ldi	r22, 0x01	; 1
     214:	8c e2       	ldi	r24, 0x2C	; 44
     216:	18 d1       	rcall	.+560    	; 0x448 <mcp_bitModify>
     218:	90 e6       	ldi	r25, 0x60	; 96
     21a:	09 c0       	rjmp	.+18     	; 0x22e <can_pollInterrupt+0x28>
     21c:	98 2f       	mov	r25, r24
     21e:	92 70       	andi	r25, 0x02	; 2
     220:	81 ff       	sbrs	r24, 1
     222:	05 c0       	rjmp	.+10     	; 0x22e <can_pollInterrupt+0x28>
     224:	4f ef       	ldi	r20, 0xFF	; 255
     226:	62 e0       	ldi	r22, 0x02	; 2
     228:	8c e2       	ldi	r24, 0x2C	; 44
     22a:	0e d1       	rcall	.+540    	; 0x448 <mcp_bitModify>
     22c:	90 e7       	ldi	r25, 0x70	; 112
     22e:	89 2f       	mov	r24, r25
     230:	08 95       	ret

00000232 <can_read>:
     232:	8f 92       	push	r8
     234:	9f 92       	push	r9
     236:	af 92       	push	r10
     238:	bf 92       	push	r11
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	2b 97       	sbiw	r28, 0x0b	; 11
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	6c 01       	movw	r12, r24
     25c:	d4 df       	rcall	.-88     	; 0x206 <can_pollInterrupt>
     25e:	18 2f       	mov	r17, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	81 0f       	add	r24, r17
     264:	e0 d0       	rcall	.+448    	; 0x426 <mcp_read>
     266:	a8 2e       	mov	r10, r24
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	81 0f       	add	r24, r17
     26c:	dc d0       	rcall	.+440    	; 0x426 <mcp_read>
     26e:	82 95       	swap	r24
     270:	86 95       	lsr	r24
     272:	87 70       	andi	r24, 0x07	; 7
     274:	b1 2c       	mov	r11, r1
     276:	aa 0c       	add	r10, r10
     278:	bb 1c       	adc	r11, r11
     27a:	aa 0c       	add	r10, r10
     27c:	bb 1c       	adc	r11, r11
     27e:	aa 0c       	add	r10, r10
     280:	bb 1c       	adc	r11, r11
     282:	a8 2a       	or	r10, r24
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	81 0f       	add	r24, r17
     288:	ce d0       	rcall	.+412    	; 0x426 <mcp_read>
     28a:	8f 70       	andi	r24, 0x0F	; 15
     28c:	88 2e       	mov	r8, r24
     28e:	a1 f0       	breq	.+40     	; 0x2b8 <can_read+0x86>
     290:	0f 2e       	mov	r0, r31
     292:	f6 e0       	ldi	r31, 0x06	; 6
     294:	9f 2e       	mov	r9, r31
     296:	f0 2d       	mov	r31, r0
     298:	91 0e       	add	r9, r17
     29a:	8e 01       	movw	r16, r28
     29c:	0c 5f       	subi	r16, 0xFC	; 252
     29e:	1f 4f       	sbci	r17, 0xFF	; 255
     2a0:	78 01       	movw	r14, r16
     2a2:	e8 0e       	add	r14, r24
     2a4:	f1 1c       	adc	r15, r1
     2a6:	89 2d       	mov	r24, r9
     2a8:	be d0       	rcall	.+380    	; 0x426 <mcp_read>
     2aa:	f8 01       	movw	r30, r16
     2ac:	81 93       	st	Z+, r24
     2ae:	8f 01       	movw	r16, r30
     2b0:	93 94       	inc	r9
     2b2:	ee 15       	cp	r30, r14
     2b4:	ff 05       	cpc	r31, r15
     2b6:	b9 f7       	brne	.-18     	; 0x2a6 <can_read+0x74>
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	8c e2       	ldi	r24, 0x2C	; 44
     2be:	c4 d0       	rcall	.+392    	; 0x448 <mcp_bitModify>
     2c0:	ba 82       	std	Y+2, r11	; 0x02
     2c2:	a9 82       	std	Y+1, r10	; 0x01
     2c4:	8b 82       	std	Y+3, r8	; 0x03
     2c6:	8b e0       	ldi	r24, 0x0B	; 11
     2c8:	fe 01       	movw	r30, r28
     2ca:	31 96       	adiw	r30, 0x01	; 1
     2cc:	d6 01       	movw	r26, r12
     2ce:	01 90       	ld	r0, Z+
     2d0:	0d 92       	st	X+, r0
     2d2:	8a 95       	dec	r24
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <can_read+0x9c>
     2d6:	c6 01       	movw	r24, r12
     2d8:	2b 96       	adiw	r28, 0x0b	; 11
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	08 95       	ret

000002fe <can_handle_joystick_message>:

void can_handle_joystick_message(can_message msg){
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	2b 97       	sbiw	r28, 0x0b	; 11
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	de bf       	out	0x3e, r29	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	e9 82       	std	Y+1, r14	; 0x01
     31c:	fa 82       	std	Y+2, r15	; 0x02
     31e:	1c 83       	std	Y+4, r17	; 0x04
	if(msg.id == MCP_JOYSTICK_MESSAGE){
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	9a 81       	ldd	r25, Y+2	; 0x02
     324:	85 35       	cpi	r24, 0x55	; 85
     326:	91 05       	cpc	r25, r1
     328:	51 f4       	brne	.+20     	; 0x33e <can_handle_joystick_message+0x40>
		printf("Found joy");
     32a:	87 e0       	ldi	r24, 0x07	; 7
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	9f 93       	push	r25
     330:	8f 93       	push	r24
     332:	e8 d2       	rcall	.+1488   	; 0x904 <printf>
		pwm_set_servo(msg.data[0]);
     334:	8c 81       	ldd	r24, Y+4	; 0x04
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	81 d1       	rcall	.+770    	; 0x63c <pwm_set_servo>
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
	}
}
     33e:	2b 96       	adiw	r28, 0x0b	; 11
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	08 95       	ret

00000358 <can_handle_score_message>:
void can_handle_score_message(can_message msg){
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	2b 97       	sbiw	r28, 0x0b	; 11
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	e9 82       	std	Y+1, r14	; 0x01
     376:	fa 82       	std	Y+2, r15	; 0x02
     378:	0b 83       	std	Y+3, r16	; 0x03
     37a:	1c 83       	std	Y+4, r17	; 0x04
     37c:	2d 83       	std	Y+5, r18	; 0x05
     37e:	3e 83       	std	Y+6, r19	; 0x06
     380:	4f 83       	std	Y+7, r20	; 0x07
     382:	58 87       	std	Y+8, r21	; 0x08
     384:	69 87       	std	Y+9, r22	; 0x09
     386:	7a 87       	std	Y+10, r23	; 0x0a
     388:	8b 87       	std	Y+11, r24	; 0x0b
	if(msg.id == MCP_BUTTON_PRESS){
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	87 37       	cpi	r24, 0x77	; 119
     390:	91 05       	cpc	r25, r1
     392:	29 f4       	brne	.+10     	; 0x39e <can_handle_score_message+0x46>
		if(msg.data[0]){
     394:	11 23       	and	r17, r17
     396:	11 f0       	breq	.+4      	; 0x39c <can_handle_score_message+0x44>
			PORTA |= (1<<PA2); //stop relay
     398:	12 9a       	sbi	0x02, 2	; 2
     39a:	01 c0       	rjmp	.+2      	; 0x39e <can_handle_score_message+0x46>
		}
		else{
			PORTA &= ~(1<<PA2); //activate relay
     39c:	12 98       	cbi	0x02, 2	; 2
		}
	}
}
     39e:	2b 96       	adiw	r28, 0x0b	; 11
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	08 95       	ret

000003b8 <dac_initialize>:
#include <stdint.h>

#define MAX520_TWI_ADDR_BASE 0b01010000
static uint8_t twi_address = 0x00;

void dac_initialize(uint8_t MAX520_addr){
     3b8:	cf 93       	push	r28
     3ba:	c8 2f       	mov	r28, r24
	TWI_Master_Initialise();
     3bc:	76 d1       	rcall	.+748    	; 0x6aa <TWI_Master_Initialise>
	sei();
     3be:	78 94       	sei
	
	twi_address = MAX520_addr;
     3c0:	c0 93 90 02 	sts	0x0290, r28
}	
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <dac_write>:


void dac_write(uint8_t channel, uint8_t val){
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <dac_write+0x6>
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[3] = {	MAX520_TWI_ADDR_BASE | ((twi_address & 0x07) << 1), //Set address
     3d2:	90 91 90 02 	lds	r25, 0x0290
     3d6:	97 70       	andi	r25, 0x07	; 7
     3d8:	99 0f       	add	r25, r25
     3da:	90 65       	ori	r25, 0x50	; 80
     3dc:	99 83       	std	Y+1, r25	; 0x01
     3de:	87 70       	andi	r24, 0x07	; 7
     3e0:	8a 83       	std	Y+2, r24	; 0x02
     3e2:	6b 83       	std	Y+3, r22	; 0x03
							channel & 0x07, //Channel no higher than 0x07
							val		};
							
	TWI_Start_Transceiver_With_Data(message, 3);
     3e4:	63 e0       	ldi	r22, 0x03	; 3
     3e6:	ce 01       	movw	r24, r28
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	69 d1       	rcall	.+722    	; 0x6be <TWI_Start_Transceiver_With_Data>
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <new_score>:
	can_message msg;
	msg = new_can_message(MCP_GAME_SCORE_MESSAGE, 1, &score->score);
	can_write(&msg, MCP_TXB0CTRL);
}

game_score new_score(uint8_t antallMaalinger, uint16_t sum, uint8_t boolState, uint8_t val){
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <new_score+0x6>
     3fe:	1f 92       	push	r1
     400:	1f 92       	push	r1
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	36 2f       	mov	r19, r22
     408:	54 2f       	mov	r21, r20
     40a:	62 2f       	mov	r22, r18
	score.antallMaalinger = antallMaalinger;
	score.sum = sum;
	score.boolState = boolState;
	score.score = val;
	
	return score;
     40c:	47 2f       	mov	r20, r23
     40e:	28 2f       	mov	r18, r24
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <mcp_read>:
	SPI_transmit(MCP_READ_STATUS);
	uint8_t status = SPI_transmit(0x00);
	PORTB |= (1<< MCP_CS);
	
	return status;
}
     426:	cf 93       	push	r28
     428:	c8 2f       	mov	r28, r24
     42a:	28 98       	cbi	0x05, 0	; 5
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	37 d1       	rcall	.+622    	; 0x69e <SPI_transmit>
     430:	8c 2f       	mov	r24, r28
     432:	35 d1       	rcall	.+618    	; 0x69e <SPI_transmit>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	33 d1       	rcall	.+614    	; 0x69e <SPI_transmit>
     438:	28 9a       	sbi	0x05, 0	; 5
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <mcp_reset>:
     43e:	28 98       	cbi	0x05, 0	; 5
     440:	80 ec       	ldi	r24, 0xC0	; 192
     442:	2d d1       	rcall	.+602    	; 0x69e <SPI_transmit>
     444:	28 9a       	sbi	0x05, 0	; 5
     446:	08 95       	ret

00000448 <mcp_bitModify>:
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	18 2f       	mov	r17, r24
     450:	d6 2f       	mov	r29, r22
     452:	c4 2f       	mov	r28, r20
     454:	28 98       	cbi	0x05, 0	; 5
     456:	85 e0       	ldi	r24, 0x05	; 5
     458:	22 d1       	rcall	.+580    	; 0x69e <SPI_transmit>
     45a:	81 2f       	mov	r24, r17
     45c:	20 d1       	rcall	.+576    	; 0x69e <SPI_transmit>
     45e:	8d 2f       	mov	r24, r29
     460:	1e d1       	rcall	.+572    	; 0x69e <SPI_transmit>
     462:	8c 2f       	mov	r24, r28
     464:	1c d1       	rcall	.+568    	; 0x69e <SPI_transmit>
     466:	28 9a       	sbi	0x05, 0	; 5
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	08 95       	ret

00000470 <mcp_init>:

void mcp_init(void){
	SPI_masterInit();
     470:	10 d1       	rcall	.+544    	; 0x692 <SPI_masterInit>
	mcp_reset();
     472:	e5 cf       	rjmp	.-54     	; 0x43e <mcp_reset>
     474:	08 95       	ret

00000476 <motor_encoder_reset>:
	
	return data;
}

void motor_encoder_reset(){
	PORTF &= (1 << MOTOR_RST);
     476:	81 b3       	in	r24, 0x11	; 17
     478:	80 74       	andi	r24, 0x40	; 64
     47a:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47c:	8a e6       	ldi	r24, 0x6A	; 106
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <motor_encoder_reset+0x8>
     482:	00 c0       	rjmp	.+0      	; 0x484 <motor_encoder_reset+0xe>
	_delay_us(20);
	PORTF |= (1 << MOTOR_RST);
     484:	8e 9a       	sbi	0x11, 6	; 17
     486:	08 95       	ret

00000488 <motor_init>:

#include "dac.h"
#include "motor_driver.h"

void motor_init(void) {
	DDRF |= (1<<MOTOR_DIR) | (1<<MOTOR_EN) | (1<<MOTOR_SEL) | (1<<MOTOR_RST) | (1<<MOTOR_OE);
     488:	80 b3       	in	r24, 0x10	; 16
     48a:	88 6f       	ori	r24, 0xF8	; 248
     48c:	80 bb       	out	0x10, r24	; 16
	PORTF |= (1 << MOTOR_EN);
     48e:	8c 9a       	sbi	0x11, 4	; 17
	motor_encoder_reset();
     490:	f2 cf       	rjmp	.-28     	; 0x476 <motor_encoder_reset>
     492:	08 95       	ret

00000494 <motor_speed>:
	_delay_us(20);
	PORTF |= (1 << MOTOR_RST);
}

void motor_speed(uint8_t speed){
	dac_write(0, speed);
     494:	68 2f       	mov	r22, r24
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	97 cf       	rjmp	.-210    	; 0x3c8 <dac_write>
     49a:	08 95       	ret

0000049c <motor_direction>:
}

void motor_direction(motorDirection dir){
	if(dir){
     49c:	89 2b       	or	r24, r25
     49e:	11 f0       	breq	.+4      	; 0x4a4 <motor_direction+0x8>
		PORTF &= ~(1 << MOTOR_DIR);
     4a0:	8b 98       	cbi	0x11, 3	; 17
     4a2:	08 95       	ret
	}
	else{
		PORTF |= (1 << MOTOR_DIR);
     4a4:	8b 9a       	sbi	0x11, 3	; 17
     4a6:	08 95       	ret

000004a8 <motor_test>:
	}
}

void motor_test(void){
	motor_direction(right);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	f7 df       	rcall	.-18     	; 0x49c <motor_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ae:	2f ef       	ldi	r18, 0xFF	; 255
     4b0:	89 e6       	ldi	r24, 0x69	; 105
     4b2:	98 e1       	ldi	r25, 0x18	; 24
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	80 40       	sbci	r24, 0x00	; 0
     4b8:	90 40       	sbci	r25, 0x00	; 0
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <motor_test+0xc>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <motor_test+0x16>
     4be:	00 00       	nop
	_delay_ms(500);
	motor_direction(left);
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	eb df       	rcall	.-42     	; 0x49c <motor_direction>
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	89 e6       	ldi	r24, 0x69	; 105
     4ca:	98 e1       	ldi	r25, 0x18	; 24
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <motor_test+0x24>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <motor_test+0x2e>
     4d6:	00 00       	nop
     4d8:	08 95       	ret

000004da <reverse>:
	_delay_ms(500);

}

uint8_t reverse(uint8_t x){
	x = (((x & 0xaa) >> 1) | ((x & 0x55) << 1));
     4da:	28 2f       	mov	r18, r24
     4dc:	25 75       	andi	r18, 0x55	; 85
     4de:	22 0f       	add	r18, r18
     4e0:	98 2f       	mov	r25, r24
     4e2:	9a 7a       	andi	r25, 0xAA	; 170
     4e4:	96 95       	lsr	r25
     4e6:	92 2b       	or	r25, r18
	x = (((x & 0xcc) >> 2) | ((x & 0x33) << 2));
     4e8:	29 2f       	mov	r18, r25
     4ea:	23 73       	andi	r18, 0x33	; 51
     4ec:	22 0f       	add	r18, r18
     4ee:	22 0f       	add	r18, r18
     4f0:	89 2f       	mov	r24, r25
     4f2:	8c 7c       	andi	r24, 0xCC	; 204
     4f4:	86 95       	lsr	r24
     4f6:	86 95       	lsr	r24
     4f8:	82 2b       	or	r24, r18
	x = (((x & 0xf0) >> 4) | ((x & 0x0f) << 4));
	return x;

     4fa:	82 95       	swap	r24
     4fc:	08 95       	ret

000004fe <motor_encoder_read>:
	DDRF |= (1<<MOTOR_DIR) | (1<<MOTOR_EN) | (1<<MOTOR_SEL) | (1<<MOTOR_RST) | (1<<MOTOR_OE);
	PORTF |= (1 << MOTOR_EN);
	motor_encoder_reset();
}

int16_t motor_encoder_read(void){
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
	uint16_t data;
	
	//Enable output and send high byte on PORT K
	PORTF &=	~((1 << MOTOR_OE) | 
     502:	81 b3       	in	r24, 0x11	; 17
     504:	8f 75       	andi	r24, 0x5F	; 95
     506:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     508:	2a e6       	ldi	r18, 0x6A	; 106
     50a:	2a 95       	dec	r18
     50c:	f1 f7       	brne	.-4      	; 0x50a <motor_encoder_read+0xc>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <motor_encoder_read+0x12>
			 (1 << MOTOR_SEL));
	_delay_us(20);
	data = (reverse(PINK) << 8);
     510:	80 91 06 01 	lds	r24, 0x0106
     514:	e2 df       	rcall	.-60     	; 0x4da <reverse>
     516:	c8 2f       	mov	r28, r24
     518:	d0 e0       	ldi	r29, 0x00	; 0
     51a:	dc 2f       	mov	r29, r28
     51c:	cc 27       	eor	r28, r28
	
	//Send low byte on PORT K
	PORTF |= (1 << MOTOR_SEL); 
     51e:	8d 9a       	sbi	0x11, 5	; 17
     520:	3a e6       	ldi	r19, 0x6A	; 106
     522:	3a 95       	dec	r19
     524:	f1 f7       	brne	.-4      	; 0x522 <motor_encoder_read+0x24>
     526:	00 c0       	rjmp	.+0      	; 0x528 <motor_encoder_read+0x2a>
	_delay_us(20);
	data += reverse(PINK);
     528:	80 91 06 01 	lds	r24, 0x0106
     52c:	d6 df       	rcall	.-84     	; 0x4da <reverse>
	
	//Toggle reset and disable output
	PORTF |= (1 << MOTOR_OE);
     52e:	8f 9a       	sbi	0x11, 7	; 17
	
	return data;
}
     530:	9e 01       	movw	r18, r28
     532:	28 0f       	add	r18, r24
     534:	31 1d       	adc	r19, r1
     536:	c9 01       	movw	r24, r18
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <main>:
#include "adc.h"
#include "motor_driver.h"
#include "dac.h"

int main(void)
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	60 97       	sbiw	r28, 0x10	; 16
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
	sei();
     552:	78 94       	sei
	USART_Init(MYUBRR);
     554:	87 e6       	ldi	r24, 0x67	; 103
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	57 d1       	rcall	.+686    	; 0x808 <USART_Init>
	fdevopen((int (*)(char,  struct __file *))USART_Transmit, (int (*)(struct __file *))USART_Receive);
     55a:	6b e1       	ldi	r22, 0x1B	; 27
     55c:	74 e0       	ldi	r23, 0x04	; 4
     55e:	83 e1       	ldi	r24, 0x13	; 19
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	86 d1       	rcall	.+780    	; 0x870 <fdevopen>
	printf("UART setup done\n");
     564:	81 e1       	ldi	r24, 0x11	; 17
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	de d1       	rcall	.+956    	; 0x926 <puts>
	can_init();
     56a:	3b de       	rcall	.-906    	; 0x1e2 <can_init>
	printf("CAN setup done\n");
     56c:	81 e2       	ldi	r24, 0x21	; 33
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	da d1       	rcall	.+948    	; 0x926 <puts>
	pwm_init();
     572:	4c d0       	rcall	.+152    	; 0x60c <pwm_init>
	printf("PWM setup done\n");
     574:	80 e3       	ldi	r24, 0x30	; 48
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	d6 d1       	rcall	.+940    	; 0x926 <puts>
	adc_init();
     57a:	25 de       	rcall	.-950    	; 0x1c6 <adc_init>
	printf("ADC setup done\n");
     57c:	8f e3       	ldi	r24, 0x3F	; 63
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	d2 d1       	rcall	.+932    	; 0x926 <puts>
	motor_init();
     582:	82 df       	rcall	.-252    	; 0x488 <motor_init>
	printf("Motor setup done\n");
     584:	8e e4       	ldi	r24, 0x4E	; 78
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	ce d1       	rcall	.+924    	; 0x926 <puts>
	dac_initialize(0);
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	15 df       	rcall	.-470    	; 0x3b8 <dac_initialize>
	printf("DAC setup done\n");
     58e:	8f e5       	ldi	r24, 0x5F	; 95
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	c9 d1       	rcall	.+914    	; 0x926 <puts>
	printf("Initialization done\n");
     594:	8e e6       	ldi	r24, 0x6E	; 110
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	c6 d1       	rcall	.+908    	; 0x926 <puts>
	
	DDRA |=(1<<PA2); //for solenoid
     59a:	0a 9a       	sbi	0x01, 2	; 1
	//Joystick joy;
	can_message msg;
	game_score score = new_score(0, 0, 0, 0);
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	28 df       	rcall	.-432    	; 0x3f8 <new_score>
	
	motor_speed(100);
     5a8:	84 e6       	ldi	r24, 0x64	; 100
     5aa:	74 df       	rcall	.-280    	; 0x494 <motor_speed>
		//Kanskje bruke en switch
		can_handle_joystick_message(msg);
		can_handle_score_message(msg);
		//update_game_score(&score); har plutselig sluttet aa funke (muligens)
		motor_test();
		printf("Encoder: %d\n", motor_encoder_read());
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f2 e8       	ldi	r31, 0x82	; 130
     5b0:	cf 2e       	mov	r12, r31
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	df 2e       	mov	r13, r31
     5b6:	f0 2d       	mov	r31, r0
	
	motor_speed(100);
	while(1)
	{
		//printf("IR: %d\n", adc_read(0));
		if(can_pollInterrupt()){
     5b8:	26 de       	rcall	.-948    	; 0x206 <can_pollInterrupt>
     5ba:	88 23       	and	r24, r24
     5bc:	19 f0       	breq	.+6      	; 0x5c4 <main+0x86>
			msg = can_read();
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	37 de       	rcall	.-914    	; 0x232 <can_read>
		}
		
		//Kanskje bruke en switch
		can_handle_joystick_message(msg);
     5c4:	e9 80       	ldd	r14, Y+1	; 0x01
     5c6:	fa 80       	ldd	r15, Y+2	; 0x02
     5c8:	0b 81       	ldd	r16, Y+3	; 0x03
     5ca:	1c 81       	ldd	r17, Y+4	; 0x04
     5cc:	2d 81       	ldd	r18, Y+5	; 0x05
     5ce:	3e 81       	ldd	r19, Y+6	; 0x06
     5d0:	4f 81       	ldd	r20, Y+7	; 0x07
     5d2:	58 85       	ldd	r21, Y+8	; 0x08
     5d4:	69 85       	ldd	r22, Y+9	; 0x09
     5d6:	7a 85       	ldd	r23, Y+10	; 0x0a
     5d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     5da:	91 de       	rcall	.-734    	; 0x2fe <can_handle_joystick_message>
		can_handle_score_message(msg);
     5dc:	e9 80       	ldd	r14, Y+1	; 0x01
     5de:	fa 80       	ldd	r15, Y+2	; 0x02
     5e0:	0b 81       	ldd	r16, Y+3	; 0x03
     5e2:	1c 81       	ldd	r17, Y+4	; 0x04
     5e4:	2d 81       	ldd	r18, Y+5	; 0x05
     5e6:	3e 81       	ldd	r19, Y+6	; 0x06
     5e8:	4f 81       	ldd	r20, Y+7	; 0x07
     5ea:	58 85       	ldd	r21, Y+8	; 0x08
     5ec:	69 85       	ldd	r22, Y+9	; 0x09
     5ee:	7a 85       	ldd	r23, Y+10	; 0x0a
     5f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f2:	b2 de       	rcall	.-668    	; 0x358 <can_handle_score_message>
		//update_game_score(&score); har plutselig sluttet aa funke (muligens)
		motor_test();
     5f4:	59 df       	rcall	.-334    	; 0x4a8 <motor_test>
		printf("Encoder: %d\n", motor_encoder_read());
     5f6:	83 df       	rcall	.-250    	; 0x4fe <motor_encoder_read>
     5f8:	9f 93       	push	r25
     5fa:	8f 93       	push	r24
     5fc:	df 92       	push	r13
     5fe:	cf 92       	push	r12
     600:	81 d1       	rcall	.+770    	; 0x904 <printf>
		
	}
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	d6 cf       	rjmp	.-84     	; 0x5b8 <main+0x7a>

0000060c <pwm_init>:
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
     60c:	6b 9a       	sbi	0x0d, 3	; 13
     60e:	e0 e9       	ldi	r30, 0x90	; 144
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	8e 7b       	andi	r24, 0xBE	; 190
     616:	80 83       	st	Z, r24
     618:	80 81       	ld	r24, Z
     61a:	82 68       	ori	r24, 0x82	; 130
     61c:	80 83       	st	Z, r24
     61e:	e1 e9       	ldi	r30, 0x91	; 145
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	8d 61       	ori	r24, 0x1D	; 29
     626:	80 83       	st	Z, r24
     628:	80 81       	ld	r24, Z
     62a:	8d 7f       	andi	r24, 0xFD	; 253
     62c:	80 83       	st	Z, r24
     62e:	88 e3       	ldi	r24, 0x38	; 56
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	90 93 97 00 	sts	0x0097, r25
     636:	80 93 96 00 	sts	0x0096, r24
     63a:	08 95       	ret

0000063c <pwm_set_servo>:
}

void pwm_set_servo(unsigned int val){
	val = (val*19)/255 + servo_min;
     63c:	43 e1       	ldi	r20, 0x13	; 19
     63e:	48 9f       	mul	r20, r24
     640:	90 01       	movw	r18, r0
     642:	49 9f       	mul	r20, r25
     644:	30 0d       	add	r19, r0
     646:	11 24       	eor	r1, r1
     648:	a1 e8       	ldi	r26, 0x81	; 129
     64a:	b0 e8       	ldi	r27, 0x80	; 128
     64c:	02 d1       	rcall	.+516    	; 0x852 <__umulhisi3>
     64e:	88 0f       	add	r24, r24
     650:	89 2f       	mov	r24, r25
     652:	88 1f       	adc	r24, r24
     654:	99 0b       	sbc	r25, r25
     656:	91 95       	neg	r25
	if((val <= (servo_mid + 1)) && (val >= (servo_mid - 1))){
     658:	9c 01       	movw	r18, r24
     65a:	2b 50       	subi	r18, 0x0B	; 11
     65c:	31 09       	sbc	r19, r1
     65e:	23 30       	cpi	r18, 0x03	; 3
     660:	31 05       	cpc	r19, r1
     662:	38 f4       	brcc	.+14     	; 0x672 <pwm_set_servo+0x36>
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
     664:	89 e1       	ldi	r24, 0x19	; 25
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	90 93 99 00 	sts	0x0099, r25
     66c:	80 93 98 00 	sts	0x0098, r24
     670:	08 95       	ret
	val = (val*19)/255 + servo_min;
	if((val <= (servo_mid + 1)) && (val >= (servo_mid - 1))){
		pwm_set_value(servo_mid);
	}
	
	else if((val >= servo_min) && (val <= servo_max)){
     672:	89 31       	cpi	r24, 0x19	; 25
     674:	91 05       	cpc	r25, r1
     676:	30 f4       	brcc	.+12     	; 0x684 <pwm_set_servo+0x48>
void pwm_set_value(unsigned int val){
	OCR3A = val;
}

void pwm_set_servo(unsigned int val){
	val = (val*19)/255 + servo_min;
     678:	0d 96       	adiw	r24, 0x0d	; 13
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
     67a:	90 93 99 00 	sts	0x0099, r25
     67e:	80 93 98 00 	sts	0x0098, r24
     682:	08 95       	ret
     684:	89 e1       	ldi	r24, 0x19	; 25
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	90 93 99 00 	sts	0x0099, r25
     68c:	80 93 98 00 	sts	0x0098, r24
     690:	08 95       	ret

00000692 <SPI_masterInit>:
#include <stdio.h>
#include <stdlib.h>

void SPI_masterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB2)|(1 << PB1)|(1 << PB0); //0 = SS, 3 = SI, 2 = SCK
     692:	87 e0       	ldi	r24, 0x07	; 7
     694:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PB3); //SO
     696:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     698:	81 e5       	ldi	r24, 0x51	; 81
     69a:	8c bd       	out	0x2c, r24	; 44
     69c:	08 95       	ret

0000069e <SPI_transmit>:
}
uint8_t SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
     69e:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     6a0:	0d b4       	in	r0, 0x2d	; 45
     6a2:	07 fe       	sbrs	r0, 7
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <SPI_transmit+0x2>
	return SPDR;
     6a6:	8e b5       	in	r24, 0x2e	; 46
     6a8:	08 95       	ret

000006aa <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     6aa:	8c e0       	ldi	r24, 0x0C	; 12
     6ac:	80 93 b8 00 	sts	0x00B8, r24
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	80 93 bb 00 	sts	0x00BB, r24
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	80 93 bc 00 	sts	0x00BC, r24
     6bc:	08 95       	ret

000006be <TWI_Start_Transceiver_With_Data>:
     6be:	ec eb       	ldi	r30, 0xBC	; 188
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	20 81       	ld	r18, Z
     6c4:	20 fd       	sbrc	r18, 0
     6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <TWI_Start_Transceiver_With_Data+0x4>
     6c8:	60 93 93 02 	sts	0x0293, r22
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 81       	ld	r18, Z
     6d0:	20 93 94 02 	sts	0x0294, r18
     6d4:	20 fd       	sbrc	r18, 0
     6d6:	0c c0       	rjmp	.+24     	; 0x6f0 <TWI_Start_Transceiver_With_Data+0x32>
     6d8:	62 30       	cpi	r22, 0x02	; 2
     6da:	50 f0       	brcs	.+20     	; 0x6f0 <TWI_Start_Transceiver_With_Data+0x32>
     6dc:	dc 01       	movw	r26, r24
     6de:	11 96       	adiw	r26, 0x01	; 1
     6e0:	e5 e9       	ldi	r30, 0x95	; 149
     6e2:	f2 e0       	ldi	r31, 0x02	; 2
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	9d 91       	ld	r25, X+
     6e8:	91 93       	st	Z+, r25
     6ea:	8f 5f       	subi	r24, 0xFF	; 255
     6ec:	86 13       	cpse	r24, r22
     6ee:	fb cf       	rjmp	.-10     	; 0x6e6 <TWI_Start_Transceiver_With_Data+0x28>
     6f0:	10 92 92 02 	sts	0x0292, r1
     6f4:	88 ef       	ldi	r24, 0xF8	; 248
     6f6:	80 93 06 02 	sts	0x0206, r24
     6fa:	85 ea       	ldi	r24, 0xA5	; 165
     6fc:	80 93 bc 00 	sts	0x00BC, r24
     700:	08 95       	ret

00000702 <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	0b b6       	in	r0, 0x3b	; 59
     70e:	0f 92       	push	r0
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	8f 93       	push	r24
     716:	9f 93       	push	r25
     718:	af 93       	push	r26
     71a:	bf 93       	push	r27
     71c:	ef 93       	push	r30
     71e:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     720:	80 91 b9 00 	lds	r24, 0x00B9
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	fc 01       	movw	r30, r24
     728:	38 97       	sbiw	r30, 0x08	; 8
     72a:	e1 35       	cpi	r30, 0x51	; 81
     72c:	f1 05       	cpc	r31, r1
     72e:	08 f0       	brcs	.+2      	; 0x732 <__vector_39+0x30>
     730:	55 c0       	rjmp	.+170    	; 0x7dc <__vector_39+0xda>
     732:	ee 58       	subi	r30, 0x8E	; 142
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	87 c0       	rjmp	.+270    	; 0x846 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     738:	10 92 91 02 	sts	0x0291, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     73c:	e0 91 91 02 	lds	r30, 0x0291
     740:	80 91 93 02 	lds	r24, 0x0293
     744:	e8 17       	cp	r30, r24
     746:	70 f4       	brcc	.+28     	; 0x764 <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	8e 0f       	add	r24, r30
     74c:	80 93 91 02 	sts	0x0291, r24
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ec 56       	subi	r30, 0x6C	; 108
     754:	fd 4f       	sbci	r31, 0xFD	; 253
     756:	80 81       	ld	r24, Z
     758:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     75c:	85 e8       	ldi	r24, 0x85	; 133
     75e:	80 93 bc 00 	sts	0x00BC, r24
     762:	43 c0       	rjmp	.+134    	; 0x7ea <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     764:	80 91 92 02 	lds	r24, 0x0292
     768:	81 60       	ori	r24, 0x01	; 1
     76a:	80 93 92 02 	sts	0x0292, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     76e:	84 e9       	ldi	r24, 0x94	; 148
     770:	80 93 bc 00 	sts	0x00BC, r24
     774:	3a c0       	rjmp	.+116    	; 0x7ea <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     776:	e0 91 91 02 	lds	r30, 0x0291
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	8e 0f       	add	r24, r30
     77e:	80 93 91 02 	sts	0x0291, r24
     782:	80 91 bb 00 	lds	r24, 0x00BB
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	ec 56       	subi	r30, 0x6C	; 108
     78a:	fd 4f       	sbci	r31, 0xFD	; 253
     78c:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     78e:	20 91 91 02 	lds	r18, 0x0291
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	80 91 93 02 	lds	r24, 0x0293
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	28 17       	cp	r18, r24
     79e:	39 07       	cpc	r19, r25
     7a0:	24 f4       	brge	.+8      	; 0x7aa <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     7a2:	85 ec       	ldi	r24, 0xC5	; 197
     7a4:	80 93 bc 00 	sts	0x00BC, r24
     7a8:	20 c0       	rjmp	.+64     	; 0x7ea <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     7aa:	85 e8       	ldi	r24, 0x85	; 133
     7ac:	80 93 bc 00 	sts	0x00BC, r24
     7b0:	1c c0       	rjmp	.+56     	; 0x7ea <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     7b2:	80 91 bb 00 	lds	r24, 0x00BB
     7b6:	e0 91 91 02 	lds	r30, 0x0291
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	ec 56       	subi	r30, 0x6C	; 108
     7be:	fd 4f       	sbci	r31, 0xFD	; 253
     7c0:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     7c2:	80 91 92 02 	lds	r24, 0x0292
     7c6:	81 60       	ori	r24, 0x01	; 1
     7c8:	80 93 92 02 	sts	0x0292, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     7cc:	84 e9       	ldi	r24, 0x94	; 148
     7ce:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     7d4:	85 ea       	ldi	r24, 0xA5	; 165
     7d6:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     7dc:	80 91 b9 00 	lds	r24, 0x00B9
     7e0:	80 93 06 02 	sts	0x0206, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     7ea:	ff 91       	pop	r31
     7ec:	ef 91       	pop	r30
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <USART_Init>:
	_delay_ms(100);
}
void USART_Init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     808:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     80c:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     810:	e1 ec       	ldi	r30, 0xC1	; 193
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	88 61       	ori	r24, 0x18	; 24
     818:	80 83       	st	Z, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C |= (3<<UCSZ00);
     81a:	e2 ec       	ldi	r30, 0xC2	; 194
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	86 60       	ori	r24, 0x06	; 6
     822:	80 83       	st	Z, r24
     824:	08 95       	ret

00000826 <USART_Transmit>:
}
void USART_Transmit(unsigned char data){
	/*Wait for empty transmit buffer*/
	while( !(UCSR0A & (1<<UDRE0)) );
     826:	e0 ec       	ldi	r30, 0xC0	; 192
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	90 81       	ld	r25, Z
     82c:	95 ff       	sbrs	r25, 5
     82e:	fd cf       	rjmp	.-6      	; 0x82a <USART_Transmit+0x4>
	
	/*Put data into buffer, sends the data*/
	UDR0 = data;
     830:	80 93 c6 00 	sts	0x00C6, r24
     834:	08 95       	ret

00000836 <USART_Receive>:
}
unsigned char USART_Receive(void){
	/*Wait for data to be received*/
	while( !(UCSR0A & (1<<RXC0)) );
     836:	e0 ec       	ldi	r30, 0xC0	; 192
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	88 23       	and	r24, r24
     83e:	ec f7       	brge	.-6      	; 0x83a <USART_Receive+0x4>
	
	
	/*Get and return received data from buffer*/
	return UDR0;
     840:	80 91 c6 00 	lds	r24, 0x00C6
     844:	08 95       	ret

00000846 <__tablejump2__>:
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31

0000084a <__tablejump__>:
     84a:	05 90       	lpm	r0, Z+
     84c:	f4 91       	lpm	r31, Z
     84e:	e0 2d       	mov	r30, r0
     850:	19 94       	eijmp

00000852 <__umulhisi3>:
     852:	a2 9f       	mul	r26, r18
     854:	b0 01       	movw	r22, r0
     856:	b3 9f       	mul	r27, r19
     858:	c0 01       	movw	r24, r0
     85a:	a3 9f       	mul	r26, r19
     85c:	70 0d       	add	r23, r0
     85e:	81 1d       	adc	r24, r1
     860:	11 24       	eor	r1, r1
     862:	91 1d       	adc	r25, r1
     864:	b2 9f       	mul	r27, r18
     866:	70 0d       	add	r23, r0
     868:	81 1d       	adc	r24, r1
     86a:	11 24       	eor	r1, r1
     86c:	91 1d       	adc	r25, r1
     86e:	08 95       	ret

00000870 <fdevopen>:
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	ec 01       	movw	r28, r24
     87a:	8b 01       	movw	r16, r22
     87c:	00 97       	sbiw	r24, 0x00	; 0
     87e:	31 f4       	brne	.+12     	; 0x88c <fdevopen+0x1c>
     880:	61 15       	cp	r22, r1
     882:	71 05       	cpc	r23, r1
     884:	19 f4       	brne	.+6      	; 0x88c <fdevopen+0x1c>
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	37 c0       	rjmp	.+110    	; 0x8fa <fdevopen+0x8a>
     88c:	6e e0       	ldi	r22, 0x0E	; 14
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	63 d2       	rcall	.+1222   	; 0xd5c <calloc>
     896:	fc 01       	movw	r30, r24
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a9 f3       	breq	.-22     	; 0x886 <fdevopen+0x16>
     89c:	80 e8       	ldi	r24, 0x80	; 128
     89e:	83 83       	std	Z+3, r24	; 0x03
     8a0:	01 15       	cp	r16, r1
     8a2:	11 05       	cpc	r17, r1
     8a4:	71 f0       	breq	.+28     	; 0x8c2 <fdevopen+0x52>
     8a6:	13 87       	std	Z+11, r17	; 0x0b
     8a8:	02 87       	std	Z+10, r16	; 0x0a
     8aa:	81 e8       	ldi	r24, 0x81	; 129
     8ac:	83 83       	std	Z+3, r24	; 0x03
     8ae:	80 91 98 02 	lds	r24, 0x0298
     8b2:	90 91 99 02 	lds	r25, 0x0299
     8b6:	89 2b       	or	r24, r25
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <fdevopen+0x52>
     8ba:	f0 93 99 02 	sts	0x0299, r31
     8be:	e0 93 98 02 	sts	0x0298, r30
     8c2:	20 97       	sbiw	r28, 0x00	; 0
     8c4:	c9 f0       	breq	.+50     	; 0x8f8 <fdevopen+0x88>
     8c6:	d1 87       	std	Z+9, r29	; 0x09
     8c8:	c0 87       	std	Z+8, r28	; 0x08
     8ca:	83 81       	ldd	r24, Z+3	; 0x03
     8cc:	82 60       	ori	r24, 0x02	; 2
     8ce:	83 83       	std	Z+3, r24	; 0x03
     8d0:	80 91 9a 02 	lds	r24, 0x029A
     8d4:	90 91 9b 02 	lds	r25, 0x029B
     8d8:	89 2b       	or	r24, r25
     8da:	71 f4       	brne	.+28     	; 0x8f8 <fdevopen+0x88>
     8dc:	f0 93 9b 02 	sts	0x029B, r31
     8e0:	e0 93 9a 02 	sts	0x029A, r30
     8e4:	80 91 9c 02 	lds	r24, 0x029C
     8e8:	90 91 9d 02 	lds	r25, 0x029D
     8ec:	89 2b       	or	r24, r25
     8ee:	21 f4       	brne	.+8      	; 0x8f8 <fdevopen+0x88>
     8f0:	f0 93 9d 02 	sts	0x029D, r31
     8f4:	e0 93 9c 02 	sts	0x029C, r30
     8f8:	cf 01       	movw	r24, r30
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	08 95       	ret

00000904 <printf>:
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	fe 01       	movw	r30, r28
     90e:	36 96       	adiw	r30, 0x06	; 6
     910:	61 91       	ld	r22, Z+
     912:	71 91       	ld	r23, Z+
     914:	af 01       	movw	r20, r30
     916:	80 91 9a 02 	lds	r24, 0x029A
     91a:	90 91 9b 02 	lds	r25, 0x029B
     91e:	30 d0       	rcall	.+96     	; 0x980 <vfprintf>
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <puts>:
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	e0 91 9a 02 	lds	r30, 0x029A
     932:	f0 91 9b 02 	lds	r31, 0x029B
     936:	23 81       	ldd	r18, Z+3	; 0x03
     938:	21 ff       	sbrs	r18, 1
     93a:	1b c0       	rjmp	.+54     	; 0x972 <puts+0x4c>
     93c:	ec 01       	movw	r28, r24
     93e:	00 e0       	ldi	r16, 0x00	; 0
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	89 91       	ld	r24, Y+
     944:	60 91 9a 02 	lds	r22, 0x029A
     948:	70 91 9b 02 	lds	r23, 0x029B
     94c:	db 01       	movw	r26, r22
     94e:	18 96       	adiw	r26, 0x08	; 8
     950:	ed 91       	ld	r30, X+
     952:	fc 91       	ld	r31, X
     954:	19 97       	sbiw	r26, 0x09	; 9
     956:	88 23       	and	r24, r24
     958:	31 f0       	breq	.+12     	; 0x966 <puts+0x40>
     95a:	19 95       	eicall
     95c:	89 2b       	or	r24, r25
     95e:	89 f3       	breq	.-30     	; 0x942 <puts+0x1c>
     960:	0f ef       	ldi	r16, 0xFF	; 255
     962:	1f ef       	ldi	r17, 0xFF	; 255
     964:	ee cf       	rjmp	.-36     	; 0x942 <puts+0x1c>
     966:	8a e0       	ldi	r24, 0x0A	; 10
     968:	19 95       	eicall
     96a:	89 2b       	or	r24, r25
     96c:	11 f4       	brne	.+4      	; 0x972 <puts+0x4c>
     96e:	c8 01       	movw	r24, r16
     970:	02 c0       	rjmp	.+4      	; 0x976 <puts+0x50>
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	9f ef       	ldi	r25, 0xFF	; 255
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <vfprintf>:
     980:	2f 92       	push	r2
     982:	3f 92       	push	r3
     984:	4f 92       	push	r4
     986:	5f 92       	push	r5
     988:	6f 92       	push	r6
     98a:	7f 92       	push	r7
     98c:	8f 92       	push	r8
     98e:	9f 92       	push	r9
     990:	af 92       	push	r10
     992:	bf 92       	push	r11
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	2c 97       	sbiw	r28, 0x0c	; 12
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	7c 01       	movw	r14, r24
     9b6:	6b 01       	movw	r12, r22
     9b8:	8a 01       	movw	r16, r20
     9ba:	fc 01       	movw	r30, r24
     9bc:	17 82       	std	Z+7, r1	; 0x07
     9be:	16 82       	std	Z+6, r1	; 0x06
     9c0:	83 81       	ldd	r24, Z+3	; 0x03
     9c2:	81 ff       	sbrs	r24, 1
     9c4:	b0 c1       	rjmp	.+864    	; 0xd26 <vfprintf+0x3a6>
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	4c 01       	movw	r8, r24
     9cc:	f7 01       	movw	r30, r14
     9ce:	93 81       	ldd	r25, Z+3	; 0x03
     9d0:	f6 01       	movw	r30, r12
     9d2:	93 fd       	sbrc	r25, 3
     9d4:	85 91       	lpm	r24, Z+
     9d6:	93 ff       	sbrs	r25, 3
     9d8:	81 91       	ld	r24, Z+
     9da:	6f 01       	movw	r12, r30
     9dc:	88 23       	and	r24, r24
     9de:	09 f4       	brne	.+2      	; 0x9e2 <vfprintf+0x62>
     9e0:	9e c1       	rjmp	.+828    	; 0xd1e <vfprintf+0x39e>
     9e2:	85 32       	cpi	r24, 0x25	; 37
     9e4:	39 f4       	brne	.+14     	; 0x9f4 <vfprintf+0x74>
     9e6:	93 fd       	sbrc	r25, 3
     9e8:	85 91       	lpm	r24, Z+
     9ea:	93 ff       	sbrs	r25, 3
     9ec:	81 91       	ld	r24, Z+
     9ee:	6f 01       	movw	r12, r30
     9f0:	85 32       	cpi	r24, 0x25	; 37
     9f2:	21 f4       	brne	.+8      	; 0x9fc <vfprintf+0x7c>
     9f4:	b7 01       	movw	r22, r14
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0f d3       	rcall	.+1566   	; 0x1018 <fputc>
     9fa:	e8 cf       	rjmp	.-48     	; 0x9cc <vfprintf+0x4c>
     9fc:	51 2c       	mov	r5, r1
     9fe:	31 2c       	mov	r3, r1
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	20 32       	cpi	r18, 0x20	; 32
     a04:	a0 f4       	brcc	.+40     	; 0xa2e <vfprintf+0xae>
     a06:	8b 32       	cpi	r24, 0x2B	; 43
     a08:	69 f0       	breq	.+26     	; 0xa24 <vfprintf+0xa4>
     a0a:	30 f4       	brcc	.+12     	; 0xa18 <vfprintf+0x98>
     a0c:	80 32       	cpi	r24, 0x20	; 32
     a0e:	59 f0       	breq	.+22     	; 0xa26 <vfprintf+0xa6>
     a10:	83 32       	cpi	r24, 0x23	; 35
     a12:	69 f4       	brne	.+26     	; 0xa2e <vfprintf+0xae>
     a14:	20 61       	ori	r18, 0x10	; 16
     a16:	2c c0       	rjmp	.+88     	; 0xa70 <vfprintf+0xf0>
     a18:	8d 32       	cpi	r24, 0x2D	; 45
     a1a:	39 f0       	breq	.+14     	; 0xa2a <vfprintf+0xaa>
     a1c:	80 33       	cpi	r24, 0x30	; 48
     a1e:	39 f4       	brne	.+14     	; 0xa2e <vfprintf+0xae>
     a20:	21 60       	ori	r18, 0x01	; 1
     a22:	26 c0       	rjmp	.+76     	; 0xa70 <vfprintf+0xf0>
     a24:	22 60       	ori	r18, 0x02	; 2
     a26:	24 60       	ori	r18, 0x04	; 4
     a28:	23 c0       	rjmp	.+70     	; 0xa70 <vfprintf+0xf0>
     a2a:	28 60       	ori	r18, 0x08	; 8
     a2c:	21 c0       	rjmp	.+66     	; 0xa70 <vfprintf+0xf0>
     a2e:	27 fd       	sbrc	r18, 7
     a30:	27 c0       	rjmp	.+78     	; 0xa80 <vfprintf+0x100>
     a32:	30 ed       	ldi	r19, 0xD0	; 208
     a34:	38 0f       	add	r19, r24
     a36:	3a 30       	cpi	r19, 0x0A	; 10
     a38:	78 f4       	brcc	.+30     	; 0xa58 <vfprintf+0xd8>
     a3a:	26 ff       	sbrs	r18, 6
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <vfprintf+0xca>
     a3e:	fa e0       	ldi	r31, 0x0A	; 10
     a40:	5f 9e       	mul	r5, r31
     a42:	30 0d       	add	r19, r0
     a44:	11 24       	eor	r1, r1
     a46:	53 2e       	mov	r5, r19
     a48:	13 c0       	rjmp	.+38     	; 0xa70 <vfprintf+0xf0>
     a4a:	8a e0       	ldi	r24, 0x0A	; 10
     a4c:	38 9e       	mul	r3, r24
     a4e:	30 0d       	add	r19, r0
     a50:	11 24       	eor	r1, r1
     a52:	33 2e       	mov	r3, r19
     a54:	20 62       	ori	r18, 0x20	; 32
     a56:	0c c0       	rjmp	.+24     	; 0xa70 <vfprintf+0xf0>
     a58:	8e 32       	cpi	r24, 0x2E	; 46
     a5a:	21 f4       	brne	.+8      	; 0xa64 <vfprintf+0xe4>
     a5c:	26 fd       	sbrc	r18, 6
     a5e:	5f c1       	rjmp	.+702    	; 0xd1e <vfprintf+0x39e>
     a60:	20 64       	ori	r18, 0x40	; 64
     a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0xf0>
     a64:	8c 36       	cpi	r24, 0x6C	; 108
     a66:	11 f4       	brne	.+4      	; 0xa6c <vfprintf+0xec>
     a68:	20 68       	ori	r18, 0x80	; 128
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <vfprintf+0xf0>
     a6c:	88 36       	cpi	r24, 0x68	; 104
     a6e:	41 f4       	brne	.+16     	; 0xa80 <vfprintf+0x100>
     a70:	f6 01       	movw	r30, r12
     a72:	93 fd       	sbrc	r25, 3
     a74:	85 91       	lpm	r24, Z+
     a76:	93 ff       	sbrs	r25, 3
     a78:	81 91       	ld	r24, Z+
     a7a:	6f 01       	movw	r12, r30
     a7c:	81 11       	cpse	r24, r1
     a7e:	c1 cf       	rjmp	.-126    	; 0xa02 <vfprintf+0x82>
     a80:	98 2f       	mov	r25, r24
     a82:	9f 7d       	andi	r25, 0xDF	; 223
     a84:	95 54       	subi	r25, 0x45	; 69
     a86:	93 30       	cpi	r25, 0x03	; 3
     a88:	28 f4       	brcc	.+10     	; 0xa94 <vfprintf+0x114>
     a8a:	0c 5f       	subi	r16, 0xFC	; 252
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	ff e3       	ldi	r31, 0x3F	; 63
     a90:	f9 83       	std	Y+1, r31	; 0x01
     a92:	0d c0       	rjmp	.+26     	; 0xaae <vfprintf+0x12e>
     a94:	83 36       	cpi	r24, 0x63	; 99
     a96:	31 f0       	breq	.+12     	; 0xaa4 <vfprintf+0x124>
     a98:	83 37       	cpi	r24, 0x73	; 115
     a9a:	71 f0       	breq	.+28     	; 0xab8 <vfprintf+0x138>
     a9c:	83 35       	cpi	r24, 0x53	; 83
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <vfprintf+0x122>
     aa0:	57 c0       	rjmp	.+174    	; 0xb50 <vfprintf+0x1d0>
     aa2:	21 c0       	rjmp	.+66     	; 0xae6 <vfprintf+0x166>
     aa4:	f8 01       	movw	r30, r16
     aa6:	80 81       	ld	r24, Z
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	0e 5f       	subi	r16, 0xFE	; 254
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
     aae:	44 24       	eor	r4, r4
     ab0:	43 94       	inc	r4
     ab2:	51 2c       	mov	r5, r1
     ab4:	54 01       	movw	r10, r8
     ab6:	14 c0       	rjmp	.+40     	; 0xae0 <vfprintf+0x160>
     ab8:	38 01       	movw	r6, r16
     aba:	f2 e0       	ldi	r31, 0x02	; 2
     abc:	6f 0e       	add	r6, r31
     abe:	71 1c       	adc	r7, r1
     ac0:	f8 01       	movw	r30, r16
     ac2:	a0 80       	ld	r10, Z
     ac4:	b1 80       	ldd	r11, Z+1	; 0x01
     ac6:	26 ff       	sbrs	r18, 6
     ac8:	03 c0       	rjmp	.+6      	; 0xad0 <vfprintf+0x150>
     aca:	65 2d       	mov	r22, r5
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <vfprintf+0x154>
     ad0:	6f ef       	ldi	r22, 0xFF	; 255
     ad2:	7f ef       	ldi	r23, 0xFF	; 255
     ad4:	c5 01       	movw	r24, r10
     ad6:	2c 87       	std	Y+12, r18	; 0x0c
     ad8:	94 d2       	rcall	.+1320   	; 0x1002 <strnlen>
     ada:	2c 01       	movw	r4, r24
     adc:	83 01       	movw	r16, r6
     ade:	2c 85       	ldd	r18, Y+12	; 0x0c
     ae0:	2f 77       	andi	r18, 0x7F	; 127
     ae2:	22 2e       	mov	r2, r18
     ae4:	16 c0       	rjmp	.+44     	; 0xb12 <vfprintf+0x192>
     ae6:	38 01       	movw	r6, r16
     ae8:	f2 e0       	ldi	r31, 0x02	; 2
     aea:	6f 0e       	add	r6, r31
     aec:	71 1c       	adc	r7, r1
     aee:	f8 01       	movw	r30, r16
     af0:	a0 80       	ld	r10, Z
     af2:	b1 80       	ldd	r11, Z+1	; 0x01
     af4:	26 ff       	sbrs	r18, 6
     af6:	03 c0       	rjmp	.+6      	; 0xafe <vfprintf+0x17e>
     af8:	65 2d       	mov	r22, r5
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <vfprintf+0x182>
     afe:	6f ef       	ldi	r22, 0xFF	; 255
     b00:	7f ef       	ldi	r23, 0xFF	; 255
     b02:	c5 01       	movw	r24, r10
     b04:	2c 87       	std	Y+12, r18	; 0x0c
     b06:	6b d2       	rcall	.+1238   	; 0xfde <strnlen_P>
     b08:	2c 01       	movw	r4, r24
     b0a:	2c 85       	ldd	r18, Y+12	; 0x0c
     b0c:	20 68       	ori	r18, 0x80	; 128
     b0e:	22 2e       	mov	r2, r18
     b10:	83 01       	movw	r16, r6
     b12:	23 fc       	sbrc	r2, 3
     b14:	19 c0       	rjmp	.+50     	; 0xb48 <vfprintf+0x1c8>
     b16:	83 2d       	mov	r24, r3
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	48 16       	cp	r4, r24
     b1c:	59 06       	cpc	r5, r25
     b1e:	a0 f4       	brcc	.+40     	; 0xb48 <vfprintf+0x1c8>
     b20:	b7 01       	movw	r22, r14
     b22:	80 e2       	ldi	r24, 0x20	; 32
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	78 d2       	rcall	.+1264   	; 0x1018 <fputc>
     b28:	3a 94       	dec	r3
     b2a:	f5 cf       	rjmp	.-22     	; 0xb16 <vfprintf+0x196>
     b2c:	f5 01       	movw	r30, r10
     b2e:	27 fc       	sbrc	r2, 7
     b30:	85 91       	lpm	r24, Z+
     b32:	27 fe       	sbrs	r2, 7
     b34:	81 91       	ld	r24, Z+
     b36:	5f 01       	movw	r10, r30
     b38:	b7 01       	movw	r22, r14
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	6d d2       	rcall	.+1242   	; 0x1018 <fputc>
     b3e:	31 10       	cpse	r3, r1
     b40:	3a 94       	dec	r3
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	4f 1a       	sub	r4, r31
     b46:	51 08       	sbc	r5, r1
     b48:	41 14       	cp	r4, r1
     b4a:	51 04       	cpc	r5, r1
     b4c:	79 f7       	brne	.-34     	; 0xb2c <vfprintf+0x1ac>
     b4e:	de c0       	rjmp	.+444    	; 0xd0c <vfprintf+0x38c>
     b50:	84 36       	cpi	r24, 0x64	; 100
     b52:	11 f0       	breq	.+4      	; 0xb58 <vfprintf+0x1d8>
     b54:	89 36       	cpi	r24, 0x69	; 105
     b56:	31 f5       	brne	.+76     	; 0xba4 <vfprintf+0x224>
     b58:	f8 01       	movw	r30, r16
     b5a:	27 ff       	sbrs	r18, 7
     b5c:	07 c0       	rjmp	.+14     	; 0xb6c <vfprintf+0x1ec>
     b5e:	60 81       	ld	r22, Z
     b60:	71 81       	ldd	r23, Z+1	; 0x01
     b62:	82 81       	ldd	r24, Z+2	; 0x02
     b64:	93 81       	ldd	r25, Z+3	; 0x03
     b66:	0c 5f       	subi	r16, 0xFC	; 252
     b68:	1f 4f       	sbci	r17, 0xFF	; 255
     b6a:	08 c0       	rjmp	.+16     	; 0xb7c <vfprintf+0x1fc>
     b6c:	60 81       	ld	r22, Z
     b6e:	71 81       	ldd	r23, Z+1	; 0x01
     b70:	88 27       	eor	r24, r24
     b72:	77 fd       	sbrc	r23, 7
     b74:	80 95       	com	r24
     b76:	98 2f       	mov	r25, r24
     b78:	0e 5f       	subi	r16, 0xFE	; 254
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	2f 76       	andi	r18, 0x6F	; 111
     b7e:	b2 2e       	mov	r11, r18
     b80:	97 ff       	sbrs	r25, 7
     b82:	09 c0       	rjmp	.+18     	; 0xb96 <vfprintf+0x216>
     b84:	90 95       	com	r25
     b86:	80 95       	com	r24
     b88:	70 95       	com	r23
     b8a:	61 95       	neg	r22
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	8f 4f       	sbci	r24, 0xFF	; 255
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	20 68       	ori	r18, 0x80	; 128
     b94:	b2 2e       	mov	r11, r18
     b96:	2a e0       	ldi	r18, 0x0A	; 10
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	a4 01       	movw	r20, r8
     b9c:	6f d2       	rcall	.+1246   	; 0x107c <__ultoa_invert>
     b9e:	a8 2e       	mov	r10, r24
     ba0:	a8 18       	sub	r10, r8
     ba2:	43 c0       	rjmp	.+134    	; 0xc2a <vfprintf+0x2aa>
     ba4:	85 37       	cpi	r24, 0x75	; 117
     ba6:	29 f4       	brne	.+10     	; 0xbb2 <vfprintf+0x232>
     ba8:	2f 7e       	andi	r18, 0xEF	; 239
     baa:	b2 2e       	mov	r11, r18
     bac:	2a e0       	ldi	r18, 0x0A	; 10
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	25 c0       	rjmp	.+74     	; 0xbfc <vfprintf+0x27c>
     bb2:	f2 2f       	mov	r31, r18
     bb4:	f9 7f       	andi	r31, 0xF9	; 249
     bb6:	bf 2e       	mov	r11, r31
     bb8:	8f 36       	cpi	r24, 0x6F	; 111
     bba:	c1 f0       	breq	.+48     	; 0xbec <vfprintf+0x26c>
     bbc:	18 f4       	brcc	.+6      	; 0xbc4 <vfprintf+0x244>
     bbe:	88 35       	cpi	r24, 0x58	; 88
     bc0:	79 f0       	breq	.+30     	; 0xbe0 <vfprintf+0x260>
     bc2:	ad c0       	rjmp	.+346    	; 0xd1e <vfprintf+0x39e>
     bc4:	80 37       	cpi	r24, 0x70	; 112
     bc6:	19 f0       	breq	.+6      	; 0xbce <vfprintf+0x24e>
     bc8:	88 37       	cpi	r24, 0x78	; 120
     bca:	21 f0       	breq	.+8      	; 0xbd4 <vfprintf+0x254>
     bcc:	a8 c0       	rjmp	.+336    	; 0xd1e <vfprintf+0x39e>
     bce:	2f 2f       	mov	r18, r31
     bd0:	20 61       	ori	r18, 0x10	; 16
     bd2:	b2 2e       	mov	r11, r18
     bd4:	b4 fe       	sbrs	r11, 4
     bd6:	0d c0       	rjmp	.+26     	; 0xbf2 <vfprintf+0x272>
     bd8:	8b 2d       	mov	r24, r11
     bda:	84 60       	ori	r24, 0x04	; 4
     bdc:	b8 2e       	mov	r11, r24
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <vfprintf+0x272>
     be0:	24 ff       	sbrs	r18, 4
     be2:	0a c0       	rjmp	.+20     	; 0xbf8 <vfprintf+0x278>
     be4:	9f 2f       	mov	r25, r31
     be6:	96 60       	ori	r25, 0x06	; 6
     be8:	b9 2e       	mov	r11, r25
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <vfprintf+0x278>
     bec:	28 e0       	ldi	r18, 0x08	; 8
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <vfprintf+0x27c>
     bf2:	20 e1       	ldi	r18, 0x10	; 16
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0x27c>
     bf8:	20 e1       	ldi	r18, 0x10	; 16
     bfa:	32 e0       	ldi	r19, 0x02	; 2
     bfc:	f8 01       	movw	r30, r16
     bfe:	b7 fe       	sbrs	r11, 7
     c00:	07 c0       	rjmp	.+14     	; 0xc10 <vfprintf+0x290>
     c02:	60 81       	ld	r22, Z
     c04:	71 81       	ldd	r23, Z+1	; 0x01
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	93 81       	ldd	r25, Z+3	; 0x03
     c0a:	0c 5f       	subi	r16, 0xFC	; 252
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	06 c0       	rjmp	.+12     	; 0xc1c <vfprintf+0x29c>
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 5f       	subi	r16, 0xFE	; 254
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	a4 01       	movw	r20, r8
     c1e:	2e d2       	rcall	.+1116   	; 0x107c <__ultoa_invert>
     c20:	a8 2e       	mov	r10, r24
     c22:	a8 18       	sub	r10, r8
     c24:	fb 2d       	mov	r31, r11
     c26:	ff 77       	andi	r31, 0x7F	; 127
     c28:	bf 2e       	mov	r11, r31
     c2a:	b6 fe       	sbrs	r11, 6
     c2c:	0b c0       	rjmp	.+22     	; 0xc44 <vfprintf+0x2c4>
     c2e:	2b 2d       	mov	r18, r11
     c30:	2e 7f       	andi	r18, 0xFE	; 254
     c32:	a5 14       	cp	r10, r5
     c34:	50 f4       	brcc	.+20     	; 0xc4a <vfprintf+0x2ca>
     c36:	b4 fe       	sbrs	r11, 4
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <vfprintf+0x2ce>
     c3a:	b2 fc       	sbrc	r11, 2
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <vfprintf+0x2ce>
     c3e:	2b 2d       	mov	r18, r11
     c40:	2e 7e       	andi	r18, 0xEE	; 238
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <vfprintf+0x2ce>
     c44:	7a 2c       	mov	r7, r10
     c46:	2b 2d       	mov	r18, r11
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x2d0>
     c4a:	7a 2c       	mov	r7, r10
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <vfprintf+0x2d0>
     c4e:	75 2c       	mov	r7, r5
     c50:	24 ff       	sbrs	r18, 4
     c52:	0d c0       	rjmp	.+26     	; 0xc6e <vfprintf+0x2ee>
     c54:	fe 01       	movw	r30, r28
     c56:	ea 0d       	add	r30, r10
     c58:	f1 1d       	adc	r31, r1
     c5a:	80 81       	ld	r24, Z
     c5c:	80 33       	cpi	r24, 0x30	; 48
     c5e:	11 f4       	brne	.+4      	; 0xc64 <vfprintf+0x2e4>
     c60:	29 7e       	andi	r18, 0xE9	; 233
     c62:	09 c0       	rjmp	.+18     	; 0xc76 <vfprintf+0x2f6>
     c64:	22 ff       	sbrs	r18, 2
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <vfprintf+0x2f4>
     c68:	73 94       	inc	r7
     c6a:	73 94       	inc	r7
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <vfprintf+0x2f6>
     c6e:	82 2f       	mov	r24, r18
     c70:	86 78       	andi	r24, 0x86	; 134
     c72:	09 f0       	breq	.+2      	; 0xc76 <vfprintf+0x2f6>
     c74:	73 94       	inc	r7
     c76:	23 fd       	sbrc	r18, 3
     c78:	12 c0       	rjmp	.+36     	; 0xc9e <vfprintf+0x31e>
     c7a:	20 ff       	sbrs	r18, 0
     c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0x30a>
     c7e:	5a 2c       	mov	r5, r10
     c80:	73 14       	cp	r7, r3
     c82:	18 f4       	brcc	.+6      	; 0xc8a <vfprintf+0x30a>
     c84:	53 0c       	add	r5, r3
     c86:	57 18       	sub	r5, r7
     c88:	73 2c       	mov	r7, r3
     c8a:	73 14       	cp	r7, r3
     c8c:	60 f4       	brcc	.+24     	; 0xca6 <vfprintf+0x326>
     c8e:	b7 01       	movw	r22, r14
     c90:	80 e2       	ldi	r24, 0x20	; 32
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	2c 87       	std	Y+12, r18	; 0x0c
     c96:	c0 d1       	rcall	.+896    	; 0x1018 <fputc>
     c98:	73 94       	inc	r7
     c9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     c9c:	f6 cf       	rjmp	.-20     	; 0xc8a <vfprintf+0x30a>
     c9e:	73 14       	cp	r7, r3
     ca0:	10 f4       	brcc	.+4      	; 0xca6 <vfprintf+0x326>
     ca2:	37 18       	sub	r3, r7
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <vfprintf+0x328>
     ca6:	31 2c       	mov	r3, r1
     ca8:	24 ff       	sbrs	r18, 4
     caa:	11 c0       	rjmp	.+34     	; 0xcce <vfprintf+0x34e>
     cac:	b7 01       	movw	r22, r14
     cae:	80 e3       	ldi	r24, 0x30	; 48
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	2c 87       	std	Y+12, r18	; 0x0c
     cb4:	b1 d1       	rcall	.+866    	; 0x1018 <fputc>
     cb6:	2c 85       	ldd	r18, Y+12	; 0x0c
     cb8:	22 ff       	sbrs	r18, 2
     cba:	16 c0       	rjmp	.+44     	; 0xce8 <vfprintf+0x368>
     cbc:	21 ff       	sbrs	r18, 1
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vfprintf+0x346>
     cc0:	88 e5       	ldi	r24, 0x58	; 88
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x34a>
     cc6:	88 e7       	ldi	r24, 0x78	; 120
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	b7 01       	movw	r22, r14
     ccc:	0c c0       	rjmp	.+24     	; 0xce6 <vfprintf+0x366>
     cce:	82 2f       	mov	r24, r18
     cd0:	86 78       	andi	r24, 0x86	; 134
     cd2:	51 f0       	breq	.+20     	; 0xce8 <vfprintf+0x368>
     cd4:	21 fd       	sbrc	r18, 1
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <vfprintf+0x35c>
     cd8:	80 e2       	ldi	r24, 0x20	; 32
     cda:	01 c0       	rjmp	.+2      	; 0xcde <vfprintf+0x35e>
     cdc:	8b e2       	ldi	r24, 0x2B	; 43
     cde:	27 fd       	sbrc	r18, 7
     ce0:	8d e2       	ldi	r24, 0x2D	; 45
     ce2:	b7 01       	movw	r22, r14
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	98 d1       	rcall	.+816    	; 0x1018 <fputc>
     ce8:	a5 14       	cp	r10, r5
     cea:	30 f4       	brcc	.+12     	; 0xcf8 <vfprintf+0x378>
     cec:	b7 01       	movw	r22, r14
     cee:	80 e3       	ldi	r24, 0x30	; 48
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	92 d1       	rcall	.+804    	; 0x1018 <fputc>
     cf4:	5a 94       	dec	r5
     cf6:	f8 cf       	rjmp	.-16     	; 0xce8 <vfprintf+0x368>
     cf8:	aa 94       	dec	r10
     cfa:	f4 01       	movw	r30, r8
     cfc:	ea 0d       	add	r30, r10
     cfe:	f1 1d       	adc	r31, r1
     d00:	80 81       	ld	r24, Z
     d02:	b7 01       	movw	r22, r14
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	88 d1       	rcall	.+784    	; 0x1018 <fputc>
     d08:	a1 10       	cpse	r10, r1
     d0a:	f6 cf       	rjmp	.-20     	; 0xcf8 <vfprintf+0x378>
     d0c:	33 20       	and	r3, r3
     d0e:	09 f4       	brne	.+2      	; 0xd12 <vfprintf+0x392>
     d10:	5d ce       	rjmp	.-838    	; 0x9cc <vfprintf+0x4c>
     d12:	b7 01       	movw	r22, r14
     d14:	80 e2       	ldi	r24, 0x20	; 32
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	7f d1       	rcall	.+766    	; 0x1018 <fputc>
     d1a:	3a 94       	dec	r3
     d1c:	f7 cf       	rjmp	.-18     	; 0xd0c <vfprintf+0x38c>
     d1e:	f7 01       	movw	r30, r14
     d20:	86 81       	ldd	r24, Z+6	; 0x06
     d22:	97 81       	ldd	r25, Z+7	; 0x07
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x3aa>
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	9f ef       	ldi	r25, 0xFF	; 255
     d2a:	2c 96       	adiw	r28, 0x0c	; 12
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	bf 90       	pop	r11
     d48:	af 90       	pop	r10
     d4a:	9f 90       	pop	r9
     d4c:	8f 90       	pop	r8
     d4e:	7f 90       	pop	r7
     d50:	6f 90       	pop	r6
     d52:	5f 90       	pop	r5
     d54:	4f 90       	pop	r4
     d56:	3f 90       	pop	r3
     d58:	2f 90       	pop	r2
     d5a:	08 95       	ret

00000d5c <calloc>:
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	86 9f       	mul	r24, r22
     d66:	80 01       	movw	r16, r0
     d68:	87 9f       	mul	r24, r23
     d6a:	10 0d       	add	r17, r0
     d6c:	96 9f       	mul	r25, r22
     d6e:	10 0d       	add	r17, r0
     d70:	11 24       	eor	r1, r1
     d72:	c8 01       	movw	r24, r16
     d74:	0d d0       	rcall	.+26     	; 0xd90 <malloc>
     d76:	ec 01       	movw	r28, r24
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	21 f0       	breq	.+8      	; 0xd84 <calloc+0x28>
     d7c:	a8 01       	movw	r20, r16
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	38 d1       	rcall	.+624    	; 0xff4 <memset>
     d84:	ce 01       	movw	r24, r28
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	08 95       	ret

00000d90 <malloc>:
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	91 05       	cpc	r25, r1
     d98:	10 f4       	brcc	.+4      	; 0xd9e <malloc+0xe>
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	e0 91 a0 02 	lds	r30, 0x02A0
     da2:	f0 91 a1 02 	lds	r31, 0x02A1
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	39 f1       	breq	.+78     	; 0xe00 <malloc+0x70>
     db2:	40 81       	ld	r20, Z
     db4:	51 81       	ldd	r21, Z+1	; 0x01
     db6:	48 17       	cp	r20, r24
     db8:	59 07       	cpc	r21, r25
     dba:	b8 f0       	brcs	.+46     	; 0xdea <malloc+0x5a>
     dbc:	48 17       	cp	r20, r24
     dbe:	59 07       	cpc	r21, r25
     dc0:	71 f4       	brne	.+28     	; 0xdde <malloc+0x4e>
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	10 97       	sbiw	r26, 0x00	; 0
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <malloc+0x44>
     dca:	13 96       	adiw	r26, 0x03	; 3
     dcc:	9c 93       	st	X, r25
     dce:	8e 93       	st	-X, r24
     dd0:	12 97       	sbiw	r26, 0x02	; 2
     dd2:	2c c0       	rjmp	.+88     	; 0xe2c <malloc+0x9c>
     dd4:	90 93 a1 02 	sts	0x02A1, r25
     dd8:	80 93 a0 02 	sts	0x02A0, r24
     ddc:	27 c0       	rjmp	.+78     	; 0xe2c <malloc+0x9c>
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	31 f0       	breq	.+12     	; 0xdf0 <malloc+0x60>
     de4:	42 17       	cp	r20, r18
     de6:	53 07       	cpc	r21, r19
     de8:	18 f0       	brcs	.+6      	; 0xdf0 <malloc+0x60>
     dea:	a9 01       	movw	r20, r18
     dec:	db 01       	movw	r26, r22
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <malloc+0x62>
     df0:	ef 01       	movw	r28, r30
     df2:	9a 01       	movw	r18, r20
     df4:	bd 01       	movw	r22, r26
     df6:	df 01       	movw	r26, r30
     df8:	02 80       	ldd	r0, Z+2	; 0x02
     dfa:	f3 81       	ldd	r31, Z+3	; 0x03
     dfc:	e0 2d       	mov	r30, r0
     dfe:	d7 cf       	rjmp	.-82     	; 0xdae <malloc+0x1e>
     e00:	21 15       	cp	r18, r1
     e02:	31 05       	cpc	r19, r1
     e04:	f9 f0       	breq	.+62     	; 0xe44 <malloc+0xb4>
     e06:	28 1b       	sub	r18, r24
     e08:	39 0b       	sbc	r19, r25
     e0a:	24 30       	cpi	r18, 0x04	; 4
     e0c:	31 05       	cpc	r19, r1
     e0e:	80 f4       	brcc	.+32     	; 0xe30 <malloc+0xa0>
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	61 15       	cp	r22, r1
     e16:	71 05       	cpc	r23, r1
     e18:	21 f0       	breq	.+8      	; 0xe22 <malloc+0x92>
     e1a:	fb 01       	movw	r30, r22
     e1c:	93 83       	std	Z+3, r25	; 0x03
     e1e:	82 83       	std	Z+2, r24	; 0x02
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <malloc+0x9a>
     e22:	90 93 a1 02 	sts	0x02A1, r25
     e26:	80 93 a0 02 	sts	0x02A0, r24
     e2a:	fe 01       	movw	r30, r28
     e2c:	32 96       	adiw	r30, 0x02	; 2
     e2e:	44 c0       	rjmp	.+136    	; 0xeb8 <malloc+0x128>
     e30:	fe 01       	movw	r30, r28
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	81 93       	st	Z+, r24
     e38:	91 93       	st	Z+, r25
     e3a:	22 50       	subi	r18, 0x02	; 2
     e3c:	31 09       	sbc	r19, r1
     e3e:	39 83       	std	Y+1, r19	; 0x01
     e40:	28 83       	st	Y, r18
     e42:	3a c0       	rjmp	.+116    	; 0xeb8 <malloc+0x128>
     e44:	20 91 9e 02 	lds	r18, 0x029E
     e48:	30 91 9f 02 	lds	r19, 0x029F
     e4c:	23 2b       	or	r18, r19
     e4e:	41 f4       	brne	.+16     	; 0xe60 <malloc+0xd0>
     e50:	20 91 02 02 	lds	r18, 0x0202
     e54:	30 91 03 02 	lds	r19, 0x0203
     e58:	30 93 9f 02 	sts	0x029F, r19
     e5c:	20 93 9e 02 	sts	0x029E, r18
     e60:	20 91 00 02 	lds	r18, 0x0200
     e64:	30 91 01 02 	lds	r19, 0x0201
     e68:	21 15       	cp	r18, r1
     e6a:	31 05       	cpc	r19, r1
     e6c:	41 f4       	brne	.+16     	; 0xe7e <malloc+0xee>
     e6e:	2d b7       	in	r18, 0x3d	; 61
     e70:	3e b7       	in	r19, 0x3e	; 62
     e72:	40 91 04 02 	lds	r20, 0x0204
     e76:	50 91 05 02 	lds	r21, 0x0205
     e7a:	24 1b       	sub	r18, r20
     e7c:	35 0b       	sbc	r19, r21
     e7e:	e0 91 9e 02 	lds	r30, 0x029E
     e82:	f0 91 9f 02 	lds	r31, 0x029F
     e86:	e2 17       	cp	r30, r18
     e88:	f3 07       	cpc	r31, r19
     e8a:	a0 f4       	brcc	.+40     	; 0xeb4 <malloc+0x124>
     e8c:	2e 1b       	sub	r18, r30
     e8e:	3f 0b       	sbc	r19, r31
     e90:	28 17       	cp	r18, r24
     e92:	39 07       	cpc	r19, r25
     e94:	78 f0       	brcs	.+30     	; 0xeb4 <malloc+0x124>
     e96:	ac 01       	movw	r20, r24
     e98:	4e 5f       	subi	r20, 0xFE	; 254
     e9a:	5f 4f       	sbci	r21, 0xFF	; 255
     e9c:	24 17       	cp	r18, r20
     e9e:	35 07       	cpc	r19, r21
     ea0:	48 f0       	brcs	.+18     	; 0xeb4 <malloc+0x124>
     ea2:	4e 0f       	add	r20, r30
     ea4:	5f 1f       	adc	r21, r31
     ea6:	50 93 9f 02 	sts	0x029F, r21
     eaa:	40 93 9e 02 	sts	0x029E, r20
     eae:	81 93       	st	Z+, r24
     eb0:	91 93       	st	Z+, r25
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <malloc+0x128>
     eb4:	e0 e0       	ldi	r30, 0x00	; 0
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	cf 01       	movw	r24, r30
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <free>:
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	09 f4       	brne	.+2      	; 0xeca <free+0xa>
     ec8:	87 c0       	rjmp	.+270    	; 0xfd8 <free+0x118>
     eca:	fc 01       	movw	r30, r24
     ecc:	32 97       	sbiw	r30, 0x02	; 2
     ece:	13 82       	std	Z+3, r1	; 0x03
     ed0:	12 82       	std	Z+2, r1	; 0x02
     ed2:	c0 91 a0 02 	lds	r28, 0x02A0
     ed6:	d0 91 a1 02 	lds	r29, 0x02A1
     eda:	20 97       	sbiw	r28, 0x00	; 0
     edc:	81 f4       	brne	.+32     	; 0xefe <free+0x3e>
     ede:	20 81       	ld	r18, Z
     ee0:	31 81       	ldd	r19, Z+1	; 0x01
     ee2:	28 0f       	add	r18, r24
     ee4:	39 1f       	adc	r19, r25
     ee6:	80 91 9e 02 	lds	r24, 0x029E
     eea:	90 91 9f 02 	lds	r25, 0x029F
     eee:	82 17       	cp	r24, r18
     ef0:	93 07       	cpc	r25, r19
     ef2:	79 f5       	brne	.+94     	; 0xf52 <free+0x92>
     ef4:	f0 93 9f 02 	sts	0x029F, r31
     ef8:	e0 93 9e 02 	sts	0x029E, r30
     efc:	6d c0       	rjmp	.+218    	; 0xfd8 <free+0x118>
     efe:	de 01       	movw	r26, r28
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	ae 17       	cp	r26, r30
     f06:	bf 07       	cpc	r27, r31
     f08:	50 f4       	brcc	.+20     	; 0xf1e <free+0x5e>
     f0a:	12 96       	adiw	r26, 0x02	; 2
     f0c:	4d 91       	ld	r20, X+
     f0e:	5c 91       	ld	r21, X
     f10:	13 97       	sbiw	r26, 0x03	; 3
     f12:	9d 01       	movw	r18, r26
     f14:	41 15       	cp	r20, r1
     f16:	51 05       	cpc	r21, r1
     f18:	09 f1       	breq	.+66     	; 0xf5c <free+0x9c>
     f1a:	da 01       	movw	r26, r20
     f1c:	f3 cf       	rjmp	.-26     	; 0xf04 <free+0x44>
     f1e:	b3 83       	std	Z+3, r27	; 0x03
     f20:	a2 83       	std	Z+2, r26	; 0x02
     f22:	40 81       	ld	r20, Z
     f24:	51 81       	ldd	r21, Z+1	; 0x01
     f26:	84 0f       	add	r24, r20
     f28:	95 1f       	adc	r25, r21
     f2a:	8a 17       	cp	r24, r26
     f2c:	9b 07       	cpc	r25, r27
     f2e:	71 f4       	brne	.+28     	; 0xf4c <free+0x8c>
     f30:	8d 91       	ld	r24, X+
     f32:	9c 91       	ld	r25, X
     f34:	11 97       	sbiw	r26, 0x01	; 1
     f36:	84 0f       	add	r24, r20
     f38:	95 1f       	adc	r25, r21
     f3a:	02 96       	adiw	r24, 0x02	; 2
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	80 83       	st	Z, r24
     f40:	12 96       	adiw	r26, 0x02	; 2
     f42:	8d 91       	ld	r24, X+
     f44:	9c 91       	ld	r25, X
     f46:	13 97       	sbiw	r26, 0x03	; 3
     f48:	93 83       	std	Z+3, r25	; 0x03
     f4a:	82 83       	std	Z+2, r24	; 0x02
     f4c:	21 15       	cp	r18, r1
     f4e:	31 05       	cpc	r19, r1
     f50:	29 f4       	brne	.+10     	; 0xf5c <free+0x9c>
     f52:	f0 93 a1 02 	sts	0x02A1, r31
     f56:	e0 93 a0 02 	sts	0x02A0, r30
     f5a:	3e c0       	rjmp	.+124    	; 0xfd8 <free+0x118>
     f5c:	d9 01       	movw	r26, r18
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	fc 93       	st	X, r31
     f62:	ee 93       	st	-X, r30
     f64:	12 97       	sbiw	r26, 0x02	; 2
     f66:	4d 91       	ld	r20, X+
     f68:	5d 91       	ld	r21, X+
     f6a:	a4 0f       	add	r26, r20
     f6c:	b5 1f       	adc	r27, r21
     f6e:	ea 17       	cp	r30, r26
     f70:	fb 07       	cpc	r31, r27
     f72:	79 f4       	brne	.+30     	; 0xf92 <free+0xd2>
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	84 0f       	add	r24, r20
     f7a:	95 1f       	adc	r25, r21
     f7c:	02 96       	adiw	r24, 0x02	; 2
     f7e:	d9 01       	movw	r26, r18
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	9c 93       	st	X, r25
     f84:	8e 93       	st	-X, r24
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	13 96       	adiw	r26, 0x03	; 3
     f8c:	9c 93       	st	X, r25
     f8e:	8e 93       	st	-X, r24
     f90:	12 97       	sbiw	r26, 0x02	; 2
     f92:	e0 e0       	ldi	r30, 0x00	; 0
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <free+0xe4>
     f9e:	fe 01       	movw	r30, r28
     fa0:	ec 01       	movw	r28, r24
     fa2:	f9 cf       	rjmp	.-14     	; 0xf96 <free+0xd6>
     fa4:	ce 01       	movw	r24, r28
     fa6:	02 96       	adiw	r24, 0x02	; 2
     fa8:	28 81       	ld	r18, Y
     faa:	39 81       	ldd	r19, Y+1	; 0x01
     fac:	82 0f       	add	r24, r18
     fae:	93 1f       	adc	r25, r19
     fb0:	20 91 9e 02 	lds	r18, 0x029E
     fb4:	30 91 9f 02 	lds	r19, 0x029F
     fb8:	28 17       	cp	r18, r24
     fba:	39 07       	cpc	r19, r25
     fbc:	69 f4       	brne	.+26     	; 0xfd8 <free+0x118>
     fbe:	30 97       	sbiw	r30, 0x00	; 0
     fc0:	29 f4       	brne	.+10     	; 0xfcc <free+0x10c>
     fc2:	10 92 a1 02 	sts	0x02A1, r1
     fc6:	10 92 a0 02 	sts	0x02A0, r1
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <free+0x110>
     fcc:	13 82       	std	Z+3, r1	; 0x03
     fce:	12 82       	std	Z+2, r1	; 0x02
     fd0:	d0 93 9f 02 	sts	0x029F, r29
     fd4:	c0 93 9e 02 	sts	0x029E, r28
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <strnlen_P>:
     fde:	fc 01       	movw	r30, r24
     fe0:	05 90       	lpm	r0, Z+
     fe2:	61 50       	subi	r22, 0x01	; 1
     fe4:	70 40       	sbci	r23, 0x00	; 0
     fe6:	01 10       	cpse	r0, r1
     fe8:	d8 f7       	brcc	.-10     	; 0xfe0 <strnlen_P+0x2>
     fea:	80 95       	com	r24
     fec:	90 95       	com	r25
     fee:	8e 0f       	add	r24, r30
     ff0:	9f 1f       	adc	r25, r31
     ff2:	08 95       	ret

00000ff4 <memset>:
     ff4:	dc 01       	movw	r26, r24
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <memset+0x6>
     ff8:	6d 93       	st	X+, r22
     ffa:	41 50       	subi	r20, 0x01	; 1
     ffc:	50 40       	sbci	r21, 0x00	; 0
     ffe:	e0 f7       	brcc	.-8      	; 0xff8 <memset+0x4>
    1000:	08 95       	ret

00001002 <strnlen>:
    1002:	fc 01       	movw	r30, r24
    1004:	61 50       	subi	r22, 0x01	; 1
    1006:	70 40       	sbci	r23, 0x00	; 0
    1008:	01 90       	ld	r0, Z+
    100a:	01 10       	cpse	r0, r1
    100c:	d8 f7       	brcc	.-10     	; 0x1004 <strnlen+0x2>
    100e:	80 95       	com	r24
    1010:	90 95       	com	r25
    1012:	8e 0f       	add	r24, r30
    1014:	9f 1f       	adc	r25, r31
    1016:	08 95       	ret

00001018 <fputc>:
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	18 2f       	mov	r17, r24
    1022:	09 2f       	mov	r16, r25
    1024:	eb 01       	movw	r28, r22
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	81 fd       	sbrc	r24, 1
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <fputc+0x1a>
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	9f ef       	ldi	r25, 0xFF	; 255
    1030:	20 c0       	rjmp	.+64     	; 0x1072 <fputc+0x5a>
    1032:	82 ff       	sbrs	r24, 2
    1034:	10 c0       	rjmp	.+32     	; 0x1056 <fputc+0x3e>
    1036:	4e 81       	ldd	r20, Y+6	; 0x06
    1038:	5f 81       	ldd	r21, Y+7	; 0x07
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	42 17       	cp	r20, r18
    1040:	53 07       	cpc	r21, r19
    1042:	7c f4       	brge	.+30     	; 0x1062 <fputc+0x4a>
    1044:	e8 81       	ld	r30, Y
    1046:	f9 81       	ldd	r31, Y+1	; 0x01
    1048:	9f 01       	movw	r18, r30
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	39 83       	std	Y+1, r19	; 0x01
    1050:	28 83       	st	Y, r18
    1052:	10 83       	st	Z, r17
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <fputc+0x4a>
    1056:	e8 85       	ldd	r30, Y+8	; 0x08
    1058:	f9 85       	ldd	r31, Y+9	; 0x09
    105a:	81 2f       	mov	r24, r17
    105c:	19 95       	eicall
    105e:	89 2b       	or	r24, r25
    1060:	29 f7       	brne	.-54     	; 0x102c <fputc+0x14>
    1062:	2e 81       	ldd	r18, Y+6	; 0x06
    1064:	3f 81       	ldd	r19, Y+7	; 0x07
    1066:	2f 5f       	subi	r18, 0xFF	; 255
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	3f 83       	std	Y+7, r19	; 0x07
    106c:	2e 83       	std	Y+6, r18	; 0x06
    106e:	81 2f       	mov	r24, r17
    1070:	90 2f       	mov	r25, r16
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <__ultoa_invert>:
    107c:	fa 01       	movw	r30, r20
    107e:	aa 27       	eor	r26, r26
    1080:	28 30       	cpi	r18, 0x08	; 8
    1082:	51 f1       	breq	.+84     	; 0x10d8 <__ultoa_invert+0x5c>
    1084:	20 31       	cpi	r18, 0x10	; 16
    1086:	81 f1       	breq	.+96     	; 0x10e8 <__ultoa_invert+0x6c>
    1088:	e8 94       	clt
    108a:	6f 93       	push	r22
    108c:	6e 7f       	andi	r22, 0xFE	; 254
    108e:	6e 5f       	subi	r22, 0xFE	; 254
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	8f 4f       	sbci	r24, 0xFF	; 255
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	af 4f       	sbci	r26, 0xFF	; 255
    1098:	b1 e0       	ldi	r27, 0x01	; 1
    109a:	3e d0       	rcall	.+124    	; 0x1118 <__ultoa_invert+0x9c>
    109c:	b4 e0       	ldi	r27, 0x04	; 4
    109e:	3c d0       	rcall	.+120    	; 0x1118 <__ultoa_invert+0x9c>
    10a0:	67 0f       	add	r22, r23
    10a2:	78 1f       	adc	r23, r24
    10a4:	89 1f       	adc	r24, r25
    10a6:	9a 1f       	adc	r25, r26
    10a8:	a1 1d       	adc	r26, r1
    10aa:	68 0f       	add	r22, r24
    10ac:	79 1f       	adc	r23, r25
    10ae:	8a 1f       	adc	r24, r26
    10b0:	91 1d       	adc	r25, r1
    10b2:	a1 1d       	adc	r26, r1
    10b4:	6a 0f       	add	r22, r26
    10b6:	71 1d       	adc	r23, r1
    10b8:	81 1d       	adc	r24, r1
    10ba:	91 1d       	adc	r25, r1
    10bc:	a1 1d       	adc	r26, r1
    10be:	20 d0       	rcall	.+64     	; 0x1100 <__ultoa_invert+0x84>
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <__ultoa_invert+0x48>
    10c2:	68 94       	set
    10c4:	3f 91       	pop	r19
    10c6:	2a e0       	ldi	r18, 0x0A	; 10
    10c8:	26 9f       	mul	r18, r22
    10ca:	11 24       	eor	r1, r1
    10cc:	30 19       	sub	r19, r0
    10ce:	30 5d       	subi	r19, 0xD0	; 208
    10d0:	31 93       	st	Z+, r19
    10d2:	de f6       	brtc	.-74     	; 0x108a <__ultoa_invert+0xe>
    10d4:	cf 01       	movw	r24, r30
    10d6:	08 95       	ret
    10d8:	46 2f       	mov	r20, r22
    10da:	47 70       	andi	r20, 0x07	; 7
    10dc:	40 5d       	subi	r20, 0xD0	; 208
    10de:	41 93       	st	Z+, r20
    10e0:	b3 e0       	ldi	r27, 0x03	; 3
    10e2:	0f d0       	rcall	.+30     	; 0x1102 <__ultoa_invert+0x86>
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <__ultoa_invert+0x5c>
    10e6:	f6 cf       	rjmp	.-20     	; 0x10d4 <__ultoa_invert+0x58>
    10e8:	46 2f       	mov	r20, r22
    10ea:	4f 70       	andi	r20, 0x0F	; 15
    10ec:	40 5d       	subi	r20, 0xD0	; 208
    10ee:	4a 33       	cpi	r20, 0x3A	; 58
    10f0:	18 f0       	brcs	.+6      	; 0x10f8 <__ultoa_invert+0x7c>
    10f2:	49 5d       	subi	r20, 0xD9	; 217
    10f4:	31 fd       	sbrc	r19, 1
    10f6:	40 52       	subi	r20, 0x20	; 32
    10f8:	41 93       	st	Z+, r20
    10fa:	02 d0       	rcall	.+4      	; 0x1100 <__ultoa_invert+0x84>
    10fc:	a9 f7       	brne	.-22     	; 0x10e8 <__ultoa_invert+0x6c>
    10fe:	ea cf       	rjmp	.-44     	; 0x10d4 <__ultoa_invert+0x58>
    1100:	b4 e0       	ldi	r27, 0x04	; 4
    1102:	a6 95       	lsr	r26
    1104:	97 95       	ror	r25
    1106:	87 95       	ror	r24
    1108:	77 95       	ror	r23
    110a:	67 95       	ror	r22
    110c:	ba 95       	dec	r27
    110e:	c9 f7       	brne	.-14     	; 0x1102 <__ultoa_invert+0x86>
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	61 05       	cpc	r22, r1
    1114:	71 05       	cpc	r23, r1
    1116:	08 95       	ret
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	0a 2e       	mov	r0, r26
    111e:	06 94       	lsr	r0
    1120:	57 95       	ror	r21
    1122:	47 95       	ror	r20
    1124:	37 95       	ror	r19
    1126:	27 95       	ror	r18
    1128:	ba 95       	dec	r27
    112a:	c9 f7       	brne	.-14     	; 0x111e <__ultoa_invert+0xa2>
    112c:	62 0f       	add	r22, r18
    112e:	73 1f       	adc	r23, r19
    1130:	84 1f       	adc	r24, r20
    1132:	95 1f       	adc	r25, r21
    1134:	a0 1d       	adc	r26, r0
    1136:	08 95       	ret

00001138 <_exit>:
    1138:	f8 94       	cli

0000113a <__stop_program>:
    113a:	ff cf       	rjmp	.-2      	; 0x113a <__stop_program>
