
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800200  0000137a  0000140e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800296  00800296  000014a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d91  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dde  00000000  00000000  00003509  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012b2  00000000  00000000  000042e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000564  00000000  00000000  0000559c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e9  00000000  00000000  00005b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d1c  00000000  00000000  000060e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00006e05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c4       	rjmp	.+2210   	; 0x940 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bb 04       	cpc	r11, r11
      e6:	0d 05       	cpc	r16, r13
      e8:	0d 05       	cpc	r16, r13
      ea:	0d 05       	cpc	r16, r13
      ec:	0d 05       	cpc	r16, r13
      ee:	0d 05       	cpc	r16, r13
      f0:	0d 05       	cpc	r16, r13
      f2:	0d 05       	cpc	r16, r13
      f4:	bb 04       	cpc	r11, r11
      f6:	0d 05       	cpc	r16, r13
      f8:	0d 05       	cpc	r16, r13
      fa:	0d 05       	cpc	r16, r13
      fc:	0d 05       	cpc	r16, r13
      fe:	0d 05       	cpc	r16, r13
     100:	0d 05       	cpc	r16, r13
     102:	0d 05       	cpc	r16, r13
     104:	bd 04       	cpc	r11, r13
     106:	0d 05       	cpc	r16, r13
     108:	0d 05       	cpc	r16, r13
     10a:	0d 05       	cpc	r16, r13
     10c:	0d 05       	cpc	r16, r13
     10e:	0d 05       	cpc	r16, r13
     110:	0d 05       	cpc	r16, r13
     112:	0d 05       	cpc	r16, r13
     114:	0d 05       	cpc	r16, r13
     116:	0d 05       	cpc	r16, r13
     118:	0d 05       	cpc	r16, r13
     11a:	0d 05       	cpc	r16, r13
     11c:	0d 05       	cpc	r16, r13
     11e:	0d 05       	cpc	r16, r13
     120:	0d 05       	cpc	r16, r13
     122:	0d 05       	cpc	r16, r13
     124:	bd 04       	cpc	r11, r13
     126:	0d 05       	cpc	r16, r13
     128:	0d 05       	cpc	r16, r13
     12a:	0d 05       	cpc	r16, r13
     12c:	0d 05       	cpc	r16, r13
     12e:	0d 05       	cpc	r16, r13
     130:	0d 05       	cpc	r16, r13
     132:	0d 05       	cpc	r16, r13
     134:	0d 05       	cpc	r16, r13
     136:	0d 05       	cpc	r16, r13
     138:	0d 05       	cpc	r16, r13
     13a:	0d 05       	cpc	r16, r13
     13c:	0d 05       	cpc	r16, r13
     13e:	0d 05       	cpc	r16, r13
     140:	0d 05       	cpc	r16, r13
     142:	0d 05       	cpc	r16, r13
     144:	09 05       	cpc	r16, r9
     146:	0d 05       	cpc	r16, r13
     148:	0d 05       	cpc	r16, r13
     14a:	0d 05       	cpc	r16, r13
     14c:	0d 05       	cpc	r16, r13
     14e:	0d 05       	cpc	r16, r13
     150:	0d 05       	cpc	r16, r13
     152:	0d 05       	cpc	r16, r13
     154:	e6 04       	cpc	r14, r6
     156:	0d 05       	cpc	r16, r13
     158:	0d 05       	cpc	r16, r13
     15a:	0d 05       	cpc	r16, r13
     15c:	0d 05       	cpc	r16, r13
     15e:	0d 05       	cpc	r16, r13
     160:	0d 05       	cpc	r16, r13
     162:	0d 05       	cpc	r16, r13
     164:	0d 05       	cpc	r16, r13
     166:	0d 05       	cpc	r16, r13
     168:	0d 05       	cpc	r16, r13
     16a:	0d 05       	cpc	r16, r13
     16c:	0d 05       	cpc	r16, r13
     16e:	0d 05       	cpc	r16, r13
     170:	0d 05       	cpc	r16, r13
     172:	0d 05       	cpc	r16, r13
     174:	da 04       	cpc	r13, r10
     176:	0d 05       	cpc	r16, r13
     178:	0d 05       	cpc	r16, r13
     17a:	0d 05       	cpc	r16, r13
     17c:	0d 05       	cpc	r16, r13
     17e:	0d 05       	cpc	r16, r13
     180:	0d 05       	cpc	r16, r13
     182:	0d 05       	cpc	r16, r13
     184:	f8 04       	cpc	r15, r8

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ea e7       	ldi	r30, 0x7A	; 122
     19e:	f3 e1       	ldi	r31, 0x13	; 19
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a6 39       	cpi	r26, 0x96	; 150
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	a6 e9       	ldi	r26, 0x96	; 150
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a8 3a       	cpi	r26, 0xA8	; 168
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	ca d2       	rcall	.+1428   	; 0x756 <main>
     1c2:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <adc_init>:
#include <avr/io.h>
#include <stdint.h>
void adc_init(void){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	87 68       	ori	r24, 0x87	; 135
     1d0:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
     1d2:	ec e7       	ldi	r30, 0x7C	; 124
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1);
     1dc:	80 81       	ld	r24, Z
     1de:	8f 77       	andi	r24, 0x7F	; 127
     1e0:	80 83       	st	Z, r24
     1e2:	08 95       	ret

000001e4 <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	|= ((1<<channel) & 0x03);
     1e4:	ec e7       	ldi	r30, 0x7C	; 124
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	90 81       	ld	r25, Z
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <adc_read+0x10>
     1f0:	22 0f       	add	r18, r18
     1f2:	33 1f       	adc	r19, r19
     1f4:	8a 95       	dec	r24
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <adc_read+0xc>
     1f8:	23 70       	andi	r18, 0x03	; 3
     1fa:	92 2b       	or	r25, r18
     1fc:	90 83       	st	Z, r25
	ADCSRA	|= (1 << ADSC);
     1fe:	ea e7       	ldi	r30, 0x7A	; 122
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	80 64       	ori	r24, 0x40	; 64
     206:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
     208:	80 81       	ld	r24, Z
     20a:	86 fd       	sbrc	r24, 6
     20c:	fd cf       	rjmp	.-6      	; 0x208 <adc_read+0x24>

	return ADC;
     20e:	80 91 78 00 	lds	r24, 0x0078
     212:	90 91 79 00 	lds	r25, 0x0079
     216:	08 95       	ret

00000218 <can_init>:
void can_print(can_message msg){
	for(int i = 0; i < msg.length; i++){
		printf("%c", msg.data[i]);
	}
	printf("\n");
}
     218:	37 d2       	rcall	.+1134   	; 0x688 <mcp_init>
     21a:	4f ef       	ldi	r20, 0xFF	; 255
     21c:	60 e6       	ldi	r22, 0x60	; 96
     21e:	80 e6       	ldi	r24, 0x60	; 96
     220:	1b d2       	rcall	.+1078   	; 0x658 <mcp_bitModify>
     222:	4f ef       	ldi	r20, 0xFF	; 255
     224:	60 e6       	ldi	r22, 0x60	; 96
     226:	80 e7       	ldi	r24, 0x70	; 112
     228:	17 d2       	rcall	.+1070   	; 0x658 <mcp_bitModify>
     22a:	43 e0       	ldi	r20, 0x03	; 3
     22c:	63 e0       	ldi	r22, 0x03	; 3
     22e:	8e e2       	ldi	r24, 0x2E	; 46
     230:	13 d2       	rcall	.+1062   	; 0x658 <mcp_bitModify>
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	60 ee       	ldi	r22, 0xE0	; 224
     236:	8f e0       	ldi	r24, 0x0F	; 15
     238:	0f c2       	rjmp	.+1054   	; 0x658 <mcp_bitModify>
     23a:	08 95       	ret

0000023c <new_can_message>:
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	2b 97       	sbiw	r28, 0x0b	; 11
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	44 23       	and	r20, r20
     252:	61 f0       	breq	.+24     	; 0x26c <new_can_message+0x30>
     254:	a2 2f       	mov	r26, r18
     256:	b3 2f       	mov	r27, r19
     258:	fe 01       	movw	r30, r28
     25a:	34 96       	adiw	r30, 0x04	; 4
     25c:	9f 01       	movw	r18, r30
     25e:	24 0f       	add	r18, r20
     260:	31 1d       	adc	r19, r1
     262:	5d 91       	ld	r21, X+
     264:	51 93       	st	Z+, r21
     266:	e2 17       	cp	r30, r18
     268:	f3 07       	cpc	r31, r19
     26a:	d9 f7       	brne	.-10     	; 0x262 <new_can_message+0x26>
     26c:	7a 83       	std	Y+2, r23	; 0x02
     26e:	69 83       	std	Y+1, r22	; 0x01
     270:	4b 83       	std	Y+3, r20	; 0x03
     272:	2b e0       	ldi	r18, 0x0B	; 11
     274:	fe 01       	movw	r30, r28
     276:	31 96       	adiw	r30, 0x01	; 1
     278:	dc 01       	movw	r26, r24
     27a:	01 90       	ld	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	2a 95       	dec	r18
     280:	e1 f7       	brne	.-8      	; 0x27a <new_can_message+0x3e>
     282:	2b 96       	adiw	r28, 0x0b	; 11
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <can_write>:
     294:	cf 92       	push	r12
     296:	df 92       	push	r13
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	7c 01       	movw	r14, r24
     2a6:	c6 2e       	mov	r12, r22
     2a8:	8c 2d       	mov	r24, r12
     2aa:	b6 d1       	rcall	.+876    	; 0x618 <mcp_read>
     2ac:	83 fd       	sbrc	r24, 3
     2ae:	fc cf       	rjmp	.-8      	; 0x2a8 <can_write+0x14>
     2b0:	f7 01       	movw	r30, r14
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	b9 01       	movw	r22, r18
     2b8:	76 95       	lsr	r23
     2ba:	67 95       	ror	r22
     2bc:	76 95       	lsr	r23
     2be:	67 95       	ror	r22
     2c0:	76 95       	lsr	r23
     2c2:	67 95       	ror	r22
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	8c 0d       	add	r24, r12
     2c8:	b3 d1       	rcall	.+870    	; 0x630 <mcp_write>
     2ca:	f7 01       	movw	r30, r14
     2cc:	60 81       	ld	r22, Z
     2ce:	62 95       	swap	r22
     2d0:	66 0f       	add	r22, r22
     2d2:	60 7e       	andi	r22, 0xE0	; 224
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	8c 0d       	add	r24, r12
     2d8:	ab d1       	rcall	.+854    	; 0x630 <mcp_write>
     2da:	f7 01       	movw	r30, r14
     2dc:	62 81       	ldd	r22, Z+2	; 0x02
     2de:	6f 70       	andi	r22, 0x0F	; 15
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	8c 0d       	add	r24, r12
     2e4:	a5 d1       	rcall	.+842    	; 0x630 <mcp_write>
     2e6:	f7 01       	movw	r30, r14
     2e8:	82 81       	ldd	r24, Z+2	; 0x02
     2ea:	88 23       	and	r24, r24
     2ec:	b9 f0       	breq	.+46     	; 0x31c <can_write+0x88>
     2ee:	87 01       	movw	r16, r14
     2f0:	0d 5f       	subi	r16, 0xFD	; 253
     2f2:	1f 4f       	sbci	r17, 0xFF	; 255
     2f4:	0f 2e       	mov	r0, r31
     2f6:	f6 e0       	ldi	r31, 0x06	; 6
     2f8:	df 2e       	mov	r13, r31
     2fa:	f0 2d       	mov	r31, r0
     2fc:	dc 0c       	add	r13, r12
     2fe:	c0 e0       	ldi	r28, 0x00	; 0
     300:	d0 e0       	ldi	r29, 0x00	; 0
     302:	f8 01       	movw	r30, r16
     304:	61 91       	ld	r22, Z+
     306:	8f 01       	movw	r16, r30
     308:	8d 2d       	mov	r24, r13
     30a:	92 d1       	rcall	.+804    	; 0x630 <mcp_write>
     30c:	21 96       	adiw	r28, 0x01	; 1
     30e:	d3 94       	inc	r13
     310:	f7 01       	movw	r30, r14
     312:	22 81       	ldd	r18, Z+2	; 0x02
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	c2 17       	cp	r28, r18
     318:	d3 07       	cpc	r29, r19
     31a:	9c f3       	brlt	.-26     	; 0x302 <can_write+0x6e>
     31c:	8c 2d       	mov	r24, r12
     31e:	82 95       	swap	r24
     320:	8f 70       	andi	r24, 0x0F	; 15
     322:	82 58       	subi	r24, 0x82	; 130
     324:	ad d1       	rcall	.+858    	; 0x680 <mcp_requestToSend>
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	cf 90       	pop	r12
     336:	08 95       	ret

00000338 <can_pollInterrupt>:
     338:	80 b1       	in	r24, 0x00	; 0
     33a:	8c e2       	ldi	r24, 0x2C	; 44
     33c:	6d d1       	rcall	.+730    	; 0x618 <mcp_read>
     33e:	80 ff       	sbrs	r24, 0
     340:	06 c0       	rjmp	.+12     	; 0x34e <can_pollInterrupt+0x16>
     342:	4f ef       	ldi	r20, 0xFF	; 255
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	8c e2       	ldi	r24, 0x2C	; 44
     348:	87 d1       	rcall	.+782    	; 0x658 <mcp_bitModify>
     34a:	90 e6       	ldi	r25, 0x60	; 96
     34c:	09 c0       	rjmp	.+18     	; 0x360 <can_pollInterrupt+0x28>
     34e:	98 2f       	mov	r25, r24
     350:	92 70       	andi	r25, 0x02	; 2
     352:	81 ff       	sbrs	r24, 1
     354:	05 c0       	rjmp	.+10     	; 0x360 <can_pollInterrupt+0x28>
     356:	4f ef       	ldi	r20, 0xFF	; 255
     358:	62 e0       	ldi	r22, 0x02	; 2
     35a:	8c e2       	ldi	r24, 0x2C	; 44
     35c:	7d d1       	rcall	.+762    	; 0x658 <mcp_bitModify>
     35e:	90 e7       	ldi	r25, 0x70	; 112
     360:	89 2f       	mov	r24, r25
     362:	08 95       	ret

00000364 <can_read>:
     364:	8f 92       	push	r8
     366:	9f 92       	push	r9
     368:	af 92       	push	r10
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	2b 97       	sbiw	r28, 0x0b	; 11
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	6c 01       	movw	r12, r24
     38e:	d4 df       	rcall	.-88     	; 0x338 <can_pollInterrupt>
     390:	18 2f       	mov	r17, r24
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	81 0f       	add	r24, r17
     396:	40 d1       	rcall	.+640    	; 0x618 <mcp_read>
     398:	a8 2e       	mov	r10, r24
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	81 0f       	add	r24, r17
     39e:	3c d1       	rcall	.+632    	; 0x618 <mcp_read>
     3a0:	82 95       	swap	r24
     3a2:	86 95       	lsr	r24
     3a4:	87 70       	andi	r24, 0x07	; 7
     3a6:	b1 2c       	mov	r11, r1
     3a8:	aa 0c       	add	r10, r10
     3aa:	bb 1c       	adc	r11, r11
     3ac:	aa 0c       	add	r10, r10
     3ae:	bb 1c       	adc	r11, r11
     3b0:	aa 0c       	add	r10, r10
     3b2:	bb 1c       	adc	r11, r11
     3b4:	a8 2a       	or	r10, r24
     3b6:	85 e0       	ldi	r24, 0x05	; 5
     3b8:	81 0f       	add	r24, r17
     3ba:	2e d1       	rcall	.+604    	; 0x618 <mcp_read>
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	88 2e       	mov	r8, r24
     3c0:	a1 f0       	breq	.+40     	; 0x3ea <can_read+0x86>
     3c2:	0f 2e       	mov	r0, r31
     3c4:	f6 e0       	ldi	r31, 0x06	; 6
     3c6:	9f 2e       	mov	r9, r31
     3c8:	f0 2d       	mov	r31, r0
     3ca:	91 0e       	add	r9, r17
     3cc:	8e 01       	movw	r16, r28
     3ce:	0c 5f       	subi	r16, 0xFC	; 252
     3d0:	1f 4f       	sbci	r17, 0xFF	; 255
     3d2:	78 01       	movw	r14, r16
     3d4:	e8 0e       	add	r14, r24
     3d6:	f1 1c       	adc	r15, r1
     3d8:	89 2d       	mov	r24, r9
     3da:	1e d1       	rcall	.+572    	; 0x618 <mcp_read>
     3dc:	f8 01       	movw	r30, r16
     3de:	81 93       	st	Z+, r24
     3e0:	8f 01       	movw	r16, r30
     3e2:	93 94       	inc	r9
     3e4:	ee 15       	cp	r30, r14
     3e6:	ff 05       	cpc	r31, r15
     3e8:	b9 f7       	brne	.-18     	; 0x3d8 <can_read+0x74>
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	8c e2       	ldi	r24, 0x2C	; 44
     3f0:	33 d1       	rcall	.+614    	; 0x658 <mcp_bitModify>
     3f2:	ba 82       	std	Y+2, r11	; 0x02
     3f4:	a9 82       	std	Y+1, r10	; 0x01
     3f6:	8b 82       	std	Y+3, r8	; 0x03
     3f8:	8b e0       	ldi	r24, 0x0B	; 11
     3fa:	fe 01       	movw	r30, r28
     3fc:	31 96       	adiw	r30, 0x01	; 1
     3fe:	d6 01       	movw	r26, r12
     400:	01 90       	ld	r0, Z+
     402:	0d 92       	st	X+, r0
     404:	8a 95       	dec	r24
     406:	e1 f7       	brne	.-8      	; 0x400 <can_read+0x9c>
     408:	c6 01       	movw	r24, r12
     40a:	2b 96       	adiw	r28, 0x0b	; 11
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	bf 90       	pop	r11
     428:	af 90       	pop	r10
     42a:	9f 90       	pop	r9
     42c:	8f 90       	pop	r8
     42e:	08 95       	ret

00000430 <can_handle_joystick_message>:

void can_handle_joystick_message(can_message msg){
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	2b 97       	sbiw	r28, 0x0b	; 11
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	e9 82       	std	Y+1, r14	; 0x01
     44e:	fa 82       	std	Y+2, r15	; 0x02
     450:	1c 83       	std	Y+4, r17	; 0x04
	if(msg.id == MCP_JOYSTICK_MESSAGE){
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	9a 81       	ldd	r25, Y+2	; 0x02
     456:	85 35       	cpi	r24, 0x55	; 85
     458:	91 05       	cpc	r25, r1
     45a:	51 f4       	brne	.+20     	; 0x470 <can_handle_joystick_message+0x40>
		printf("Found joy");
     45c:	87 e0       	ldi	r24, 0x07	; 7
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	9f 93       	push	r25
     462:	8f 93       	push	r24
     464:	6e d3       	rcall	.+1756   	; 0xb42 <printf>
		pwm_set_servo(msg.data[0]);
     466:	8c 81       	ldd	r24, Y+4	; 0x04
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	07 d2       	rcall	.+1038   	; 0x87a <pwm_set_servo>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
	}
}
     470:	2b 96       	adiw	r28, 0x0b	; 11
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	08 95       	ret

0000048a <can_handle_score_message>:
void can_handle_score_message(can_message msg){
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	2b 97       	sbiw	r28, 0x0b	; 11
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	e9 82       	std	Y+1, r14	; 0x01
     4a8:	fa 82       	std	Y+2, r15	; 0x02
     4aa:	0b 83       	std	Y+3, r16	; 0x03
     4ac:	1c 83       	std	Y+4, r17	; 0x04
     4ae:	2d 83       	std	Y+5, r18	; 0x05
     4b0:	3e 83       	std	Y+6, r19	; 0x06
     4b2:	4f 83       	std	Y+7, r20	; 0x07
     4b4:	58 87       	std	Y+8, r21	; 0x08
     4b6:	69 87       	std	Y+9, r22	; 0x09
     4b8:	7a 87       	std	Y+10, r23	; 0x0a
     4ba:	8b 87       	std	Y+11, r24	; 0x0b
	if(msg.id == MCP_BUTTON_PRESS){
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	87 37       	cpi	r24, 0x77	; 119
     4c2:	91 05       	cpc	r25, r1
     4c4:	29 f4       	brne	.+10     	; 0x4d0 <can_handle_score_message+0x46>
		if(msg.data[0]){
     4c6:	11 23       	and	r17, r17
     4c8:	11 f0       	breq	.+4      	; 0x4ce <can_handle_score_message+0x44>
			PORTA |= (1<<PA2); //stop relay
     4ca:	12 9a       	sbi	0x02, 2	; 2
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <can_handle_score_message+0x46>
		}
		else{
			PORTA &= ~(1<<PA2); //activate relay
     4ce:	12 98       	cbi	0x02, 2	; 2
		}
	}
}
     4d0:	2b 96       	adiw	r28, 0x0b	; 11
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	08 95       	ret

000004ea <dac_initialize>:
#include <stdint.h>

#define MAX520_TWI_ADDR_BASE 0b01010000
static uint8_t twi_address = 0x00;

void dac_initialize(uint8_t MAX520_addr){
     4ea:	cf 93       	push	r28
     4ec:	c8 2f       	mov	r28, r24
	TWI_Master_Initialise();
     4ee:	fc d1       	rcall	.+1016   	; 0x8e8 <TWI_Master_Initialise>
	sei();
     4f0:	78 94       	sei
	
	twi_address = MAX520_addr;
     4f2:	c0 93 96 02 	sts	0x0296, r28
}	
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <dac_write>:


void dac_write(uint8_t channel, uint8_t val){
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	00 d0       	rcall	.+0      	; 0x500 <dac_write+0x6>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[3] = {	MAX520_TWI_ADDR_BASE | ((twi_address & 0x07) << 1), //Set address
     504:	90 91 96 02 	lds	r25, 0x0296
     508:	97 70       	andi	r25, 0x07	; 7
     50a:	99 0f       	add	r25, r25
     50c:	90 65       	ori	r25, 0x50	; 80
     50e:	99 83       	std	Y+1, r25	; 0x01
     510:	87 70       	andi	r24, 0x07	; 7
     512:	8a 83       	std	Y+2, r24	; 0x02
     514:	6b 83       	std	Y+3, r22	; 0x03
							channel & 0x07, //Channel no higher than 0x07
							val		};
							
	TWI_Start_Transceiver_With_Data(message, 3);
     516:	63 e0       	ldi	r22, 0x03	; 3
     518:	ce 01       	movw	r24, r28
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	ef d1       	rcall	.+990    	; 0x8fc <TWI_Start_Transceiver_With_Data>
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <update_game_score>:
#include "mcp_defines.h"
#include "can.h"
#include "game.h"
#include "adc.h"

void update_game_score(game_score *score){
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	66 97       	sbiw	r28, 0x16	; 22
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	8c 01       	movw	r16, r24
	uint8_t newState = 0;
	score->sum += adc_read(0);
     548:	fc 01       	movw	r30, r24
     54a:	e1 80       	ldd	r14, Z+1	; 0x01
     54c:	f2 80       	ldd	r15, Z+2	; 0x02
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	49 de       	rcall	.-878    	; 0x1e4 <adc_read>
     552:	8e 0d       	add	r24, r14
     554:	9f 1d       	adc	r25, r15
     556:	f8 01       	movw	r30, r16
     558:	92 83       	std	Z+2, r25	; 0x02
     55a:	81 83       	std	Z+1, r24	; 0x01
	(score->antallMaalinger)++;
     55c:	20 81       	ld	r18, Z
     55e:	2f 5f       	subi	r18, 0xFF	; 255
     560:	20 83       	st	Z, r18
	
	if(score->antallMaalinger == 20){
     562:	24 31       	cpi	r18, 0x14	; 20
     564:	c9 f4       	brne	.+50     	; 0x598 <update_game_score+0x6e>
		score->sum = score->sum/score->antallMaalinger;
     566:	9c 01       	movw	r18, r24
     568:	ad ec       	ldi	r26, 0xCD	; 205
     56a:	bc ec       	ldi	r27, 0xCC	; 204
     56c:	91 d2       	rcall	.+1314   	; 0xa90 <__umulhisi3>
     56e:	92 95       	swap	r25
     570:	82 95       	swap	r24
     572:	8f 70       	andi	r24, 0x0F	; 15
     574:	89 27       	eor	r24, r25
     576:	9f 70       	andi	r25, 0x0F	; 15
     578:	89 27       	eor	r24, r25
     57a:	92 83       	std	Z+2, r25	; 0x02
     57c:	81 83       	std	Z+1, r24	; 0x01
		score->antallMaalinger = 1;
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	20 83       	st	Z, r18
		if(score->sum < 100){
     582:	84 36       	cpi	r24, 0x64	; 100
     584:	91 05       	cpc	r25, r1
     586:	f8 f0       	brcs	.+62     	; 0x5c6 <update_game_score+0x9c>
			newState = 1;
		}
		else{
			score->boolState = 0;
     588:	13 82       	std	Z+3, r1	; 0x03
     58a:	06 c0       	rjmp	.+12     	; 0x598 <update_game_score+0x6e>
		}
	}
	
	//Registering point
	if(!score->boolState && newState){
		score->boolState = 1;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	f8 01       	movw	r30, r16
     590:	83 83       	std	Z+3, r24	; 0x03
		(score->score)++;
     592:	84 81       	ldd	r24, Z+4	; 0x04
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	84 83       	std	Z+4, r24	; 0x04
	}
	
	//printf("Score: %d\n", score->score);
	
	can_message msg;
	msg = new_can_message(MCP_GAME_SCORE_MESSAGE, 1, &score->score);
     598:	98 01       	movw	r18, r16
     59a:	2c 5f       	subi	r18, 0xFC	; 252
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	41 e0       	ldi	r20, 0x01	; 1
     5a0:	66 e6       	ldi	r22, 0x66	; 102
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	ce 01       	movw	r24, r28
     5a6:	0c 96       	adiw	r24, 0x0c	; 12
     5a8:	49 de       	rcall	.-878    	; 0x23c <new_can_message>
     5aa:	8b e0       	ldi	r24, 0x0B	; 11
     5ac:	fe 01       	movw	r30, r28
     5ae:	3c 96       	adiw	r30, 0x0c	; 12
     5b0:	de 01       	movw	r26, r28
     5b2:	11 96       	adiw	r26, 0x01	; 1
     5b4:	01 90       	ld	r0, Z+
     5b6:	0d 92       	st	X+, r0
     5b8:	8a 95       	dec	r24
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <update_game_score+0x8a>
	can_write(&msg, MCP_TXB0CTRL);
     5bc:	60 e3       	ldi	r22, 0x30	; 48
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	68 de       	rcall	.-816    	; 0x294 <can_write>
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <update_game_score+0xa6>
			newState = 0;
		}
	}
	
	//Registering point
	if(!score->boolState && newState){
     5c6:	f8 01       	movw	r30, r16
     5c8:	83 81       	ldd	r24, Z+3	; 0x03
     5ca:	88 23       	and	r24, r24
     5cc:	f9 f2       	breq	.-66     	; 0x58c <update_game_score+0x62>
     5ce:	e4 cf       	rjmp	.-56     	; 0x598 <update_game_score+0x6e>
	//printf("Score: %d\n", score->score);
	
	can_message msg;
	msg = new_can_message(MCP_GAME_SCORE_MESSAGE, 1, &score->score);
	can_write(&msg, MCP_TXB0CTRL);
}
     5d0:	66 96       	adiw	r28, 0x16	; 22
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	08 95       	ret

000005ea <new_score>:

game_score new_score(uint8_t antallMaalinger, uint16_t sum, uint8_t boolState, uint8_t val){
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <new_score+0x6>
     5f0:	1f 92       	push	r1
     5f2:	1f 92       	push	r1
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	36 2f       	mov	r19, r22
     5fa:	54 2f       	mov	r21, r20
     5fc:	62 2f       	mov	r22, r18
	score.antallMaalinger = antallMaalinger;
	score.sum = sum;
	score.boolState = boolState;
	score.score = val;
	
	return score;
     5fe:	47 2f       	mov	r20, r23
     600:	28 2f       	mov	r18, r24
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <mcp_read>:
	SPI_transmit(MCP_READ_STATUS);
	uint8_t status = SPI_transmit(0x00);
	PORTB |= (1<< MCP_CS);
	
	return status;
}
     618:	cf 93       	push	r28
     61a:	c8 2f       	mov	r28, r24
     61c:	28 98       	cbi	0x05, 0	; 5
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	5d d1       	rcall	.+698    	; 0x8dc <SPI_transmit>
     622:	8c 2f       	mov	r24, r28
     624:	5b d1       	rcall	.+694    	; 0x8dc <SPI_transmit>
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	59 d1       	rcall	.+690    	; 0x8dc <SPI_transmit>
     62a:	28 9a       	sbi	0x05, 0	; 5
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <mcp_write>:
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	d8 2f       	mov	r29, r24
     636:	c6 2f       	mov	r28, r22
     638:	28 98       	cbi	0x05, 0	; 5
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	4f d1       	rcall	.+670    	; 0x8dc <SPI_transmit>
     63e:	8d 2f       	mov	r24, r29
     640:	4d d1       	rcall	.+666    	; 0x8dc <SPI_transmit>
     642:	8c 2f       	mov	r24, r28
     644:	4b d1       	rcall	.+662    	; 0x8dc <SPI_transmit>
     646:	28 9a       	sbi	0x05, 0	; 5
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <mcp_reset>:
     64e:	28 98       	cbi	0x05, 0	; 5
     650:	80 ec       	ldi	r24, 0xC0	; 192
     652:	44 d1       	rcall	.+648    	; 0x8dc <SPI_transmit>
     654:	28 9a       	sbi	0x05, 0	; 5
     656:	08 95       	ret

00000658 <mcp_bitModify>:
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	18 2f       	mov	r17, r24
     660:	d6 2f       	mov	r29, r22
     662:	c4 2f       	mov	r28, r20
     664:	28 98       	cbi	0x05, 0	; 5
     666:	85 e0       	ldi	r24, 0x05	; 5
     668:	39 d1       	rcall	.+626    	; 0x8dc <SPI_transmit>
     66a:	81 2f       	mov	r24, r17
     66c:	37 d1       	rcall	.+622    	; 0x8dc <SPI_transmit>
     66e:	8d 2f       	mov	r24, r29
     670:	35 d1       	rcall	.+618    	; 0x8dc <SPI_transmit>
     672:	8c 2f       	mov	r24, r28
     674:	33 d1       	rcall	.+614    	; 0x8dc <SPI_transmit>
     676:	28 9a       	sbi	0x05, 0	; 5
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	08 95       	ret

00000680 <mcp_requestToSend>:
     680:	28 98       	cbi	0x05, 0	; 5
     682:	2c d1       	rcall	.+600    	; 0x8dc <SPI_transmit>
     684:	28 9a       	sbi	0x05, 0	; 5
     686:	08 95       	ret

00000688 <mcp_init>:

void mcp_init(void){
	SPI_masterInit();
     688:	23 d1       	rcall	.+582    	; 0x8d0 <SPI_masterInit>
	mcp_reset();
     68a:	e1 cf       	rjmp	.-62     	; 0x64e <mcp_reset>
     68c:	08 95       	ret

0000068e <motor_encoder_reset>:
	
	return data;
}

void motor_encoder_reset(){
	PORTF &= (1 << MOTOR_RST);
     68e:	81 b3       	in	r24, 0x11	; 17
     690:	80 74       	andi	r24, 0x40	; 64
     692:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     694:	8a e6       	ldi	r24, 0x6A	; 106
     696:	8a 95       	dec	r24
     698:	f1 f7       	brne	.-4      	; 0x696 <motor_encoder_reset+0x8>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <motor_encoder_reset+0xe>
	_delay_us(20);
	PORTF |= (1 << MOTOR_RST);
     69c:	8e 9a       	sbi	0x11, 6	; 17
     69e:	08 95       	ret

000006a0 <motor_init>:

#include "dac.h"
#include "motor_driver.h"

void motor_init(void) {
	DDRF |= (1<<MOTOR_DIR) | (1<<MOTOR_EN) | (1<<MOTOR_SEL) | (1<<MOTOR_RST) | (1<<MOTOR_OE);
     6a0:	80 b3       	in	r24, 0x10	; 16
     6a2:	88 6f       	ori	r24, 0xF8	; 248
     6a4:	80 bb       	out	0x10, r24	; 16
	PORTF |= (1 << MOTOR_EN);
     6a6:	8c 9a       	sbi	0x11, 4	; 17
	motor_encoder_reset();
     6a8:	f2 cf       	rjmp	.-28     	; 0x68e <motor_encoder_reset>
     6aa:	08 95       	ret

000006ac <motor_speed>:
	_delay_us(20);
	PORTF |= (1 << MOTOR_RST);
}

void motor_speed(uint8_t speed){
	dac_write(0, speed);
     6ac:	68 2f       	mov	r22, r24
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	24 cf       	rjmp	.-440    	; 0x4fa <dac_write>
     6b2:	08 95       	ret

000006b4 <motor_direction>:
}

void motor_direction(motorDirection dir){
	if(dir){
     6b4:	89 2b       	or	r24, r25
     6b6:	11 f0       	breq	.+4      	; 0x6bc <motor_direction+0x8>
		PORTF &= ~(1 << MOTOR_DIR);
     6b8:	8b 98       	cbi	0x11, 3	; 17
     6ba:	08 95       	ret
	}
	else{
		PORTF |= (1 << MOTOR_DIR);
     6bc:	8b 9a       	sbi	0x11, 3	; 17
     6be:	08 95       	ret

000006c0 <motor_test>:
	}
}

void motor_test(void){
	motor_direction(right);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	f7 df       	rcall	.-18     	; 0x6b4 <motor_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	89 e6       	ldi	r24, 0x69	; 105
     6ca:	98 e1       	ldi	r25, 0x18	; 24
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	90 40       	sbci	r25, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <motor_test+0xc>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <motor_test+0x16>
     6d6:	00 00       	nop
	_delay_ms(500);
	motor_direction(left);
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	eb df       	rcall	.-42     	; 0x6b4 <motor_direction>
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	89 e6       	ldi	r24, 0x69	; 105
     6e2:	98 e1       	ldi	r25, 0x18	; 24
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	80 40       	sbci	r24, 0x00	; 0
     6e8:	90 40       	sbci	r25, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <motor_test+0x24>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <motor_test+0x2e>
     6ee:	00 00       	nop
     6f0:	08 95       	ret

000006f2 <reverse>:
	_delay_ms(500);

}

uint8_t reverse(uint8_t x){
	x = (((x & 0xaa) >> 1) | ((x & 0x55) << 1));
     6f2:	28 2f       	mov	r18, r24
     6f4:	25 75       	andi	r18, 0x55	; 85
     6f6:	22 0f       	add	r18, r18
     6f8:	98 2f       	mov	r25, r24
     6fa:	9a 7a       	andi	r25, 0xAA	; 170
     6fc:	96 95       	lsr	r25
     6fe:	92 2b       	or	r25, r18
	x = (((x & 0xcc) >> 2) | ((x & 0x33) << 2));
     700:	29 2f       	mov	r18, r25
     702:	23 73       	andi	r18, 0x33	; 51
     704:	22 0f       	add	r18, r18
     706:	22 0f       	add	r18, r18
     708:	89 2f       	mov	r24, r25
     70a:	8c 7c       	andi	r24, 0xCC	; 204
     70c:	86 95       	lsr	r24
     70e:	86 95       	lsr	r24
     710:	82 2b       	or	r24, r18
	x = (((x & 0xf0) >> 4) | ((x & 0x0f) << 4));
	return x;

     712:	82 95       	swap	r24
     714:	08 95       	ret

00000716 <motor_encoder_read>:
	DDRF |= (1<<MOTOR_DIR) | (1<<MOTOR_EN) | (1<<MOTOR_SEL) | (1<<MOTOR_RST) | (1<<MOTOR_OE);
	PORTF |= (1 << MOTOR_EN);
	motor_encoder_reset();
}

int16_t motor_encoder_read(void){
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
	uint16_t data;
	
	//Enable output and send high byte on PORT K
	PORTF &=	~((1 << MOTOR_OE) | 
     71a:	81 b3       	in	r24, 0x11	; 17
     71c:	8f 75       	andi	r24, 0x5F	; 95
     71e:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     720:	2a e6       	ldi	r18, 0x6A	; 106
     722:	2a 95       	dec	r18
     724:	f1 f7       	brne	.-4      	; 0x722 <motor_encoder_read+0xc>
     726:	00 c0       	rjmp	.+0      	; 0x728 <motor_encoder_read+0x12>
			 (1 << MOTOR_SEL));
	_delay_us(20);
	data = (reverse(PINK) << 8);
     728:	80 91 06 01 	lds	r24, 0x0106
     72c:	e2 df       	rcall	.-60     	; 0x6f2 <reverse>
     72e:	c8 2f       	mov	r28, r24
     730:	d0 e0       	ldi	r29, 0x00	; 0
     732:	dc 2f       	mov	r29, r28
     734:	cc 27       	eor	r28, r28
	
	//Send low byte on PORT K
	PORTF |= (1 << MOTOR_SEL); 
     736:	8d 9a       	sbi	0x11, 5	; 17
     738:	3a e6       	ldi	r19, 0x6A	; 106
     73a:	3a 95       	dec	r19
     73c:	f1 f7       	brne	.-4      	; 0x73a <motor_encoder_read+0x24>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <motor_encoder_read+0x2a>
	_delay_us(20);
	data += reverse(PINK);
     740:	80 91 06 01 	lds	r24, 0x0106
     744:	d6 df       	rcall	.-84     	; 0x6f2 <reverse>
	
	//Toggle reset and disable output
	PORTF |= (1 << MOTOR_OE);
     746:	8f 9a       	sbi	0x11, 7	; 17
	
	return data;
}
     748:	9e 01       	movw	r18, r28
     74a:	28 0f       	add	r18, r24
     74c:	31 1d       	adc	r19, r1
     74e:	c9 01       	movw	r24, r18
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <main>:
#include "adc.h"
#include "motor_driver.h"
#include "dac.h"

int main(void)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	60 97       	sbiw	r28, 0x10	; 16
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
	sei();
     76a:	78 94       	sei
	USART_Init(MYUBRR);
     76c:	87 e6       	ldi	r24, 0x67	; 103
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	6a d1       	rcall	.+724    	; 0xa46 <USART_Init>
	fdevopen((int (*)(char,  struct __file *))USART_Transmit, (int (*)(struct __file *))USART_Receive);
     772:	6a e3       	ldi	r22, 0x3A	; 58
     774:	75 e0       	ldi	r23, 0x05	; 5
     776:	82 e3       	ldi	r24, 0x32	; 50
     778:	95 e0       	ldi	r25, 0x05	; 5
     77a:	99 d1       	rcall	.+818    	; 0xaae <fdevopen>
	printf("UART setup done\n");
     77c:	81 e1       	ldi	r24, 0x11	; 17
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	f1 d1       	rcall	.+994    	; 0xb64 <puts>
	can_init();
     782:	4a dd       	rcall	.-1388   	; 0x218 <can_init>
	printf("CAN setup done\n");
     784:	81 e2       	ldi	r24, 0x21	; 33
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	ed d1       	rcall	.+986    	; 0xb64 <puts>
	pwm_init();
     78a:	5f d0       	rcall	.+190    	; 0x84a <pwm_init>
	printf("PWM setup done\n");
     78c:	80 e3       	ldi	r24, 0x30	; 48
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	e9 d1       	rcall	.+978    	; 0xb64 <puts>
	adc_init();
     792:	1a dd       	rcall	.-1484   	; 0x1c8 <adc_init>
	printf("ADC setup done\n");
     794:	8f e3       	ldi	r24, 0x3F	; 63
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	e5 d1       	rcall	.+970    	; 0xb64 <puts>
	motor_init();
     79a:	82 df       	rcall	.-252    	; 0x6a0 <motor_init>
	printf("Motor setup done\n");
     79c:	8e e4       	ldi	r24, 0x4E	; 78
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	e1 d1       	rcall	.+962    	; 0xb64 <puts>
	dac_initialize(0);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	a2 de       	rcall	.-700    	; 0x4ea <dac_initialize>
	printf("DAC setup done\n");
     7a6:	8f e5       	ldi	r24, 0x5F	; 95
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	dc d1       	rcall	.+952    	; 0xb64 <puts>
	printf("Initialization done\n");
     7ac:	8e e6       	ldi	r24, 0x6E	; 110
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	d9 d1       	rcall	.+946    	; 0xb64 <puts>
	
	DDRA |=(1<<PA2); //for solenoid
     7b2:	0a 9a       	sbi	0x01, 2	; 1
	//Joystick joy;
	can_message msg;
	game_score score = new_score(0, 0, 0, 0);
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	15 df       	rcall	.-470    	; 0x5ea <new_score>
     7c0:	2c 87       	std	Y+12, r18	; 0x0c
     7c2:	3d 87       	std	Y+13, r19	; 0x0d
     7c4:	4e 87       	std	Y+14, r20	; 0x0e
     7c6:	5f 87       	std	Y+15, r21	; 0x0f
     7c8:	68 8b       	std	Y+16, r22	; 0x10
	
	motor_speed(100);
     7ca:	84 e6       	ldi	r24, 0x64	; 100
     7cc:	6f df       	rcall	.-290    	; 0x6ac <motor_speed>
		if(can_pollInterrupt()){
			msg = can_read();
		}
		
		//Kanskje bruke en switch
		printf("Blurf");
     7ce:	0f 2e       	mov	r0, r31
     7d0:	f2 e8       	ldi	r31, 0x82	; 130
     7d2:	af 2e       	mov	r10, r31
     7d4:	f2 e0       	ldi	r31, 0x02	; 2
     7d6:	bf 2e       	mov	r11, r31
     7d8:	f0 2d       	mov	r31, r0
		can_handle_joystick_message(msg);
		can_handle_score_message(msg);
		update_game_score(&score);
		motor_test();
		printf("Encoder: %d\n", motor_encoder_read());
     7da:	0f 2e       	mov	r0, r31
     7dc:	f8 e8       	ldi	r31, 0x88	; 136
     7de:	cf 2e       	mov	r12, r31
     7e0:	f2 e0       	ldi	r31, 0x02	; 2
     7e2:	df 2e       	mov	r13, r31
     7e4:	f0 2d       	mov	r31, r0
	
	motor_speed(100);
	while(1)
	{
		//printf("IR: %d\n", adc_read(0));
		if(can_pollInterrupt()){
     7e6:	a8 dd       	rcall	.-1200   	; 0x338 <can_pollInterrupt>
     7e8:	88 23       	and	r24, r24
     7ea:	19 f0       	breq	.+6      	; 0x7f2 <main+0x9c>
			msg = can_read();
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	b9 dd       	rcall	.-1166   	; 0x364 <can_read>
		}
		
		//Kanskje bruke en switch
		printf("Blurf");
     7f2:	bf 92       	push	r11
     7f4:	af 92       	push	r10
     7f6:	a5 d1       	rcall	.+842    	; 0xb42 <printf>
		can_handle_joystick_message(msg);
     7f8:	e9 80       	ldd	r14, Y+1	; 0x01
     7fa:	fa 80       	ldd	r15, Y+2	; 0x02
     7fc:	0b 81       	ldd	r16, Y+3	; 0x03
     7fe:	1c 81       	ldd	r17, Y+4	; 0x04
     800:	2d 81       	ldd	r18, Y+5	; 0x05
     802:	3e 81       	ldd	r19, Y+6	; 0x06
     804:	4f 81       	ldd	r20, Y+7	; 0x07
     806:	58 85       	ldd	r21, Y+8	; 0x08
     808:	69 85       	ldd	r22, Y+9	; 0x09
     80a:	7a 85       	ldd	r23, Y+10	; 0x0a
     80c:	8b 85       	ldd	r24, Y+11	; 0x0b
     80e:	10 de       	rcall	.-992    	; 0x430 <can_handle_joystick_message>
		can_handle_score_message(msg);
     810:	e9 80       	ldd	r14, Y+1	; 0x01
     812:	fa 80       	ldd	r15, Y+2	; 0x02
     814:	0b 81       	ldd	r16, Y+3	; 0x03
     816:	1c 81       	ldd	r17, Y+4	; 0x04
     818:	2d 81       	ldd	r18, Y+5	; 0x05
     81a:	3e 81       	ldd	r19, Y+6	; 0x06
     81c:	4f 81       	ldd	r20, Y+7	; 0x07
     81e:	58 85       	ldd	r21, Y+8	; 0x08
     820:	69 85       	ldd	r22, Y+9	; 0x09
     822:	7a 85       	ldd	r23, Y+10	; 0x0a
     824:	8b 85       	ldd	r24, Y+11	; 0x0b
     826:	31 de       	rcall	.-926    	; 0x48a <can_handle_score_message>
		update_game_score(&score);
     828:	ce 01       	movw	r24, r28
     82a:	0c 96       	adiw	r24, 0x0c	; 12
     82c:	7e de       	rcall	.-772    	; 0x52a <update_game_score>
		motor_test();
     82e:	48 df       	rcall	.-368    	; 0x6c0 <motor_test>
		printf("Encoder: %d\n", motor_encoder_read());
     830:	72 df       	rcall	.-284    	; 0x716 <motor_encoder_read>
     832:	9f 93       	push	r25
     834:	8f 93       	push	r24
     836:	df 92       	push	r13
     838:	cf 92       	push	r12
     83a:	83 d1       	rcall	.+774    	; 0xb42 <printf>
		
	}
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	ce cf       	rjmp	.-100    	; 0x7e6 <main+0x90>

0000084a <pwm_init>:
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
     84a:	6b 9a       	sbi	0x0d, 3	; 13
     84c:	e0 e9       	ldi	r30, 0x90	; 144
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	8e 7b       	andi	r24, 0xBE	; 190
     854:	80 83       	st	Z, r24
     856:	80 81       	ld	r24, Z
     858:	82 68       	ori	r24, 0x82	; 130
     85a:	80 83       	st	Z, r24
     85c:	e1 e9       	ldi	r30, 0x91	; 145
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	8d 61       	ori	r24, 0x1D	; 29
     864:	80 83       	st	Z, r24
     866:	80 81       	ld	r24, Z
     868:	8d 7f       	andi	r24, 0xFD	; 253
     86a:	80 83       	st	Z, r24
     86c:	88 e3       	ldi	r24, 0x38	; 56
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	90 93 97 00 	sts	0x0097, r25
     874:	80 93 96 00 	sts	0x0096, r24
     878:	08 95       	ret

0000087a <pwm_set_servo>:
}

void pwm_set_servo(unsigned int val){
	val = (val*19)/255 + servo_min;
     87a:	43 e1       	ldi	r20, 0x13	; 19
     87c:	48 9f       	mul	r20, r24
     87e:	90 01       	movw	r18, r0
     880:	49 9f       	mul	r20, r25
     882:	30 0d       	add	r19, r0
     884:	11 24       	eor	r1, r1
     886:	a1 e8       	ldi	r26, 0x81	; 129
     888:	b0 e8       	ldi	r27, 0x80	; 128
     88a:	02 d1       	rcall	.+516    	; 0xa90 <__umulhisi3>
     88c:	88 0f       	add	r24, r24
     88e:	89 2f       	mov	r24, r25
     890:	88 1f       	adc	r24, r24
     892:	99 0b       	sbc	r25, r25
     894:	91 95       	neg	r25
	if((val <= (servo_mid + 1)) && (val >= (servo_mid - 1))){
     896:	9c 01       	movw	r18, r24
     898:	2b 50       	subi	r18, 0x0B	; 11
     89a:	31 09       	sbc	r19, r1
     89c:	23 30       	cpi	r18, 0x03	; 3
     89e:	31 05       	cpc	r19, r1
     8a0:	38 f4       	brcc	.+14     	; 0x8b0 <pwm_set_servo+0x36>
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
     8a2:	89 e1       	ldi	r24, 0x19	; 25
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	90 93 99 00 	sts	0x0099, r25
     8aa:	80 93 98 00 	sts	0x0098, r24
     8ae:	08 95       	ret
	val = (val*19)/255 + servo_min;
	if((val <= (servo_mid + 1)) && (val >= (servo_mid - 1))){
		pwm_set_value(servo_mid);
	}
	
	else if((val >= servo_min) && (val <= servo_max)){
     8b0:	89 31       	cpi	r24, 0x19	; 25
     8b2:	91 05       	cpc	r25, r1
     8b4:	30 f4       	brcc	.+12     	; 0x8c2 <pwm_set_servo+0x48>
void pwm_set_value(unsigned int val){
	OCR3A = val;
}

void pwm_set_servo(unsigned int val){
	val = (val*19)/255 + servo_min;
     8b6:	0d 96       	adiw	r24, 0x0d	; 13
	OCR4A = 2/1000*F_CPU/prescaler;
	*/
}

void pwm_set_value(unsigned int val){
	OCR3A = val;
     8b8:	90 93 99 00 	sts	0x0099, r25
     8bc:	80 93 98 00 	sts	0x0098, r24
     8c0:	08 95       	ret
     8c2:	89 e1       	ldi	r24, 0x19	; 25
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 99 00 	sts	0x0099, r25
     8ca:	80 93 98 00 	sts	0x0098, r24
     8ce:	08 95       	ret

000008d0 <SPI_masterInit>:
#include <stdio.h>
#include <stdlib.h>

void SPI_masterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB2)|(1 << PB1)|(1 << PB0); //0 = SS, 3 = SI, 2 = SCK
     8d0:	87 e0       	ldi	r24, 0x07	; 7
     8d2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PB3); //SO
     8d4:	23 98       	cbi	0x04, 3	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     8d6:	81 e5       	ldi	r24, 0x51	; 81
     8d8:	8c bd       	out	0x2c, r24	; 44
     8da:	08 95       	ret

000008dc <SPI_transmit>:
}
uint8_t SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
     8dc:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     8de:	0d b4       	in	r0, 0x2d	; 45
     8e0:	07 fe       	sbrs	r0, 7
     8e2:	fd cf       	rjmp	.-6      	; 0x8de <SPI_transmit+0x2>
	return SPDR;
     8e4:	8e b5       	in	r24, 0x2e	; 46
     8e6:	08 95       	ret

000008e8 <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     8e8:	8c e0       	ldi	r24, 0x0C	; 12
     8ea:	80 93 b8 00 	sts	0x00B8, r24
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	80 93 bb 00 	sts	0x00BB, r24
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	80 93 bc 00 	sts	0x00BC, r24
     8fa:	08 95       	ret

000008fc <TWI_Start_Transceiver_With_Data>:
     8fc:	ec eb       	ldi	r30, 0xBC	; 188
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	20 81       	ld	r18, Z
     902:	20 fd       	sbrc	r18, 0
     904:	fd cf       	rjmp	.-6      	; 0x900 <TWI_Start_Transceiver_With_Data+0x4>
     906:	60 93 99 02 	sts	0x0299, r22
     90a:	fc 01       	movw	r30, r24
     90c:	20 81       	ld	r18, Z
     90e:	20 93 9a 02 	sts	0x029A, r18
     912:	20 fd       	sbrc	r18, 0
     914:	0c c0       	rjmp	.+24     	; 0x92e <TWI_Start_Transceiver_With_Data+0x32>
     916:	62 30       	cpi	r22, 0x02	; 2
     918:	50 f0       	brcs	.+20     	; 0x92e <TWI_Start_Transceiver_With_Data+0x32>
     91a:	dc 01       	movw	r26, r24
     91c:	11 96       	adiw	r26, 0x01	; 1
     91e:	eb e9       	ldi	r30, 0x9B	; 155
     920:	f2 e0       	ldi	r31, 0x02	; 2
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	9d 91       	ld	r25, X+
     926:	91 93       	st	Z+, r25
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	86 13       	cpse	r24, r22
     92c:	fb cf       	rjmp	.-10     	; 0x924 <TWI_Start_Transceiver_With_Data+0x28>
     92e:	10 92 98 02 	sts	0x0298, r1
     932:	88 ef       	ldi	r24, 0xF8	; 248
     934:	80 93 06 02 	sts	0x0206, r24
     938:	85 ea       	ldi	r24, 0xA5	; 165
     93a:	80 93 bc 00 	sts	0x00BC, r24
     93e:	08 95       	ret

00000940 <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     940:	1f 92       	push	r1
     942:	0f 92       	push	r0
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	0f 92       	push	r0
     948:	11 24       	eor	r1, r1
     94a:	0b b6       	in	r0, 0x3b	; 59
     94c:	0f 92       	push	r0
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     95e:	80 91 b9 00 	lds	r24, 0x00B9
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	fc 01       	movw	r30, r24
     966:	38 97       	sbiw	r30, 0x08	; 8
     968:	e1 35       	cpi	r30, 0x51	; 81
     96a:	f1 05       	cpc	r31, r1
     96c:	08 f0       	brcs	.+2      	; 0x970 <__vector_39+0x30>
     96e:	55 c0       	rjmp	.+170    	; 0xa1a <__vector_39+0xda>
     970:	ee 58       	subi	r30, 0x8E	; 142
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	87 c0       	rjmp	.+270    	; 0xa84 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     976:	10 92 97 02 	sts	0x0297, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     97a:	e0 91 97 02 	lds	r30, 0x0297
     97e:	80 91 99 02 	lds	r24, 0x0299
     982:	e8 17       	cp	r30, r24
     984:	70 f4       	brcc	.+28     	; 0x9a2 <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	8e 0f       	add	r24, r30
     98a:	80 93 97 02 	sts	0x0297, r24
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	e6 56       	subi	r30, 0x66	; 102
     992:	fd 4f       	sbci	r31, 0xFD	; 253
     994:	80 81       	ld	r24, Z
     996:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     99a:	85 e8       	ldi	r24, 0x85	; 133
     99c:	80 93 bc 00 	sts	0x00BC, r24
     9a0:	43 c0       	rjmp	.+134    	; 0xa28 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     9a2:	80 91 98 02 	lds	r24, 0x0298
     9a6:	81 60       	ori	r24, 0x01	; 1
     9a8:	80 93 98 02 	sts	0x0298, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9ac:	84 e9       	ldi	r24, 0x94	; 148
     9ae:	80 93 bc 00 	sts	0x00BC, r24
     9b2:	3a c0       	rjmp	.+116    	; 0xa28 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     9b4:	e0 91 97 02 	lds	r30, 0x0297
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	8e 0f       	add	r24, r30
     9bc:	80 93 97 02 	sts	0x0297, r24
     9c0:	80 91 bb 00 	lds	r24, 0x00BB
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	e6 56       	subi	r30, 0x66	; 102
     9c8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ca:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     9cc:	20 91 97 02 	lds	r18, 0x0297
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	80 91 99 02 	lds	r24, 0x0299
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	28 17       	cp	r18, r24
     9dc:	39 07       	cpc	r19, r25
     9de:	24 f4       	brge	.+8      	; 0x9e8 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9e0:	85 ec       	ldi	r24, 0xC5	; 197
     9e2:	80 93 bc 00 	sts	0x00BC, r24
     9e6:	20 c0       	rjmp	.+64     	; 0xa28 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     9e8:	85 e8       	ldi	r24, 0x85	; 133
     9ea:	80 93 bc 00 	sts	0x00BC, r24
     9ee:	1c c0       	rjmp	.+56     	; 0xa28 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     9f0:	80 91 bb 00 	lds	r24, 0x00BB
     9f4:	e0 91 97 02 	lds	r30, 0x0297
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	e6 56       	subi	r30, 0x66	; 102
     9fc:	fd 4f       	sbci	r31, 0xFD	; 253
     9fe:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     a00:	80 91 98 02 	lds	r24, 0x0298
     a04:	81 60       	ori	r24, 0x01	; 1
     a06:	80 93 98 02 	sts	0x0298, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     a0a:	84 e9       	ldi	r24, 0x94	; 148
     a0c:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     a10:	0b c0       	rjmp	.+22     	; 0xa28 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     a12:	85 ea       	ldi	r24, 0xA5	; 165
     a14:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     a18:	07 c0       	rjmp	.+14     	; 0xa28 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     a1a:	80 91 b9 00 	lds	r24, 0x00B9
     a1e:	80 93 06 02 	sts	0x0206, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     a28:	ff 91       	pop	r31
     a2a:	ef 91       	pop	r30
     a2c:	bf 91       	pop	r27
     a2e:	af 91       	pop	r26
     a30:	9f 91       	pop	r25
     a32:	8f 91       	pop	r24
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0b be       	out	0x3b, r0	; 59
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <USART_Init>:
	_delay_ms(100);
}
void USART_Init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     a46:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     a4a:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     a4e:	e1 ec       	ldi	r30, 0xC1	; 193
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	88 61       	ori	r24, 0x18	; 24
     a56:	80 83       	st	Z, r24
	
	//Set frame format: 8data, 1stop bit
	UCSR0C |= (3<<UCSZ00);
     a58:	e2 ec       	ldi	r30, 0xC2	; 194
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	86 60       	ori	r24, 0x06	; 6
     a60:	80 83       	st	Z, r24
     a62:	08 95       	ret

00000a64 <USART_Transmit>:
}
void USART_Transmit(unsigned char data){
	/*Wait for empty transmit buffer*/
	while( !(UCSR0A & (1<<UDRE0)) );
     a64:	e0 ec       	ldi	r30, 0xC0	; 192
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	90 81       	ld	r25, Z
     a6a:	95 ff       	sbrs	r25, 5
     a6c:	fd cf       	rjmp	.-6      	; 0xa68 <USART_Transmit+0x4>
	
	/*Put data into buffer, sends the data*/
	UDR0 = data;
     a6e:	80 93 c6 00 	sts	0x00C6, r24
     a72:	08 95       	ret

00000a74 <USART_Receive>:
}
unsigned char USART_Receive(void){
	/*Wait for data to be received*/
	while( !(UCSR0A & (1<<RXC0)) );
     a74:	e0 ec       	ldi	r30, 0xC0	; 192
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	88 23       	and	r24, r24
     a7c:	ec f7       	brge	.-6      	; 0xa78 <USART_Receive+0x4>
	
	
	/*Get and return received data from buffer*/
	return UDR0;
     a7e:	80 91 c6 00 	lds	r24, 0x00C6
     a82:	08 95       	ret

00000a84 <__tablejump2__>:
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31

00000a88 <__tablejump__>:
     a88:	05 90       	lpm	r0, Z+
     a8a:	f4 91       	lpm	r31, Z
     a8c:	e0 2d       	mov	r30, r0
     a8e:	19 94       	eijmp

00000a90 <__umulhisi3>:
     a90:	a2 9f       	mul	r26, r18
     a92:	b0 01       	movw	r22, r0
     a94:	b3 9f       	mul	r27, r19
     a96:	c0 01       	movw	r24, r0
     a98:	a3 9f       	mul	r26, r19
     a9a:	70 0d       	add	r23, r0
     a9c:	81 1d       	adc	r24, r1
     a9e:	11 24       	eor	r1, r1
     aa0:	91 1d       	adc	r25, r1
     aa2:	b2 9f       	mul	r27, r18
     aa4:	70 0d       	add	r23, r0
     aa6:	81 1d       	adc	r24, r1
     aa8:	11 24       	eor	r1, r1
     aaa:	91 1d       	adc	r25, r1
     aac:	08 95       	ret

00000aae <fdevopen>:
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	ec 01       	movw	r28, r24
     ab8:	8b 01       	movw	r16, r22
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	31 f4       	brne	.+12     	; 0xaca <fdevopen+0x1c>
     abe:	61 15       	cp	r22, r1
     ac0:	71 05       	cpc	r23, r1
     ac2:	19 f4       	brne	.+6      	; 0xaca <fdevopen+0x1c>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	37 c0       	rjmp	.+110    	; 0xb38 <fdevopen+0x8a>
     aca:	6e e0       	ldi	r22, 0x0E	; 14
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	63 d2       	rcall	.+1222   	; 0xf9a <calloc>
     ad4:	fc 01       	movw	r30, r24
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	a9 f3       	breq	.-22     	; 0xac4 <fdevopen+0x16>
     ada:	80 e8       	ldi	r24, 0x80	; 128
     adc:	83 83       	std	Z+3, r24	; 0x03
     ade:	01 15       	cp	r16, r1
     ae0:	11 05       	cpc	r17, r1
     ae2:	71 f0       	breq	.+28     	; 0xb00 <fdevopen+0x52>
     ae4:	13 87       	std	Z+11, r17	; 0x0b
     ae6:	02 87       	std	Z+10, r16	; 0x0a
     ae8:	81 e8       	ldi	r24, 0x81	; 129
     aea:	83 83       	std	Z+3, r24	; 0x03
     aec:	80 91 9e 02 	lds	r24, 0x029E
     af0:	90 91 9f 02 	lds	r25, 0x029F
     af4:	89 2b       	or	r24, r25
     af6:	21 f4       	brne	.+8      	; 0xb00 <fdevopen+0x52>
     af8:	f0 93 9f 02 	sts	0x029F, r31
     afc:	e0 93 9e 02 	sts	0x029E, r30
     b00:	20 97       	sbiw	r28, 0x00	; 0
     b02:	c9 f0       	breq	.+50     	; 0xb36 <fdevopen+0x88>
     b04:	d1 87       	std	Z+9, r29	; 0x09
     b06:	c0 87       	std	Z+8, r28	; 0x08
     b08:	83 81       	ldd	r24, Z+3	; 0x03
     b0a:	82 60       	ori	r24, 0x02	; 2
     b0c:	83 83       	std	Z+3, r24	; 0x03
     b0e:	80 91 a0 02 	lds	r24, 0x02A0
     b12:	90 91 a1 02 	lds	r25, 0x02A1
     b16:	89 2b       	or	r24, r25
     b18:	71 f4       	brne	.+28     	; 0xb36 <fdevopen+0x88>
     b1a:	f0 93 a1 02 	sts	0x02A1, r31
     b1e:	e0 93 a0 02 	sts	0x02A0, r30
     b22:	80 91 a2 02 	lds	r24, 0x02A2
     b26:	90 91 a3 02 	lds	r25, 0x02A3
     b2a:	89 2b       	or	r24, r25
     b2c:	21 f4       	brne	.+8      	; 0xb36 <fdevopen+0x88>
     b2e:	f0 93 a3 02 	sts	0x02A3, r31
     b32:	e0 93 a2 02 	sts	0x02A2, r30
     b36:	cf 01       	movw	r24, r30
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <printf>:
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	fe 01       	movw	r30, r28
     b4c:	36 96       	adiw	r30, 0x06	; 6
     b4e:	61 91       	ld	r22, Z+
     b50:	71 91       	ld	r23, Z+
     b52:	af 01       	movw	r20, r30
     b54:	80 91 a0 02 	lds	r24, 0x02A0
     b58:	90 91 a1 02 	lds	r25, 0x02A1
     b5c:	30 d0       	rcall	.+96     	; 0xbbe <vfprintf>
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <puts>:
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	e0 91 a0 02 	lds	r30, 0x02A0
     b70:	f0 91 a1 02 	lds	r31, 0x02A1
     b74:	23 81       	ldd	r18, Z+3	; 0x03
     b76:	21 ff       	sbrs	r18, 1
     b78:	1b c0       	rjmp	.+54     	; 0xbb0 <puts+0x4c>
     b7a:	ec 01       	movw	r28, r24
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	10 e0       	ldi	r17, 0x00	; 0
     b80:	89 91       	ld	r24, Y+
     b82:	60 91 a0 02 	lds	r22, 0x02A0
     b86:	70 91 a1 02 	lds	r23, 0x02A1
     b8a:	db 01       	movw	r26, r22
     b8c:	18 96       	adiw	r26, 0x08	; 8
     b8e:	ed 91       	ld	r30, X+
     b90:	fc 91       	ld	r31, X
     b92:	19 97       	sbiw	r26, 0x09	; 9
     b94:	88 23       	and	r24, r24
     b96:	31 f0       	breq	.+12     	; 0xba4 <puts+0x40>
     b98:	19 95       	eicall
     b9a:	89 2b       	or	r24, r25
     b9c:	89 f3       	breq	.-30     	; 0xb80 <puts+0x1c>
     b9e:	0f ef       	ldi	r16, 0xFF	; 255
     ba0:	1f ef       	ldi	r17, 0xFF	; 255
     ba2:	ee cf       	rjmp	.-36     	; 0xb80 <puts+0x1c>
     ba4:	8a e0       	ldi	r24, 0x0A	; 10
     ba6:	19 95       	eicall
     ba8:	89 2b       	or	r24, r25
     baa:	11 f4       	brne	.+4      	; 0xbb0 <puts+0x4c>
     bac:	c8 01       	movw	r24, r16
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <puts+0x50>
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	9f ef       	ldi	r25, 0xFF	; 255
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	08 95       	ret

00000bbe <vfprintf>:
     bbe:	2f 92       	push	r2
     bc0:	3f 92       	push	r3
     bc2:	4f 92       	push	r4
     bc4:	5f 92       	push	r5
     bc6:	6f 92       	push	r6
     bc8:	7f 92       	push	r7
     bca:	8f 92       	push	r8
     bcc:	9f 92       	push	r9
     bce:	af 92       	push	r10
     bd0:	bf 92       	push	r11
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	2c 97       	sbiw	r28, 0x0c	; 12
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	7c 01       	movw	r14, r24
     bf4:	6b 01       	movw	r12, r22
     bf6:	8a 01       	movw	r16, r20
     bf8:	fc 01       	movw	r30, r24
     bfa:	17 82       	std	Z+7, r1	; 0x07
     bfc:	16 82       	std	Z+6, r1	; 0x06
     bfe:	83 81       	ldd	r24, Z+3	; 0x03
     c00:	81 ff       	sbrs	r24, 1
     c02:	b0 c1       	rjmp	.+864    	; 0xf64 <vfprintf+0x3a6>
     c04:	ce 01       	movw	r24, r28
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	4c 01       	movw	r8, r24
     c0a:	f7 01       	movw	r30, r14
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	f6 01       	movw	r30, r12
     c10:	93 fd       	sbrc	r25, 3
     c12:	85 91       	lpm	r24, Z+
     c14:	93 ff       	sbrs	r25, 3
     c16:	81 91       	ld	r24, Z+
     c18:	6f 01       	movw	r12, r30
     c1a:	88 23       	and	r24, r24
     c1c:	09 f4       	brne	.+2      	; 0xc20 <vfprintf+0x62>
     c1e:	9e c1       	rjmp	.+828    	; 0xf5c <vfprintf+0x39e>
     c20:	85 32       	cpi	r24, 0x25	; 37
     c22:	39 f4       	brne	.+14     	; 0xc32 <vfprintf+0x74>
     c24:	93 fd       	sbrc	r25, 3
     c26:	85 91       	lpm	r24, Z+
     c28:	93 ff       	sbrs	r25, 3
     c2a:	81 91       	ld	r24, Z+
     c2c:	6f 01       	movw	r12, r30
     c2e:	85 32       	cpi	r24, 0x25	; 37
     c30:	21 f4       	brne	.+8      	; 0xc3a <vfprintf+0x7c>
     c32:	b7 01       	movw	r22, r14
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0f d3       	rcall	.+1566   	; 0x1256 <fputc>
     c38:	e8 cf       	rjmp	.-48     	; 0xc0a <vfprintf+0x4c>
     c3a:	51 2c       	mov	r5, r1
     c3c:	31 2c       	mov	r3, r1
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	20 32       	cpi	r18, 0x20	; 32
     c42:	a0 f4       	brcc	.+40     	; 0xc6c <vfprintf+0xae>
     c44:	8b 32       	cpi	r24, 0x2B	; 43
     c46:	69 f0       	breq	.+26     	; 0xc62 <vfprintf+0xa4>
     c48:	30 f4       	brcc	.+12     	; 0xc56 <vfprintf+0x98>
     c4a:	80 32       	cpi	r24, 0x20	; 32
     c4c:	59 f0       	breq	.+22     	; 0xc64 <vfprintf+0xa6>
     c4e:	83 32       	cpi	r24, 0x23	; 35
     c50:	69 f4       	brne	.+26     	; 0xc6c <vfprintf+0xae>
     c52:	20 61       	ori	r18, 0x10	; 16
     c54:	2c c0       	rjmp	.+88     	; 0xcae <vfprintf+0xf0>
     c56:	8d 32       	cpi	r24, 0x2D	; 45
     c58:	39 f0       	breq	.+14     	; 0xc68 <vfprintf+0xaa>
     c5a:	80 33       	cpi	r24, 0x30	; 48
     c5c:	39 f4       	brne	.+14     	; 0xc6c <vfprintf+0xae>
     c5e:	21 60       	ori	r18, 0x01	; 1
     c60:	26 c0       	rjmp	.+76     	; 0xcae <vfprintf+0xf0>
     c62:	22 60       	ori	r18, 0x02	; 2
     c64:	24 60       	ori	r18, 0x04	; 4
     c66:	23 c0       	rjmp	.+70     	; 0xcae <vfprintf+0xf0>
     c68:	28 60       	ori	r18, 0x08	; 8
     c6a:	21 c0       	rjmp	.+66     	; 0xcae <vfprintf+0xf0>
     c6c:	27 fd       	sbrc	r18, 7
     c6e:	27 c0       	rjmp	.+78     	; 0xcbe <vfprintf+0x100>
     c70:	30 ed       	ldi	r19, 0xD0	; 208
     c72:	38 0f       	add	r19, r24
     c74:	3a 30       	cpi	r19, 0x0A	; 10
     c76:	78 f4       	brcc	.+30     	; 0xc96 <vfprintf+0xd8>
     c78:	26 ff       	sbrs	r18, 6
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <vfprintf+0xca>
     c7c:	fa e0       	ldi	r31, 0x0A	; 10
     c7e:	5f 9e       	mul	r5, r31
     c80:	30 0d       	add	r19, r0
     c82:	11 24       	eor	r1, r1
     c84:	53 2e       	mov	r5, r19
     c86:	13 c0       	rjmp	.+38     	; 0xcae <vfprintf+0xf0>
     c88:	8a e0       	ldi	r24, 0x0A	; 10
     c8a:	38 9e       	mul	r3, r24
     c8c:	30 0d       	add	r19, r0
     c8e:	11 24       	eor	r1, r1
     c90:	33 2e       	mov	r3, r19
     c92:	20 62       	ori	r18, 0x20	; 32
     c94:	0c c0       	rjmp	.+24     	; 0xcae <vfprintf+0xf0>
     c96:	8e 32       	cpi	r24, 0x2E	; 46
     c98:	21 f4       	brne	.+8      	; 0xca2 <vfprintf+0xe4>
     c9a:	26 fd       	sbrc	r18, 6
     c9c:	5f c1       	rjmp	.+702    	; 0xf5c <vfprintf+0x39e>
     c9e:	20 64       	ori	r18, 0x40	; 64
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0xf0>
     ca2:	8c 36       	cpi	r24, 0x6C	; 108
     ca4:	11 f4       	brne	.+4      	; 0xcaa <vfprintf+0xec>
     ca6:	20 68       	ori	r18, 0x80	; 128
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0xf0>
     caa:	88 36       	cpi	r24, 0x68	; 104
     cac:	41 f4       	brne	.+16     	; 0xcbe <vfprintf+0x100>
     cae:	f6 01       	movw	r30, r12
     cb0:	93 fd       	sbrc	r25, 3
     cb2:	85 91       	lpm	r24, Z+
     cb4:	93 ff       	sbrs	r25, 3
     cb6:	81 91       	ld	r24, Z+
     cb8:	6f 01       	movw	r12, r30
     cba:	81 11       	cpse	r24, r1
     cbc:	c1 cf       	rjmp	.-126    	; 0xc40 <vfprintf+0x82>
     cbe:	98 2f       	mov	r25, r24
     cc0:	9f 7d       	andi	r25, 0xDF	; 223
     cc2:	95 54       	subi	r25, 0x45	; 69
     cc4:	93 30       	cpi	r25, 0x03	; 3
     cc6:	28 f4       	brcc	.+10     	; 0xcd2 <vfprintf+0x114>
     cc8:	0c 5f       	subi	r16, 0xFC	; 252
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	ff e3       	ldi	r31, 0x3F	; 63
     cce:	f9 83       	std	Y+1, r31	; 0x01
     cd0:	0d c0       	rjmp	.+26     	; 0xcec <vfprintf+0x12e>
     cd2:	83 36       	cpi	r24, 0x63	; 99
     cd4:	31 f0       	breq	.+12     	; 0xce2 <vfprintf+0x124>
     cd6:	83 37       	cpi	r24, 0x73	; 115
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <vfprintf+0x138>
     cda:	83 35       	cpi	r24, 0x53	; 83
     cdc:	09 f0       	breq	.+2      	; 0xce0 <vfprintf+0x122>
     cde:	57 c0       	rjmp	.+174    	; 0xd8e <vfprintf+0x1d0>
     ce0:	21 c0       	rjmp	.+66     	; 0xd24 <vfprintf+0x166>
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 81       	ld	r24, Z
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	0e 5f       	subi	r16, 0xFE	; 254
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	44 24       	eor	r4, r4
     cee:	43 94       	inc	r4
     cf0:	51 2c       	mov	r5, r1
     cf2:	54 01       	movw	r10, r8
     cf4:	14 c0       	rjmp	.+40     	; 0xd1e <vfprintf+0x160>
     cf6:	38 01       	movw	r6, r16
     cf8:	f2 e0       	ldi	r31, 0x02	; 2
     cfa:	6f 0e       	add	r6, r31
     cfc:	71 1c       	adc	r7, r1
     cfe:	f8 01       	movw	r30, r16
     d00:	a0 80       	ld	r10, Z
     d02:	b1 80       	ldd	r11, Z+1	; 0x01
     d04:	26 ff       	sbrs	r18, 6
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <vfprintf+0x150>
     d08:	65 2d       	mov	r22, r5
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <vfprintf+0x154>
     d0e:	6f ef       	ldi	r22, 0xFF	; 255
     d10:	7f ef       	ldi	r23, 0xFF	; 255
     d12:	c5 01       	movw	r24, r10
     d14:	2c 87       	std	Y+12, r18	; 0x0c
     d16:	94 d2       	rcall	.+1320   	; 0x1240 <strnlen>
     d18:	2c 01       	movw	r4, r24
     d1a:	83 01       	movw	r16, r6
     d1c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d1e:	2f 77       	andi	r18, 0x7F	; 127
     d20:	22 2e       	mov	r2, r18
     d22:	16 c0       	rjmp	.+44     	; 0xd50 <vfprintf+0x192>
     d24:	38 01       	movw	r6, r16
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	6f 0e       	add	r6, r31
     d2a:	71 1c       	adc	r7, r1
     d2c:	f8 01       	movw	r30, r16
     d2e:	a0 80       	ld	r10, Z
     d30:	b1 80       	ldd	r11, Z+1	; 0x01
     d32:	26 ff       	sbrs	r18, 6
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <vfprintf+0x17e>
     d36:	65 2d       	mov	r22, r5
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <vfprintf+0x182>
     d3c:	6f ef       	ldi	r22, 0xFF	; 255
     d3e:	7f ef       	ldi	r23, 0xFF	; 255
     d40:	c5 01       	movw	r24, r10
     d42:	2c 87       	std	Y+12, r18	; 0x0c
     d44:	6b d2       	rcall	.+1238   	; 0x121c <strnlen_P>
     d46:	2c 01       	movw	r4, r24
     d48:	2c 85       	ldd	r18, Y+12	; 0x0c
     d4a:	20 68       	ori	r18, 0x80	; 128
     d4c:	22 2e       	mov	r2, r18
     d4e:	83 01       	movw	r16, r6
     d50:	23 fc       	sbrc	r2, 3
     d52:	19 c0       	rjmp	.+50     	; 0xd86 <vfprintf+0x1c8>
     d54:	83 2d       	mov	r24, r3
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	48 16       	cp	r4, r24
     d5a:	59 06       	cpc	r5, r25
     d5c:	a0 f4       	brcc	.+40     	; 0xd86 <vfprintf+0x1c8>
     d5e:	b7 01       	movw	r22, r14
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	78 d2       	rcall	.+1264   	; 0x1256 <fputc>
     d66:	3a 94       	dec	r3
     d68:	f5 cf       	rjmp	.-22     	; 0xd54 <vfprintf+0x196>
     d6a:	f5 01       	movw	r30, r10
     d6c:	27 fc       	sbrc	r2, 7
     d6e:	85 91       	lpm	r24, Z+
     d70:	27 fe       	sbrs	r2, 7
     d72:	81 91       	ld	r24, Z+
     d74:	5f 01       	movw	r10, r30
     d76:	b7 01       	movw	r22, r14
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	6d d2       	rcall	.+1242   	; 0x1256 <fputc>
     d7c:	31 10       	cpse	r3, r1
     d7e:	3a 94       	dec	r3
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	4f 1a       	sub	r4, r31
     d84:	51 08       	sbc	r5, r1
     d86:	41 14       	cp	r4, r1
     d88:	51 04       	cpc	r5, r1
     d8a:	79 f7       	brne	.-34     	; 0xd6a <vfprintf+0x1ac>
     d8c:	de c0       	rjmp	.+444    	; 0xf4a <vfprintf+0x38c>
     d8e:	84 36       	cpi	r24, 0x64	; 100
     d90:	11 f0       	breq	.+4      	; 0xd96 <vfprintf+0x1d8>
     d92:	89 36       	cpi	r24, 0x69	; 105
     d94:	31 f5       	brne	.+76     	; 0xde2 <vfprintf+0x224>
     d96:	f8 01       	movw	r30, r16
     d98:	27 ff       	sbrs	r18, 7
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <vfprintf+0x1ec>
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	0c 5f       	subi	r16, 0xFC	; 252
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	08 c0       	rjmp	.+16     	; 0xdba <vfprintf+0x1fc>
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	88 27       	eor	r24, r24
     db0:	77 fd       	sbrc	r23, 7
     db2:	80 95       	com	r24
     db4:	98 2f       	mov	r25, r24
     db6:	0e 5f       	subi	r16, 0xFE	; 254
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	2f 76       	andi	r18, 0x6F	; 111
     dbc:	b2 2e       	mov	r11, r18
     dbe:	97 ff       	sbrs	r25, 7
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <vfprintf+0x216>
     dc2:	90 95       	com	r25
     dc4:	80 95       	com	r24
     dc6:	70 95       	com	r23
     dc8:	61 95       	neg	r22
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	8f 4f       	sbci	r24, 0xFF	; 255
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	20 68       	ori	r18, 0x80	; 128
     dd2:	b2 2e       	mov	r11, r18
     dd4:	2a e0       	ldi	r18, 0x0A	; 10
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	a4 01       	movw	r20, r8
     dda:	6f d2       	rcall	.+1246   	; 0x12ba <__ultoa_invert>
     ddc:	a8 2e       	mov	r10, r24
     dde:	a8 18       	sub	r10, r8
     de0:	43 c0       	rjmp	.+134    	; 0xe68 <vfprintf+0x2aa>
     de2:	85 37       	cpi	r24, 0x75	; 117
     de4:	29 f4       	brne	.+10     	; 0xdf0 <vfprintf+0x232>
     de6:	2f 7e       	andi	r18, 0xEF	; 239
     de8:	b2 2e       	mov	r11, r18
     dea:	2a e0       	ldi	r18, 0x0A	; 10
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	25 c0       	rjmp	.+74     	; 0xe3a <vfprintf+0x27c>
     df0:	f2 2f       	mov	r31, r18
     df2:	f9 7f       	andi	r31, 0xF9	; 249
     df4:	bf 2e       	mov	r11, r31
     df6:	8f 36       	cpi	r24, 0x6F	; 111
     df8:	c1 f0       	breq	.+48     	; 0xe2a <vfprintf+0x26c>
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <vfprintf+0x244>
     dfc:	88 35       	cpi	r24, 0x58	; 88
     dfe:	79 f0       	breq	.+30     	; 0xe1e <vfprintf+0x260>
     e00:	ad c0       	rjmp	.+346    	; 0xf5c <vfprintf+0x39e>
     e02:	80 37       	cpi	r24, 0x70	; 112
     e04:	19 f0       	breq	.+6      	; 0xe0c <vfprintf+0x24e>
     e06:	88 37       	cpi	r24, 0x78	; 120
     e08:	21 f0       	breq	.+8      	; 0xe12 <vfprintf+0x254>
     e0a:	a8 c0       	rjmp	.+336    	; 0xf5c <vfprintf+0x39e>
     e0c:	2f 2f       	mov	r18, r31
     e0e:	20 61       	ori	r18, 0x10	; 16
     e10:	b2 2e       	mov	r11, r18
     e12:	b4 fe       	sbrs	r11, 4
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x272>
     e16:	8b 2d       	mov	r24, r11
     e18:	84 60       	ori	r24, 0x04	; 4
     e1a:	b8 2e       	mov	r11, r24
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x272>
     e1e:	24 ff       	sbrs	r18, 4
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <vfprintf+0x278>
     e22:	9f 2f       	mov	r25, r31
     e24:	96 60       	ori	r25, 0x06	; 6
     e26:	b9 2e       	mov	r11, r25
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0x278>
     e2a:	28 e0       	ldi	r18, 0x08	; 8
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x27c>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x27c>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	32 e0       	ldi	r19, 0x02	; 2
     e3a:	f8 01       	movw	r30, r16
     e3c:	b7 fe       	sbrs	r11, 7
     e3e:	07 c0       	rjmp	.+14     	; 0xe4e <vfprintf+0x290>
     e40:	60 81       	ld	r22, Z
     e42:	71 81       	ldd	r23, Z+1	; 0x01
     e44:	82 81       	ldd	r24, Z+2	; 0x02
     e46:	93 81       	ldd	r25, Z+3	; 0x03
     e48:	0c 5f       	subi	r16, 0xFC	; 252
     e4a:	1f 4f       	sbci	r17, 0xFF	; 255
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <vfprintf+0x29c>
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 5f       	subi	r16, 0xFE	; 254
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	a4 01       	movw	r20, r8
     e5c:	2e d2       	rcall	.+1116   	; 0x12ba <__ultoa_invert>
     e5e:	a8 2e       	mov	r10, r24
     e60:	a8 18       	sub	r10, r8
     e62:	fb 2d       	mov	r31, r11
     e64:	ff 77       	andi	r31, 0x7F	; 127
     e66:	bf 2e       	mov	r11, r31
     e68:	b6 fe       	sbrs	r11, 6
     e6a:	0b c0       	rjmp	.+22     	; 0xe82 <vfprintf+0x2c4>
     e6c:	2b 2d       	mov	r18, r11
     e6e:	2e 7f       	andi	r18, 0xFE	; 254
     e70:	a5 14       	cp	r10, r5
     e72:	50 f4       	brcc	.+20     	; 0xe88 <vfprintf+0x2ca>
     e74:	b4 fe       	sbrs	r11, 4
     e76:	0a c0       	rjmp	.+20     	; 0xe8c <vfprintf+0x2ce>
     e78:	b2 fc       	sbrc	r11, 2
     e7a:	08 c0       	rjmp	.+16     	; 0xe8c <vfprintf+0x2ce>
     e7c:	2b 2d       	mov	r18, r11
     e7e:	2e 7e       	andi	r18, 0xEE	; 238
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <vfprintf+0x2ce>
     e82:	7a 2c       	mov	r7, r10
     e84:	2b 2d       	mov	r18, r11
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <vfprintf+0x2d0>
     e88:	7a 2c       	mov	r7, r10
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <vfprintf+0x2d0>
     e8c:	75 2c       	mov	r7, r5
     e8e:	24 ff       	sbrs	r18, 4
     e90:	0d c0       	rjmp	.+26     	; 0xeac <vfprintf+0x2ee>
     e92:	fe 01       	movw	r30, r28
     e94:	ea 0d       	add	r30, r10
     e96:	f1 1d       	adc	r31, r1
     e98:	80 81       	ld	r24, Z
     e9a:	80 33       	cpi	r24, 0x30	; 48
     e9c:	11 f4       	brne	.+4      	; 0xea2 <vfprintf+0x2e4>
     e9e:	29 7e       	andi	r18, 0xE9	; 233
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <vfprintf+0x2f6>
     ea2:	22 ff       	sbrs	r18, 2
     ea4:	06 c0       	rjmp	.+12     	; 0xeb2 <vfprintf+0x2f4>
     ea6:	73 94       	inc	r7
     ea8:	73 94       	inc	r7
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <vfprintf+0x2f6>
     eac:	82 2f       	mov	r24, r18
     eae:	86 78       	andi	r24, 0x86	; 134
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <vfprintf+0x2f6>
     eb2:	73 94       	inc	r7
     eb4:	23 fd       	sbrc	r18, 3
     eb6:	12 c0       	rjmp	.+36     	; 0xedc <vfprintf+0x31e>
     eb8:	20 ff       	sbrs	r18, 0
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <vfprintf+0x30a>
     ebc:	5a 2c       	mov	r5, r10
     ebe:	73 14       	cp	r7, r3
     ec0:	18 f4       	brcc	.+6      	; 0xec8 <vfprintf+0x30a>
     ec2:	53 0c       	add	r5, r3
     ec4:	57 18       	sub	r5, r7
     ec6:	73 2c       	mov	r7, r3
     ec8:	73 14       	cp	r7, r3
     eca:	60 f4       	brcc	.+24     	; 0xee4 <vfprintf+0x326>
     ecc:	b7 01       	movw	r22, r14
     ece:	80 e2       	ldi	r24, 0x20	; 32
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	2c 87       	std	Y+12, r18	; 0x0c
     ed4:	c0 d1       	rcall	.+896    	; 0x1256 <fputc>
     ed6:	73 94       	inc	r7
     ed8:	2c 85       	ldd	r18, Y+12	; 0x0c
     eda:	f6 cf       	rjmp	.-20     	; 0xec8 <vfprintf+0x30a>
     edc:	73 14       	cp	r7, r3
     ede:	10 f4       	brcc	.+4      	; 0xee4 <vfprintf+0x326>
     ee0:	37 18       	sub	r3, r7
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <vfprintf+0x328>
     ee4:	31 2c       	mov	r3, r1
     ee6:	24 ff       	sbrs	r18, 4
     ee8:	11 c0       	rjmp	.+34     	; 0xf0c <vfprintf+0x34e>
     eea:	b7 01       	movw	r22, r14
     eec:	80 e3       	ldi	r24, 0x30	; 48
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	2c 87       	std	Y+12, r18	; 0x0c
     ef2:	b1 d1       	rcall	.+866    	; 0x1256 <fputc>
     ef4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef6:	22 ff       	sbrs	r18, 2
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <vfprintf+0x368>
     efa:	21 ff       	sbrs	r18, 1
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <vfprintf+0x346>
     efe:	88 e5       	ldi	r24, 0x58	; 88
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <vfprintf+0x34a>
     f04:	88 e7       	ldi	r24, 0x78	; 120
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	b7 01       	movw	r22, r14
     f0a:	0c c0       	rjmp	.+24     	; 0xf24 <vfprintf+0x366>
     f0c:	82 2f       	mov	r24, r18
     f0e:	86 78       	andi	r24, 0x86	; 134
     f10:	51 f0       	breq	.+20     	; 0xf26 <vfprintf+0x368>
     f12:	21 fd       	sbrc	r18, 1
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x35c>
     f16:	80 e2       	ldi	r24, 0x20	; 32
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <vfprintf+0x35e>
     f1a:	8b e2       	ldi	r24, 0x2B	; 43
     f1c:	27 fd       	sbrc	r18, 7
     f1e:	8d e2       	ldi	r24, 0x2D	; 45
     f20:	b7 01       	movw	r22, r14
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	98 d1       	rcall	.+816    	; 0x1256 <fputc>
     f26:	a5 14       	cp	r10, r5
     f28:	30 f4       	brcc	.+12     	; 0xf36 <vfprintf+0x378>
     f2a:	b7 01       	movw	r22, r14
     f2c:	80 e3       	ldi	r24, 0x30	; 48
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	92 d1       	rcall	.+804    	; 0x1256 <fputc>
     f32:	5a 94       	dec	r5
     f34:	f8 cf       	rjmp	.-16     	; 0xf26 <vfprintf+0x368>
     f36:	aa 94       	dec	r10
     f38:	f4 01       	movw	r30, r8
     f3a:	ea 0d       	add	r30, r10
     f3c:	f1 1d       	adc	r31, r1
     f3e:	80 81       	ld	r24, Z
     f40:	b7 01       	movw	r22, r14
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	88 d1       	rcall	.+784    	; 0x1256 <fputc>
     f46:	a1 10       	cpse	r10, r1
     f48:	f6 cf       	rjmp	.-20     	; 0xf36 <vfprintf+0x378>
     f4a:	33 20       	and	r3, r3
     f4c:	09 f4       	brne	.+2      	; 0xf50 <vfprintf+0x392>
     f4e:	5d ce       	rjmp	.-838    	; 0xc0a <vfprintf+0x4c>
     f50:	b7 01       	movw	r22, r14
     f52:	80 e2       	ldi	r24, 0x20	; 32
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	7f d1       	rcall	.+766    	; 0x1256 <fputc>
     f58:	3a 94       	dec	r3
     f5a:	f7 cf       	rjmp	.-18     	; 0xf4a <vfprintf+0x38c>
     f5c:	f7 01       	movw	r30, r14
     f5e:	86 81       	ldd	r24, Z+6	; 0x06
     f60:	97 81       	ldd	r25, Z+7	; 0x07
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <vfprintf+0x3aa>
     f64:	8f ef       	ldi	r24, 0xFF	; 255
     f66:	9f ef       	ldi	r25, 0xFF	; 255
     f68:	2c 96       	adiw	r28, 0x0c	; 12
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	bf 90       	pop	r11
     f86:	af 90       	pop	r10
     f88:	9f 90       	pop	r9
     f8a:	8f 90       	pop	r8
     f8c:	7f 90       	pop	r7
     f8e:	6f 90       	pop	r6
     f90:	5f 90       	pop	r5
     f92:	4f 90       	pop	r4
     f94:	3f 90       	pop	r3
     f96:	2f 90       	pop	r2
     f98:	08 95       	ret

00000f9a <calloc>:
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	86 9f       	mul	r24, r22
     fa4:	80 01       	movw	r16, r0
     fa6:	87 9f       	mul	r24, r23
     fa8:	10 0d       	add	r17, r0
     faa:	96 9f       	mul	r25, r22
     fac:	10 0d       	add	r17, r0
     fae:	11 24       	eor	r1, r1
     fb0:	c8 01       	movw	r24, r16
     fb2:	0d d0       	rcall	.+26     	; 0xfce <malloc>
     fb4:	ec 01       	movw	r28, r24
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <calloc+0x28>
     fba:	a8 01       	movw	r20, r16
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	38 d1       	rcall	.+624    	; 0x1232 <memset>
     fc2:	ce 01       	movw	r24, r28
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <malloc>:
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	91 05       	cpc	r25, r1
     fd6:	10 f4       	brcc	.+4      	; 0xfdc <malloc+0xe>
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	e0 91 a6 02 	lds	r30, 0x02A6
     fe0:	f0 91 a7 02 	lds	r31, 0x02A7
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	30 97       	sbiw	r30, 0x00	; 0
     fee:	39 f1       	breq	.+78     	; 0x103e <malloc+0x70>
     ff0:	40 81       	ld	r20, Z
     ff2:	51 81       	ldd	r21, Z+1	; 0x01
     ff4:	48 17       	cp	r20, r24
     ff6:	59 07       	cpc	r21, r25
     ff8:	b8 f0       	brcs	.+46     	; 0x1028 <malloc+0x5a>
     ffa:	48 17       	cp	r20, r24
     ffc:	59 07       	cpc	r21, r25
     ffe:	71 f4       	brne	.+28     	; 0x101c <malloc+0x4e>
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	10 97       	sbiw	r26, 0x00	; 0
    1006:	29 f0       	breq	.+10     	; 0x1012 <malloc+0x44>
    1008:	13 96       	adiw	r26, 0x03	; 3
    100a:	9c 93       	st	X, r25
    100c:	8e 93       	st	-X, r24
    100e:	12 97       	sbiw	r26, 0x02	; 2
    1010:	2c c0       	rjmp	.+88     	; 0x106a <malloc+0x9c>
    1012:	90 93 a7 02 	sts	0x02A7, r25
    1016:	80 93 a6 02 	sts	0x02A6, r24
    101a:	27 c0       	rjmp	.+78     	; 0x106a <malloc+0x9c>
    101c:	21 15       	cp	r18, r1
    101e:	31 05       	cpc	r19, r1
    1020:	31 f0       	breq	.+12     	; 0x102e <malloc+0x60>
    1022:	42 17       	cp	r20, r18
    1024:	53 07       	cpc	r21, r19
    1026:	18 f0       	brcs	.+6      	; 0x102e <malloc+0x60>
    1028:	a9 01       	movw	r20, r18
    102a:	db 01       	movw	r26, r22
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <malloc+0x62>
    102e:	ef 01       	movw	r28, r30
    1030:	9a 01       	movw	r18, r20
    1032:	bd 01       	movw	r22, r26
    1034:	df 01       	movw	r26, r30
    1036:	02 80       	ldd	r0, Z+2	; 0x02
    1038:	f3 81       	ldd	r31, Z+3	; 0x03
    103a:	e0 2d       	mov	r30, r0
    103c:	d7 cf       	rjmp	.-82     	; 0xfec <malloc+0x1e>
    103e:	21 15       	cp	r18, r1
    1040:	31 05       	cpc	r19, r1
    1042:	f9 f0       	breq	.+62     	; 0x1082 <malloc+0xb4>
    1044:	28 1b       	sub	r18, r24
    1046:	39 0b       	sbc	r19, r25
    1048:	24 30       	cpi	r18, 0x04	; 4
    104a:	31 05       	cpc	r19, r1
    104c:	80 f4       	brcc	.+32     	; 0x106e <malloc+0xa0>
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	61 15       	cp	r22, r1
    1054:	71 05       	cpc	r23, r1
    1056:	21 f0       	breq	.+8      	; 0x1060 <malloc+0x92>
    1058:	fb 01       	movw	r30, r22
    105a:	93 83       	std	Z+3, r25	; 0x03
    105c:	82 83       	std	Z+2, r24	; 0x02
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <malloc+0x9a>
    1060:	90 93 a7 02 	sts	0x02A7, r25
    1064:	80 93 a6 02 	sts	0x02A6, r24
    1068:	fe 01       	movw	r30, r28
    106a:	32 96       	adiw	r30, 0x02	; 2
    106c:	44 c0       	rjmp	.+136    	; 0x10f6 <malloc+0x128>
    106e:	fe 01       	movw	r30, r28
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	81 93       	st	Z+, r24
    1076:	91 93       	st	Z+, r25
    1078:	22 50       	subi	r18, 0x02	; 2
    107a:	31 09       	sbc	r19, r1
    107c:	39 83       	std	Y+1, r19	; 0x01
    107e:	28 83       	st	Y, r18
    1080:	3a c0       	rjmp	.+116    	; 0x10f6 <malloc+0x128>
    1082:	20 91 a4 02 	lds	r18, 0x02A4
    1086:	30 91 a5 02 	lds	r19, 0x02A5
    108a:	23 2b       	or	r18, r19
    108c:	41 f4       	brne	.+16     	; 0x109e <malloc+0xd0>
    108e:	20 91 02 02 	lds	r18, 0x0202
    1092:	30 91 03 02 	lds	r19, 0x0203
    1096:	30 93 a5 02 	sts	0x02A5, r19
    109a:	20 93 a4 02 	sts	0x02A4, r18
    109e:	20 91 00 02 	lds	r18, 0x0200
    10a2:	30 91 01 02 	lds	r19, 0x0201
    10a6:	21 15       	cp	r18, r1
    10a8:	31 05       	cpc	r19, r1
    10aa:	41 f4       	brne	.+16     	; 0x10bc <malloc+0xee>
    10ac:	2d b7       	in	r18, 0x3d	; 61
    10ae:	3e b7       	in	r19, 0x3e	; 62
    10b0:	40 91 04 02 	lds	r20, 0x0204
    10b4:	50 91 05 02 	lds	r21, 0x0205
    10b8:	24 1b       	sub	r18, r20
    10ba:	35 0b       	sbc	r19, r21
    10bc:	e0 91 a4 02 	lds	r30, 0x02A4
    10c0:	f0 91 a5 02 	lds	r31, 0x02A5
    10c4:	e2 17       	cp	r30, r18
    10c6:	f3 07       	cpc	r31, r19
    10c8:	a0 f4       	brcc	.+40     	; 0x10f2 <malloc+0x124>
    10ca:	2e 1b       	sub	r18, r30
    10cc:	3f 0b       	sbc	r19, r31
    10ce:	28 17       	cp	r18, r24
    10d0:	39 07       	cpc	r19, r25
    10d2:	78 f0       	brcs	.+30     	; 0x10f2 <malloc+0x124>
    10d4:	ac 01       	movw	r20, r24
    10d6:	4e 5f       	subi	r20, 0xFE	; 254
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
    10da:	24 17       	cp	r18, r20
    10dc:	35 07       	cpc	r19, r21
    10de:	48 f0       	brcs	.+18     	; 0x10f2 <malloc+0x124>
    10e0:	4e 0f       	add	r20, r30
    10e2:	5f 1f       	adc	r21, r31
    10e4:	50 93 a5 02 	sts	0x02A5, r21
    10e8:	40 93 a4 02 	sts	0x02A4, r20
    10ec:	81 93       	st	Z+, r24
    10ee:	91 93       	st	Z+, r25
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <malloc+0x128>
    10f2:	e0 e0       	ldi	r30, 0x00	; 0
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	cf 01       	movw	r24, r30
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <free>:
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	09 f4       	brne	.+2      	; 0x1108 <free+0xa>
    1106:	87 c0       	rjmp	.+270    	; 0x1216 <free+0x118>
    1108:	fc 01       	movw	r30, r24
    110a:	32 97       	sbiw	r30, 0x02	; 2
    110c:	13 82       	std	Z+3, r1	; 0x03
    110e:	12 82       	std	Z+2, r1	; 0x02
    1110:	c0 91 a6 02 	lds	r28, 0x02A6
    1114:	d0 91 a7 02 	lds	r29, 0x02A7
    1118:	20 97       	sbiw	r28, 0x00	; 0
    111a:	81 f4       	brne	.+32     	; 0x113c <free+0x3e>
    111c:	20 81       	ld	r18, Z
    111e:	31 81       	ldd	r19, Z+1	; 0x01
    1120:	28 0f       	add	r18, r24
    1122:	39 1f       	adc	r19, r25
    1124:	80 91 a4 02 	lds	r24, 0x02A4
    1128:	90 91 a5 02 	lds	r25, 0x02A5
    112c:	82 17       	cp	r24, r18
    112e:	93 07       	cpc	r25, r19
    1130:	79 f5       	brne	.+94     	; 0x1190 <free+0x92>
    1132:	f0 93 a5 02 	sts	0x02A5, r31
    1136:	e0 93 a4 02 	sts	0x02A4, r30
    113a:	6d c0       	rjmp	.+218    	; 0x1216 <free+0x118>
    113c:	de 01       	movw	r26, r28
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	ae 17       	cp	r26, r30
    1144:	bf 07       	cpc	r27, r31
    1146:	50 f4       	brcc	.+20     	; 0x115c <free+0x5e>
    1148:	12 96       	adiw	r26, 0x02	; 2
    114a:	4d 91       	ld	r20, X+
    114c:	5c 91       	ld	r21, X
    114e:	13 97       	sbiw	r26, 0x03	; 3
    1150:	9d 01       	movw	r18, r26
    1152:	41 15       	cp	r20, r1
    1154:	51 05       	cpc	r21, r1
    1156:	09 f1       	breq	.+66     	; 0x119a <free+0x9c>
    1158:	da 01       	movw	r26, r20
    115a:	f3 cf       	rjmp	.-26     	; 0x1142 <free+0x44>
    115c:	b3 83       	std	Z+3, r27	; 0x03
    115e:	a2 83       	std	Z+2, r26	; 0x02
    1160:	40 81       	ld	r20, Z
    1162:	51 81       	ldd	r21, Z+1	; 0x01
    1164:	84 0f       	add	r24, r20
    1166:	95 1f       	adc	r25, r21
    1168:	8a 17       	cp	r24, r26
    116a:	9b 07       	cpc	r25, r27
    116c:	71 f4       	brne	.+28     	; 0x118a <free+0x8c>
    116e:	8d 91       	ld	r24, X+
    1170:	9c 91       	ld	r25, X
    1172:	11 97       	sbiw	r26, 0x01	; 1
    1174:	84 0f       	add	r24, r20
    1176:	95 1f       	adc	r25, r21
    1178:	02 96       	adiw	r24, 0x02	; 2
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
    117e:	12 96       	adiw	r26, 0x02	; 2
    1180:	8d 91       	ld	r24, X+
    1182:	9c 91       	ld	r25, X
    1184:	13 97       	sbiw	r26, 0x03	; 3
    1186:	93 83       	std	Z+3, r25	; 0x03
    1188:	82 83       	std	Z+2, r24	; 0x02
    118a:	21 15       	cp	r18, r1
    118c:	31 05       	cpc	r19, r1
    118e:	29 f4       	brne	.+10     	; 0x119a <free+0x9c>
    1190:	f0 93 a7 02 	sts	0x02A7, r31
    1194:	e0 93 a6 02 	sts	0x02A6, r30
    1198:	3e c0       	rjmp	.+124    	; 0x1216 <free+0x118>
    119a:	d9 01       	movw	r26, r18
    119c:	13 96       	adiw	r26, 0x03	; 3
    119e:	fc 93       	st	X, r31
    11a0:	ee 93       	st	-X, r30
    11a2:	12 97       	sbiw	r26, 0x02	; 2
    11a4:	4d 91       	ld	r20, X+
    11a6:	5d 91       	ld	r21, X+
    11a8:	a4 0f       	add	r26, r20
    11aa:	b5 1f       	adc	r27, r21
    11ac:	ea 17       	cp	r30, r26
    11ae:	fb 07       	cpc	r31, r27
    11b0:	79 f4       	brne	.+30     	; 0x11d0 <free+0xd2>
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	84 0f       	add	r24, r20
    11b8:	95 1f       	adc	r25, r21
    11ba:	02 96       	adiw	r24, 0x02	; 2
    11bc:	d9 01       	movw	r26, r18
    11be:	11 96       	adiw	r26, 0x01	; 1
    11c0:	9c 93       	st	X, r25
    11c2:	8e 93       	st	-X, r24
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	13 96       	adiw	r26, 0x03	; 3
    11ca:	9c 93       	st	X, r25
    11cc:	8e 93       	st	-X, r24
    11ce:	12 97       	sbiw	r26, 0x02	; 2
    11d0:	e0 e0       	ldi	r30, 0x00	; 0
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	9b 81       	ldd	r25, Y+3	; 0x03
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	19 f0       	breq	.+6      	; 0x11e2 <free+0xe4>
    11dc:	fe 01       	movw	r30, r28
    11de:	ec 01       	movw	r28, r24
    11e0:	f9 cf       	rjmp	.-14     	; 0x11d4 <free+0xd6>
    11e2:	ce 01       	movw	r24, r28
    11e4:	02 96       	adiw	r24, 0x02	; 2
    11e6:	28 81       	ld	r18, Y
    11e8:	39 81       	ldd	r19, Y+1	; 0x01
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	20 91 a4 02 	lds	r18, 0x02A4
    11f2:	30 91 a5 02 	lds	r19, 0x02A5
    11f6:	28 17       	cp	r18, r24
    11f8:	39 07       	cpc	r19, r25
    11fa:	69 f4       	brne	.+26     	; 0x1216 <free+0x118>
    11fc:	30 97       	sbiw	r30, 0x00	; 0
    11fe:	29 f4       	brne	.+10     	; 0x120a <free+0x10c>
    1200:	10 92 a7 02 	sts	0x02A7, r1
    1204:	10 92 a6 02 	sts	0x02A6, r1
    1208:	02 c0       	rjmp	.+4      	; 0x120e <free+0x110>
    120a:	13 82       	std	Z+3, r1	; 0x03
    120c:	12 82       	std	Z+2, r1	; 0x02
    120e:	d0 93 a5 02 	sts	0x02A5, r29
    1212:	c0 93 a4 02 	sts	0x02A4, r28
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <strnlen_P>:
    121c:	fc 01       	movw	r30, r24
    121e:	05 90       	lpm	r0, Z+
    1220:	61 50       	subi	r22, 0x01	; 1
    1222:	70 40       	sbci	r23, 0x00	; 0
    1224:	01 10       	cpse	r0, r1
    1226:	d8 f7       	brcc	.-10     	; 0x121e <strnlen_P+0x2>
    1228:	80 95       	com	r24
    122a:	90 95       	com	r25
    122c:	8e 0f       	add	r24, r30
    122e:	9f 1f       	adc	r25, r31
    1230:	08 95       	ret

00001232 <memset>:
    1232:	dc 01       	movw	r26, r24
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <memset+0x6>
    1236:	6d 93       	st	X+, r22
    1238:	41 50       	subi	r20, 0x01	; 1
    123a:	50 40       	sbci	r21, 0x00	; 0
    123c:	e0 f7       	brcc	.-8      	; 0x1236 <memset+0x4>
    123e:	08 95       	ret

00001240 <strnlen>:
    1240:	fc 01       	movw	r30, r24
    1242:	61 50       	subi	r22, 0x01	; 1
    1244:	70 40       	sbci	r23, 0x00	; 0
    1246:	01 90       	ld	r0, Z+
    1248:	01 10       	cpse	r0, r1
    124a:	d8 f7       	brcc	.-10     	; 0x1242 <strnlen+0x2>
    124c:	80 95       	com	r24
    124e:	90 95       	com	r25
    1250:	8e 0f       	add	r24, r30
    1252:	9f 1f       	adc	r25, r31
    1254:	08 95       	ret

00001256 <fputc>:
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	18 2f       	mov	r17, r24
    1260:	09 2f       	mov	r16, r25
    1262:	eb 01       	movw	r28, r22
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	81 fd       	sbrc	r24, 1
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <fputc+0x1a>
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	9f ef       	ldi	r25, 0xFF	; 255
    126e:	20 c0       	rjmp	.+64     	; 0x12b0 <fputc+0x5a>
    1270:	82 ff       	sbrs	r24, 2
    1272:	10 c0       	rjmp	.+32     	; 0x1294 <fputc+0x3e>
    1274:	4e 81       	ldd	r20, Y+6	; 0x06
    1276:	5f 81       	ldd	r21, Y+7	; 0x07
    1278:	2c 81       	ldd	r18, Y+4	; 0x04
    127a:	3d 81       	ldd	r19, Y+5	; 0x05
    127c:	42 17       	cp	r20, r18
    127e:	53 07       	cpc	r21, r19
    1280:	7c f4       	brge	.+30     	; 0x12a0 <fputc+0x4a>
    1282:	e8 81       	ld	r30, Y
    1284:	f9 81       	ldd	r31, Y+1	; 0x01
    1286:	9f 01       	movw	r18, r30
    1288:	2f 5f       	subi	r18, 0xFF	; 255
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
    128c:	39 83       	std	Y+1, r19	; 0x01
    128e:	28 83       	st	Y, r18
    1290:	10 83       	st	Z, r17
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <fputc+0x4a>
    1294:	e8 85       	ldd	r30, Y+8	; 0x08
    1296:	f9 85       	ldd	r31, Y+9	; 0x09
    1298:	81 2f       	mov	r24, r17
    129a:	19 95       	eicall
    129c:	89 2b       	or	r24, r25
    129e:	29 f7       	brne	.-54     	; 0x126a <fputc+0x14>
    12a0:	2e 81       	ldd	r18, Y+6	; 0x06
    12a2:	3f 81       	ldd	r19, Y+7	; 0x07
    12a4:	2f 5f       	subi	r18, 0xFF	; 255
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	3f 83       	std	Y+7, r19	; 0x07
    12aa:	2e 83       	std	Y+6, r18	; 0x06
    12ac:	81 2f       	mov	r24, r17
    12ae:	90 2f       	mov	r25, r16
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	08 95       	ret

000012ba <__ultoa_invert>:
    12ba:	fa 01       	movw	r30, r20
    12bc:	aa 27       	eor	r26, r26
    12be:	28 30       	cpi	r18, 0x08	; 8
    12c0:	51 f1       	breq	.+84     	; 0x1316 <__ultoa_invert+0x5c>
    12c2:	20 31       	cpi	r18, 0x10	; 16
    12c4:	81 f1       	breq	.+96     	; 0x1326 <__ultoa_invert+0x6c>
    12c6:	e8 94       	clt
    12c8:	6f 93       	push	r22
    12ca:	6e 7f       	andi	r22, 0xFE	; 254
    12cc:	6e 5f       	subi	r22, 0xFE	; 254
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	8f 4f       	sbci	r24, 0xFF	; 255
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	af 4f       	sbci	r26, 0xFF	; 255
    12d6:	b1 e0       	ldi	r27, 0x01	; 1
    12d8:	3e d0       	rcall	.+124    	; 0x1356 <__ultoa_invert+0x9c>
    12da:	b4 e0       	ldi	r27, 0x04	; 4
    12dc:	3c d0       	rcall	.+120    	; 0x1356 <__ultoa_invert+0x9c>
    12de:	67 0f       	add	r22, r23
    12e0:	78 1f       	adc	r23, r24
    12e2:	89 1f       	adc	r24, r25
    12e4:	9a 1f       	adc	r25, r26
    12e6:	a1 1d       	adc	r26, r1
    12e8:	68 0f       	add	r22, r24
    12ea:	79 1f       	adc	r23, r25
    12ec:	8a 1f       	adc	r24, r26
    12ee:	91 1d       	adc	r25, r1
    12f0:	a1 1d       	adc	r26, r1
    12f2:	6a 0f       	add	r22, r26
    12f4:	71 1d       	adc	r23, r1
    12f6:	81 1d       	adc	r24, r1
    12f8:	91 1d       	adc	r25, r1
    12fa:	a1 1d       	adc	r26, r1
    12fc:	20 d0       	rcall	.+64     	; 0x133e <__ultoa_invert+0x84>
    12fe:	09 f4       	brne	.+2      	; 0x1302 <__ultoa_invert+0x48>
    1300:	68 94       	set
    1302:	3f 91       	pop	r19
    1304:	2a e0       	ldi	r18, 0x0A	; 10
    1306:	26 9f       	mul	r18, r22
    1308:	11 24       	eor	r1, r1
    130a:	30 19       	sub	r19, r0
    130c:	30 5d       	subi	r19, 0xD0	; 208
    130e:	31 93       	st	Z+, r19
    1310:	de f6       	brtc	.-74     	; 0x12c8 <__ultoa_invert+0xe>
    1312:	cf 01       	movw	r24, r30
    1314:	08 95       	ret
    1316:	46 2f       	mov	r20, r22
    1318:	47 70       	andi	r20, 0x07	; 7
    131a:	40 5d       	subi	r20, 0xD0	; 208
    131c:	41 93       	st	Z+, r20
    131e:	b3 e0       	ldi	r27, 0x03	; 3
    1320:	0f d0       	rcall	.+30     	; 0x1340 <__ultoa_invert+0x86>
    1322:	c9 f7       	brne	.-14     	; 0x1316 <__ultoa_invert+0x5c>
    1324:	f6 cf       	rjmp	.-20     	; 0x1312 <__ultoa_invert+0x58>
    1326:	46 2f       	mov	r20, r22
    1328:	4f 70       	andi	r20, 0x0F	; 15
    132a:	40 5d       	subi	r20, 0xD0	; 208
    132c:	4a 33       	cpi	r20, 0x3A	; 58
    132e:	18 f0       	brcs	.+6      	; 0x1336 <__ultoa_invert+0x7c>
    1330:	49 5d       	subi	r20, 0xD9	; 217
    1332:	31 fd       	sbrc	r19, 1
    1334:	40 52       	subi	r20, 0x20	; 32
    1336:	41 93       	st	Z+, r20
    1338:	02 d0       	rcall	.+4      	; 0x133e <__ultoa_invert+0x84>
    133a:	a9 f7       	brne	.-22     	; 0x1326 <__ultoa_invert+0x6c>
    133c:	ea cf       	rjmp	.-44     	; 0x1312 <__ultoa_invert+0x58>
    133e:	b4 e0       	ldi	r27, 0x04	; 4
    1340:	a6 95       	lsr	r26
    1342:	97 95       	ror	r25
    1344:	87 95       	ror	r24
    1346:	77 95       	ror	r23
    1348:	67 95       	ror	r22
    134a:	ba 95       	dec	r27
    134c:	c9 f7       	brne	.-14     	; 0x1340 <__ultoa_invert+0x86>
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	61 05       	cpc	r22, r1
    1352:	71 05       	cpc	r23, r1
    1354:	08 95       	ret
    1356:	9b 01       	movw	r18, r22
    1358:	ac 01       	movw	r20, r24
    135a:	0a 2e       	mov	r0, r26
    135c:	06 94       	lsr	r0
    135e:	57 95       	ror	r21
    1360:	47 95       	ror	r20
    1362:	37 95       	ror	r19
    1364:	27 95       	ror	r18
    1366:	ba 95       	dec	r27
    1368:	c9 f7       	brne	.-14     	; 0x135c <__ultoa_invert+0xa2>
    136a:	62 0f       	add	r22, r18
    136c:	73 1f       	adc	r23, r19
    136e:	84 1f       	adc	r24, r20
    1370:	95 1f       	adc	r25, r21
    1372:	a0 1d       	adc	r26, r0
    1374:	08 95       	ret

00001376 <_exit>:
    1376:	f8 94       	cli

00001378 <__stop_program>:
    1378:	ff cf       	rjmp	.-2      	; 0x1378 <__stop_program>
